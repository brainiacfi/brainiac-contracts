{
  "address": "0x18924F3D113E3072e45B0a186b1845B17496d0E4",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vrtConversionAddress",
          "type": "address"
        }
      ],
      "name": "VRTConversionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "VestedTokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "name": "XVSVested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "XVSWithdrawn",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TOTAL_VESTING_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract XVSVestingProxy",
          "name": "xvsVestingProxy",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_notEntered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getWithdrawableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWithdrawableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVestedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWithdrawnAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_xvsAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrtConversionAddress",
          "type": "address"
        }
      ],
      "name": "setVRTConverter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestings",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vrtConversionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvs",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvsDecimalsMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9be2b3fe935a10b85c378e0396b832fb132f13baa2ea0e3e0c1128a538be2c24",
  "receipt": {
    "to": null,
    "from": "0x9E109d68A7e245d5a1D2e2E8e6BD4230A777a70B",
    "contractAddress": "0x18924F3D113E3072e45B0a186b1845B17496d0E4",
    "transactionIndex": 14,
    "gasUsed": "1188666",
    "logsBloom": "0x
    "blockHash": "0xdcf6632c454b6400657fc70a16c2b9e50cc88d77f6c5ceac65fbe891477807d3",
    "transactionHash": "0x9be2b3fe935a10b85c378e0396b832fb132f13baa2ea0e3e0c1128a538be2c24",
    "logs": [],
    "blockNumber": 19219089,
    "cumulativeGasUsed": "3546693",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b37497c5b1f763df37ae9c22af67abad",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrtConversionAddress\",\"type\":\"address\"}],\"name\":\"VRTConversionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"VestedTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"XVSVested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"XVSWithdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_VESTING_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract XVSVestingProxy\",\"name\":\"xvsVestingProxy\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_notEntered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWithdrawableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xvsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrtConversionAddress\",\"type\":\"address\"}],\"name\":\"setVRTConverter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vrtConversionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvs\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvsDecimalsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"methods\":{\"deposit(address,uint256)\":{\"params\":{\"depositAmount\":\"XVS amount for deposit\",\"recipient\":\"The vesting recipient\"}},\"getCurrentTime()\":{\"return\":\"blocktimestamp\"},\"getWithdrawableAmount(address)\":{\"params\":{\"recipient\":\"The vesting recipient\"},\"return\":\"A tuple with totalWithdrawableAmount , totalVestedAmount and totalWithdrawnAmount\"},\"initialize(address)\":{\"params\":{\"_xvsAddress\":\"The XVSToken address\"}},\"setVRTConverter(address)\":{\"details\":\"Note: If VRTConverter is not set, then Vesting is not allowed\",\"params\":{\"_vrtConversionAddress\":\"The VRTConverterProxy Address\"}}},\"title\":\"Venus's XVSVesting Contract\"},\"userdoc\":{\"methods\":{\"_become(address)\":{\"notice\":\"* Admin Functions **\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit XVS for Vesting\"},\"getCurrentTime()\":{\"notice\":\"current block timestamp\"},\"getWithdrawableAmount(address)\":{\"notice\":\"get Withdrawable XVS Amount\"},\"initialize(address)\":{\"notice\":\"initialize XVSVestingStorage\"},\"setVRTConverter(address)\":{\"notice\":\"sets VRTConverter Address\"},\"withdraw()\":{\"notice\":\"Withdraw Vested XVS of recipient\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/VRT/XVSVesting.sol\":\"XVSVesting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-call-value\\r\\n        // solium-disable-next-line security/no-call-value\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9d1fa802b90f8ac9339ec8e17d54793c42b6f6b5111832143cdf79762f577ec8\"},\"contracts/Utils/IBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {BEP20Detailed}.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3a8f9954c8785aace7fde96102415fa4de1970920315652e3496b1c2b8dd965\"},\"contracts/Utils/SafeBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for BEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeBEP20: decreased allowance below zero\\\");\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeBEP20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeBEP20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x80a537e0bfa50067c3ef015f49aceb4e4ce30ae3069d40977aaa95911916224d\"},\"contracts/Utils/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb295b448107f6adee6c0861eba7cd58983eeb1a2bf9cd24b3df9c75fe17db75\"},\"contracts/VRT/XVSVesting.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"../Utils/IBEP20.sol\\\";\\r\\nimport \\\"../Utils/SafeBEP20.sol\\\";\\r\\nimport \\\"./XVSVestingStorage.sol\\\";\\r\\nimport \\\"./XVSVestingProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Venus's XVSVesting Contract\\r\\n * @author Venus\\r\\n */\\r\\ncontract XVSVesting is XVSVestingStorage {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    /// @notice total vesting period for 1 year in seconds\\r\\n    uint256 constant public TOTAL_VESTING_TIME = 365 * 24 * 60 * 60;\\r\\n\\r\\n    /// @notice decimal precision for XVS\\r\\n    uint256 constant public xvsDecimalsMultiplier = 1e18;\\r\\n\\r\\n    /// @notice Emitted when XVSVested is claimed by recipient\\r\\n    event VestedTokensClaimed(address recipient, uint256 amountClaimed);\\r\\n\\r\\n    /// @notice Emitted when vrtConversionAddress is set\\r\\n    event VRTConversionSet(address vrtConversionAddress);\\r\\n\\r\\n    /// @notice Emitted when XVS is deposited for vesting\\r\\n    event XVSVested(\\r\\n        address indexed recipient,\\r\\n        uint256 startTime,\\r\\n        uint256 amount,\\r\\n        uint256 withdrawnAmount\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when XVS is withdrawn by recipient\\r\\n    event XVSWithdrawn(address recipient, uint256 amount);\\r\\n\\r\\n    modifier nonZeroAddress(address _address) {\\r\\n        require(_address != address(0), \\\"Address cannot be Zero\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() public {}\\r\\n\\r\\n    /**\\r\\n     * @notice initialize XVSVestingStorage\\r\\n     * @param _xvsAddress The XVSToken address\\r\\n     */\\r\\n    function initialize(address _xvsAddress) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the XVSVesting\\\");\\r\\n        require(initialized == false, \\\"XVSVesting is already initialized\\\");\\r\\n        require(_xvsAddress != address(0), \\\"_xvsAddress cannot be Zero\\\");\\r\\n        xvs = IBEP20(_xvsAddress);\\r\\n\\r\\n        _notEntered = true;\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    modifier isInitialized() {\\r\\n        require(initialized == true, \\\"XVSVesting is not initialized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice sets VRTConverter Address\\r\\n     * @dev Note: If VRTConverter is not set, then Vesting is not allowed\\r\\n     * @param _vrtConversionAddress The VRTConverterProxy Address\\r\\n     */\\r\\n    function setVRTConverter(address _vrtConversionAddress) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the Vault\\\");\\r\\n        require(_vrtConversionAddress != address(0), \\\"vrtConversionAddress cannot be Zero\\\");\\r\\n        vrtConversionAddress = _vrtConversionAddress;\\r\\n        emit VRTConversionSet(_vrtConversionAddress);\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"only admin can\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVrtConverter() {\\r\\n        require(\\r\\n            msg.sender == vrtConversionAddress,\\r\\n            \\\"only VRTConversion Address can call the function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier vestingExistCheck(address recipient) {\\r\\n        require(\\r\\n            vestings[recipient].length > 0,\\r\\n            \\\"recipient doesnot have any vestingRecord\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit XVS for Vesting\\r\\n     * @param recipient The vesting recipient\\r\\n     * @param depositAmount XVS amount for deposit\\r\\n     */\\r\\n    function deposit(address recipient, uint depositAmount) external isInitialized onlyVrtConverter\\r\\n        nonZeroAddress(recipient) {\\r\\n        require(depositAmount > 0, \\\"Deposit amount must be non-zero\\\");\\r\\n\\r\\n        VestingRecord[] storage vestingsOfRecipient = vestings[recipient];\\r\\n\\r\\n        VestingRecord memory vesting = VestingRecord({\\r\\n            recipient: recipient,\\r\\n            startTime: getCurrentTime(),\\r\\n            amount: depositAmount,\\r\\n            withdrawnAmount: 0\\r\\n        });\\r\\n\\r\\n        vestingsOfRecipient.push(vesting);\\r\\n\\r\\n        emit XVSVested(\\r\\n            recipient,\\r\\n            vesting.startTime,\\r\\n            vesting.amount,\\r\\n            vesting.withdrawnAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw Vested XVS of recipient\\r\\n     */\\r\\n    function withdraw() external isInitialized vestingExistCheck(msg.sender) {\\r\\n        address recipient = msg.sender;\\r\\n        VestingRecord[] storage vestingsOfRecipient = vestings[recipient];\\r\\n        uint256 vestingCount = vestingsOfRecipient.length;\\r\\n        uint256 totalWithdrawableAmount = 0;\\r\\n\\r\\n        for(uint i = 0; i < vestingCount; ++i) {\\r\\n            VestingRecord storage vesting = vestingsOfRecipient[i];\\r\\n            (uint256 vestedAmount, uint256 toWithdraw) = calculateWithdrawableAmount(vesting.amount, vesting.startTime, vesting.withdrawnAmount);\\r\\n            if(toWithdraw > 0){\\r\\n                totalWithdrawableAmount = totalWithdrawableAmount.add(toWithdraw);\\r\\n                vesting.withdrawnAmount = vesting.withdrawnAmount.add(toWithdraw);\\r\\n            }\\r\\n        }\\r\\n\\r\\n       if(totalWithdrawableAmount > 0){\\r\\n           uint256 xvsBalance = xvs.balanceOf(address(this));\\r\\n           require(xvsBalance >= totalWithdrawableAmount, \\\"Insufficient XVS for withdrawal\\\");\\r\\n           emit XVSWithdrawn(recipient, totalWithdrawableAmount);\\r\\n           xvs.safeTransfer(recipient, totalWithdrawableAmount);\\r\\n       }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get Withdrawable XVS Amount\\r\\n     * @param recipient The vesting recipient\\r\\n     * @return A tuple with totalWithdrawableAmount , totalVestedAmount and totalWithdrawnAmount\\r\\n     */\\r\\n    function getWithdrawableAmount(address recipient) view public isInitialized nonZeroAddress(recipient) vestingExistCheck(recipient)\\r\\n    returns (uint256 totalWithdrawableAmount, uint256 totalVestedAmount, uint256 totalWithdrawnAmount)\\r\\n    {\\r\\n        VestingRecord[] storage vestingsOfRecipient = vestings[recipient];\\r\\n        uint256 vestingCount = vestingsOfRecipient.length;\\r\\n\\r\\n        for(uint i = 0; i < vestingCount; i++) {\\r\\n            VestingRecord storage vesting = vestingsOfRecipient[i];\\r\\n            (uint256 vestedAmount, uint256 toWithdraw) = calculateWithdrawableAmount(vesting.amount, vesting.startTime, vesting.withdrawnAmount);\\r\\n            totalVestedAmount = totalVestedAmount.add(vestedAmount);\\r\\n            totalWithdrawableAmount = totalWithdrawableAmount.add(toWithdraw);\\r\\n            totalWithdrawnAmount = totalWithdrawnAmount.add(vesting.withdrawnAmount);\\r\\n        }\\r\\n\\r\\n        return (totalWithdrawableAmount, totalVestedAmount, totalWithdrawnAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get Withdrawable XVS Amount\\r\\n     * @param amount Amount deposited for vesting\\r\\n     * @param vestingStartTime time in epochSeconds at the time of vestingDeposit\\r\\n     * @param withdrawnAmount XVSAmount withdrawn from VestedAmount\\r\\n     * @return A tuple with vestedAmount and withdrawableAmount\\r\\n     */\\r\\n    function calculateWithdrawableAmount(uint256 amount, uint256 vestingStartTime, uint256 withdrawnAmount)\\r\\n      view internal returns (uint256, uint256) {\\r\\n        uint256 vestedAmount = calculateVestedAmount(amount, vestingStartTime, getCurrentTime());\\r\\n        uint toWithdraw = vestedAmount.sub(withdrawnAmount);\\r\\n        return (vestedAmount, toWithdraw);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate total vested amount\\r\\n     * @param vestingAmount Amount deposited for vesting\\r\\n     * @param vestingStartTime time in epochSeconds at the time of vestingDeposit\\r\\n     * @param currentTime currentTime in epochSeconds\\r\\n     * @return Total XVS amount vested\\r\\n     */\\r\\n    function calculateVestedAmount(uint256 vestingAmount, uint256 vestingStartTime, uint256 currentTime) internal view returns (uint256) {\\r\\n        if (currentTime < vestingStartTime) {\\r\\n            return 0;\\r\\n        } else if (currentTime > vestingStartTime.add(TOTAL_VESTING_TIME)) {\\r\\n            return vestingAmount;\\r\\n        } else {\\r\\n            return (vestingAmount.mul(currentTime.sub(vestingStartTime))).div(TOTAL_VESTING_TIME);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice current block timestamp\\r\\n     * @return blocktimestamp\\r\\n     */\\r\\n   function getCurrentTime() public view returns (uint256) {\\r\\n      return block.timestamp;\\r\\n   }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _become(XVSVestingProxy xvsVestingProxy) public {\\r\\n        require(msg.sender == xvsVestingProxy.admin(), \\\"only proxy admin can change brains\\\");\\r\\n        xvsVestingProxy._acceptImplementation();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0ada963a2c6a2e77269b1213579e4d870bf352a03026454a5eca4eb7e6631753\"},\"contracts/VRT/XVSVestingProxy.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./XVSVestingStorage.sol\\\";\\r\\n\\r\\ncontract XVSVestingProxy is  XVSVestingAdminStorage {\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingImplementation is changed\\r\\n      */\\r\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingImplementation is accepted, which means XVSVesting implementation is updated\\r\\n      */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n    * @notice Emitted when pendingAdmin is changed\\r\\n    */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n    * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n    */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    constructor(address implementation_,\\r\\n                address _xvsAddress) nonZeroAddress(implementation_) nonZeroAddress(_xvsAddress) public {\\r\\n        // Creator of the contract is admin during initialization\\r\\n        admin = msg.sender;\\r\\n\\r\\n        // New implementations always get set via the settor (post-initialize)\\r\\n        _setImplementation(implementation_);\\r\\n\\r\\n        // First delegate gets to initialize the delegator (i.e. storage contract)\\r\\n        delegateTo(implementation_, abi.encodeWithSignature(\\\"initialize(address)\\\",\\r\\n                                                            _xvsAddress));\\r\\n    }\\r\\n\\r\\n    modifier nonZeroAddress(address _address) {\\r\\n        require(_address != address(0), \\\"Address cannot be Zero\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Called by the admin to update the implementation of the delegator\\r\\n    * @param implementation_ The address of the new implementation for delegation\\r\\n    */\\r\\n    function _setImplementation(address implementation_) public {\\r\\n        require(msg.sender == admin, \\\"XVSVestingProxy::_setImplementation: admin only\\\");\\r\\n        require(implementation_ != address(0), \\\"XVSVestingProxy::_setImplementation: invalid implementation address\\\");\\r\\n\\r\\n        address oldImplementation = implementation;\\r\\n        implementation = implementation_;\\r\\n\\r\\n        emit NewImplementation(oldImplementation, implementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Internal method to delegate execution to another contract\\r\\n      * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\r\\n      * @param callee The contract to delegatecall\\r\\n      * @param data The raw data to delegatecall\\r\\n      * @return The returned bytes from the delegatecall\\r\\n     */\\r\\n    function delegateTo(address callee, bytes memory data) internal nonZeroAddress(callee) returns (bytes memory) {\\r\\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\\r\\n        assembly {\\r\\n            if eq(success, 0) {\\r\\n                revert(add(returnData, 0x20), returndatasize)\\r\\n            }\\r\\n        }\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _setPendingImplementation(address newPendingImplementation) nonZeroAddress(newPendingImplementation) public {\\r\\n\\r\\n        require(msg.sender == admin, \\\"Only admin can set Pending Implementation\\\");\\r\\n\\r\\n        address oldPendingImplementation = pendingImplementation;\\r\\n\\r\\n        pendingImplementation = newPendingImplementation;\\r\\n\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Accepts new implementation of VRT Vault. msg.sender must be pendingImplementation\\r\\n    * @dev Admin function for new implementation to accept it's role as implementation\\r\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n    */\\r\\n    function _acceptImplementation() public {\\r\\n        // Check caller is pendingImplementation\\r\\n        require(msg.sender == pendingImplementation, \\\"only address marked as pendingImplementation can accept Implementation\\\");\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = implementation;\\r\\n        address oldPendingImplementation = pendingImplementation;\\r\\n\\r\\n        implementation = pendingImplementation;\\r\\n\\r\\n        pendingImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, implementation);\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address newPendingAdmin) nonZeroAddress(newPendingAdmin) public {\\r\\n        // Check caller = admin\\r\\n        require(msg.sender == admin, \\\"only admin can set pending admin\\\");\\r\\n        require(newPendingAdmin != pendingAdmin , \\\"New pendingAdmin can not be same as the previous one\\\");\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() public {\\r\\n        // Check caller is pendingAdmin\\r\\n        require(msg.sender == pendingAdmin, \\\"only address marked as pendingAdmin can accept as Admin\\\");\\r\\n        \\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    function () external payable {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = implementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n              let free_mem_ptr := mload(0x40)\\r\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\r\\n\\r\\n              switch success\\r\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\r\\n              default { return(free_mem_ptr, returndatasize) }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x75853ae15767d462e54a4cef703871d85b2f2ddb0e01840853ff63dab95b6043\"},\"contracts/VRT/XVSVestingStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"../Utils/SafeMath.sol\\\";\\r\\nimport \\\"../Utils/IBEP20.sol\\\";\\r\\n\\r\\ncontract XVSVestingAdminStorage {\\r\\n    /**\\r\\n    * @notice Administrator for this contract\\r\\n    */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending administrator for this contract\\r\\n    */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n    * @notice Active brains of XVSVesting\\r\\n    */\\r\\n    address public implementation;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending brains of XVSVesting\\r\\n    */\\r\\n    address public pendingImplementation;\\r\\n}\\r\\n\\r\\ncontract XVSVestingStorage is XVSVestingAdminStorage {\\r\\n\\r\\n    struct VestingRecord {\\r\\n        address recipient;\\r\\n        uint256 startTime;\\r\\n        uint256 amount;\\r\\n        uint256 withdrawnAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice Guard variable for re-entrancy checks\\r\\n    bool public _notEntered;\\r\\n\\r\\n    /// @notice indicator to check if the contract is initialized\\r\\n    bool public initialized;\\r\\n\\r\\n    /// @notice The XVS TOKEN!\\r\\n    IBEP20 public xvs;\\r\\n\\r\\n    /// @notice VRTConversion Contract Address\\r\\n    address public vrtConversionAddress;\\r\\n\\r\\n    /// @notice mapping of VestingRecord(s) for user(s)\\r\\n    mapping(address => VestingRecord[]) public vestings;\\r\\n}\",\"keccak256\":\"0x08331e8b85aa11d44044f6ed65cf5b8731934f12949b9d3b9cf857c890952baf\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611489806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063bb443b6c116100a2578063d8438ae811610071578063d8438ae81461027b578063ec1afd7e14610283578063f67771751461028b578063f851a440146102cf578063f94af54e146102d757610116565b8063bb443b6c146101e9578063bcab369b146101f1578063bd84477d146101f9578063c4d66de81461025557610116565b8063396f7b23116100e9578063396f7b231461019d5780633ccfd60b146101a557806347e7ef24146101ad5780634e79ed3c146101d95780635c60da1b146101e157610116565b8063158ef93e1461011b5780631d504dc614610137578063267822471461015f57806329cb924d14610183575b600080fd5b6101236102fd565b604080519115158252519081900360200190f35b61015d6004803603602081101561014d57600080fd5b50356001600160a01b031661030d565b005b61016761040e565b604080516001600160a01b039092168252519081900360200190f35b61018b61041d565b60408051918252519081900360200190f35b610167610421565b61015d610430565b61015d600480360360408110156101c357600080fd5b506001600160a01b0381351690602001356106bc565b610167610904565b610167610913565b610167610922565b61018b610931565b6102256004803603604081101561020f57600080fd5b506001600160a01b03813516906020013561093d565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b61015d6004803603602081101561026b57600080fd5b50356001600160a01b031661098a565b610123610abc565b61018b610acc565b6102b1600480360360208110156102a157600080fd5b50356001600160a01b0316610ad4565b60408051938452602084019290925282820152519081900360600190f35b610167610ca6565b61015d600480360360208110156102ed57600080fd5b50356001600160a01b0316610cb5565b600354600160a81b900460ff1681565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d602081101561037057600080fd5b50516001600160a01b031633146103b85760405162461bcd60e51b81526004018080602001828103825260228152602001806114336022913960400191505060405180910390fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103f357600080fd5b505af1158015610407573d6000803e3d6000fd5b5050505050565b6001546001600160a01b031681565b4290565b6003546001600160a01b031681565b600354600160a81b900460ff161515600114610493576040805162461bcd60e51b815260206004820152601d60248201527f58565356657374696e67206973206e6f7420696e697469616c697a6564000000604482015290519081900360640190fd5b336000818152600660205260409020546104de5760405162461bcd60e51b815260040180806020018281038252602881526020018061139f6028913960400191505060405180910390fd5b33600081815260066020526040812080549091805b8281101561057a57600084828154811061050957fe5b90600052602060002090600402019050600080610533836002015484600101548560030154610d97565b9092509050801561056c5761054e858263ffffffff610dd016565b6003840154909550610566908263ffffffff610dd016565b60038401555b5050508060010190506104f3565b5080156104075760048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b1580156105d057600080fd5b505afa1580156105e4573d6000803e3d6000fd5b505050506040513d60208110156105fa57600080fd5b5051905081811015610653576040805162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742058565320666f72207769746864726177616c00604482015290519081900360640190fd5b604080516001600160a01b03871681526020810184905281517fdef17b8a4592960eb0350493e982c7c3f435664ec0281086b1709245d381eb47929181900390910190a16004546106b4906001600160a01b0316868463ffffffff610e3316565b505050505050565b600354600160a81b900460ff16151560011461071f576040805162461bcd60e51b815260206004820152601d60248201527f58565356657374696e67206973206e6f7420696e697469616c697a6564000000604482015290519081900360640190fd5b6005546001600160a01b031633146107685760405162461bcd60e51b815260040180806020018281038252603081526020018061136f6030913960400191505060405180910390fd5b816001600160a01b0381166107bd576040805162461bcd60e51b8152602060048201526016602482015275416464726573732063616e6e6f74206265205a65726f60501b604482015290519081900360640190fd5b60008211610812576040805162461bcd60e51b815260206004820152601f60248201527f4465706f73697420616d6f756e74206d757374206265206e6f6e2d7a65726f00604482015290519081900360640190fd5b6001600160a01b03831660009081526006602052604090206108326112cf565b6040518060800160405280866001600160a01b0316815260200161085461041d565b815260208082018790526000604092830181905285546001808201885587835291839020855160049092020180546001600160a01b0319166001600160a01b039283161781558584015192810183905585850151600282018190556060808801516003909301839055865194855294840152828501529251939450918816927fededaccb1e456886ec3aabebbb93d4c448a453a7e498a1e1802cc2cd48646eb29281900390910190a25050505050565b6004546001600160a01b031681565b6002546001600160a01b031681565b6005546001600160a01b031681565b670de0b6b3a764000081565b6006602052816000526040600020818154811061095657fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925084565b6000546001600160a01b031633146109d35760405162461bcd60e51b815260040180806020018281038252602881526020018061140b6028913960400191505060405180910390fd5b600354600160a81b900460ff1615610a1c5760405162461bcd60e51b81526004018080602001828103825260218152602001806113016021913960400191505060405180910390fd5b6001600160a01b038116610a77576040805162461bcd60e51b815260206004820152601a60248201527f5f787673416464726573732063616e6e6f74206265205a65726f000000000000604482015290519081900360640190fd5b600480546001600160a01b039092166001600160a01b03199092169190911790556003805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b179055565b600354600160a01b900460ff1681565b6301e1338081565b6000806000600360159054906101000a900460ff1615156001151514610b41576040805162461bcd60e51b815260206004820152601d60248201527f58565356657374696e67206973206e6f7420696e697469616c697a6564000000604482015290519081900360640190fd5b836001600160a01b038116610b96576040805162461bcd60e51b8152602060048201526016602482015275416464726573732063616e6e6f74206265205a65726f60501b604482015290519081900360640190fd5b6001600160a01b0385166000908152600660205260409020548590610bec5760405162461bcd60e51b815260040180806020018281038252602881526020018061139f6028913960400191505060405180910390fd5b6001600160a01b0386166000908152600660205260408120805490915b81811015610c9a576000838281548110610c1f57fe5b90600052602060002090600402019050600080610c49836002015484600101548560030154610d97565b9092509050610c5e8a8363ffffffff610dd016565b9950610c708b8263ffffffff610dd016565b9a50610c8983600301548a610dd090919063ffffffff16565b98505060019092019150610c099050565b50505050509193909250565b6000546001600160a01b031681565b6000546001600160a01b03163314610cfe5760405162461bcd60e51b81526004018080602001828103825260238152602001806113c76023913960400191505060405180910390fd5b6001600160a01b038116610d435760405162461bcd60e51b81526004018080602001828103825260238152602001806113226023913960400191505060405180910390fd5b600580546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f5673fdce1f5315db6943d18b4249ea0cfb54555a5703cbbcb02d8e3c25e90f369181900360200190a150565b6000806000610dae8686610da961041d565b610e8a565b90506000610dc2828663ffffffff610efc16565b919791965090945050505050565b600082820183811015610e2a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e85908490610f3e565b505050565b600082821015610e9c57506000610ef5565b610eb0836301e1338063ffffffff610dd016565b821115610ebe575082610ef5565b610ef26301e13380610ee6610ed9858763ffffffff610efc16565b879063ffffffff6110fc16565b9063ffffffff61115516565b90505b9392505050565b6000610e2a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611197565b610f50826001600160a01b031661122e565b610fa1576040805162461bcd60e51b815260206004820152601f60248201527f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310610fdf5780518252601f199092019160209182019101610fc0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611041576040519150601f19603f3d011682016040523d82523d6000602084013e611046565b606091505b50915091508161109d576040805162461bcd60e51b815260206004820181905260248201527f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156110f6578080602001905160208110156110b957600080fd5b50516110f65760405162461bcd60e51b815260040180806020018281038252602a815260200180611345602a913960400191505060405180910390fd5b50505050565b60008261110b57506000610e2d565b8282028284828161111857fe5b0414610e2a5760405162461bcd60e51b81526004018080602001828103825260218152602001806113ea6021913960400191505060405180910390fd5b6000610e2a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061126a565b600081848411156112265760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111eb5781810151838201526020016111d3565b50505050905090810190601f1680156112185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061126257508115155b949350505050565b600081836112b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156111eb5781810151838201526020016111d3565b5060008385816112c557fe5b0495945050505050565b604051806080016040528060006001600160a01b03168152602001600081526020016000815260200160008152509056fe58565356657374696e6720697320616c726561647920696e697469616c697a6564767274436f6e76657273696f6e416464726573732063616e6e6f74206265205a65726f5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565646f6e6c7920565254436f6e76657273696f6e20416464726573732063616e2063616c6c207468652066756e6374696f6e726563697069656e7420646f65736e6f74206861766520616e792076657374696e675265636f72646f6e6c792061646d696e206d617920696e697469616c697a6520746865205661756c74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c792061646d696e206d617920696e697469616c697a65207468652058565356657374696e676f6e6c792070726f78792061646d696e2063616e206368616e676520627261696e73a265627a7a723158200f3fd76a9b3c094cdd8417c967835599aed1dcda7a0e292ef954398bd7077fbf64736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063bb443b6c116100a2578063d8438ae811610071578063d8438ae81461027b578063ec1afd7e14610283578063f67771751461028b578063f851a440146102cf578063f94af54e146102d757610116565b8063bb443b6c146101e9578063bcab369b146101f1578063bd84477d146101f9578063c4d66de81461025557610116565b8063396f7b23116100e9578063396f7b231461019d5780633ccfd60b146101a557806347e7ef24146101ad5780634e79ed3c146101d95780635c60da1b146101e157610116565b8063158ef93e1461011b5780631d504dc614610137578063267822471461015f57806329cb924d14610183575b600080fd5b6101236102fd565b604080519115158252519081900360200190f35b61015d6004803603602081101561014d57600080fd5b50356001600160a01b031661030d565b005b61016761040e565b604080516001600160a01b039092168252519081900360200190f35b61018b61041d565b60408051918252519081900360200190f35b610167610421565b61015d610430565b61015d600480360360408110156101c357600080fd5b506001600160a01b0381351690602001356106bc565b610167610904565b610167610913565b610167610922565b61018b610931565b6102256004803603604081101561020f57600080fd5b506001600160a01b03813516906020013561093d565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b61015d6004803603602081101561026b57600080fd5b50356001600160a01b031661098a565b610123610abc565b61018b610acc565b6102b1600480360360208110156102a157600080fd5b50356001600160a01b0316610ad4565b60408051938452602084019290925282820152519081900360600190f35b610167610ca6565b61015d600480360360208110156102ed57600080fd5b50356001600160a01b0316610cb5565b600354600160a81b900460ff1681565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d602081101561037057600080fd5b50516001600160a01b031633146103b85760405162461bcd60e51b81526004018080602001828103825260228152602001806114336022913960400191505060405180910390fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103f357600080fd5b505af1158015610407573d6000803e3d6000fd5b5050505050565b6001546001600160a01b031681565b4290565b6003546001600160a01b031681565b600354600160a81b900460ff161515600114610493576040805162461bcd60e51b815260206004820152601d60248201527f58565356657374696e67206973206e6f7420696e697469616c697a6564000000604482015290519081900360640190fd5b336000818152600660205260409020546104de5760405162461bcd60e51b815260040180806020018281038252602881526020018061139f6028913960400191505060405180910390fd5b33600081815260066020526040812080549091805b8281101561057a57600084828154811061050957fe5b90600052602060002090600402019050600080610533836002015484600101548560030154610d97565b9092509050801561056c5761054e858263ffffffff610dd016565b6003840154909550610566908263ffffffff610dd016565b60038401555b5050508060010190506104f3565b5080156104075760048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b1580156105d057600080fd5b505afa1580156105e4573d6000803e3d6000fd5b505050506040513d60208110156105fa57600080fd5b5051905081811015610653576040805162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e742058565320666f72207769746864726177616c00604482015290519081900360640190fd5b604080516001600160a01b03871681526020810184905281517fdef17b8a4592960eb0350493e982c7c3f435664ec0281086b1709245d381eb47929181900390910190a16004546106b4906001600160a01b0316868463ffffffff610e3316565b505050505050565b600354600160a81b900460ff16151560011461071f576040805162461bcd60e51b815260206004820152601d60248201527f58565356657374696e67206973206e6f7420696e697469616c697a6564000000604482015290519081900360640190fd5b6005546001600160a01b031633146107685760405162461bcd60e51b815260040180806020018281038252603081526020018061136f6030913960400191505060405180910390fd5b816001600160a01b0381166107bd576040805162461bcd60e51b8152602060048201526016602482015275416464726573732063616e6e6f74206265205a65726f60501b604482015290519081900360640190fd5b60008211610812576040805162461bcd60e51b815260206004820152601f60248201527f4465706f73697420616d6f756e74206d757374206265206e6f6e2d7a65726f00604482015290519081900360640190fd5b6001600160a01b03831660009081526006602052604090206108326112cf565b6040518060800160405280866001600160a01b0316815260200161085461041d565b815260208082018790526000604092830181905285546001808201885587835291839020855160049092020180546001600160a01b0319166001600160a01b039283161781558584015192810183905585850151600282018190556060808801516003909301839055865194855294840152828501529251939450918816927fededaccb1e456886ec3aabebbb93d4c448a453a7e498a1e1802cc2cd48646eb29281900390910190a25050505050565b6004546001600160a01b031681565b6002546001600160a01b031681565b6005546001600160a01b031681565b670de0b6b3a764000081565b6006602052816000526040600020818154811061095657fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925084565b6000546001600160a01b031633146109d35760405162461bcd60e51b815260040180806020018281038252602881526020018061140b6028913960400191505060405180910390fd5b600354600160a81b900460ff1615610a1c5760405162461bcd60e51b81526004018080602001828103825260218152602001806113016021913960400191505060405180910390fd5b6001600160a01b038116610a77576040805162461bcd60e51b815260206004820152601a60248201527f5f787673416464726573732063616e6e6f74206265205a65726f000000000000604482015290519081900360640190fd5b600480546001600160a01b039092166001600160a01b03199092169190911790556003805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b179055565b600354600160a01b900460ff1681565b6301e1338081565b6000806000600360159054906101000a900460ff1615156001151514610b41576040805162461bcd60e51b815260206004820152601d60248201527f58565356657374696e67206973206e6f7420696e697469616c697a6564000000604482015290519081900360640190fd5b836001600160a01b038116610b96576040805162461bcd60e51b8152602060048201526016602482015275416464726573732063616e6e6f74206265205a65726f60501b604482015290519081900360640190fd5b6001600160a01b0385166000908152600660205260409020548590610bec5760405162461bcd60e51b815260040180806020018281038252602881526020018061139f6028913960400191505060405180910390fd5b6001600160a01b0386166000908152600660205260408120805490915b81811015610c9a576000838281548110610c1f57fe5b90600052602060002090600402019050600080610c49836002015484600101548560030154610d97565b9092509050610c5e8a8363ffffffff610dd016565b9950610c708b8263ffffffff610dd016565b9a50610c8983600301548a610dd090919063ffffffff16565b98505060019092019150610c099050565b50505050509193909250565b6000546001600160a01b031681565b6000546001600160a01b03163314610cfe5760405162461bcd60e51b81526004018080602001828103825260238152602001806113c76023913960400191505060405180910390fd5b6001600160a01b038116610d435760405162461bcd60e51b81526004018080602001828103825260238152602001806113226023913960400191505060405180910390fd5b600580546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f5673fdce1f5315db6943d18b4249ea0cfb54555a5703cbbcb02d8e3c25e90f369181900360200190a150565b6000806000610dae8686610da961041d565b610e8a565b90506000610dc2828663ffffffff610efc16565b919791965090945050505050565b600082820183811015610e2a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e85908490610f3e565b505050565b600082821015610e9c57506000610ef5565b610eb0836301e1338063ffffffff610dd016565b821115610ebe575082610ef5565b610ef26301e13380610ee6610ed9858763ffffffff610efc16565b879063ffffffff6110fc16565b9063ffffffff61115516565b90505b9392505050565b6000610e2a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611197565b610f50826001600160a01b031661122e565b610fa1576040805162461bcd60e51b815260206004820152601f60248201527f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310610fdf5780518252601f199092019160209182019101610fc0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611041576040519150601f19603f3d011682016040523d82523d6000602084013e611046565b606091505b50915091508161109d576040805162461bcd60e51b815260206004820181905260248201527f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156110f6578080602001905160208110156110b957600080fd5b50516110f65760405162461bcd60e51b815260040180806020018281038252602a815260200180611345602a913960400191505060405180910390fd5b50505050565b60008261110b57506000610e2d565b8282028284828161111857fe5b0414610e2a5760405162461bcd60e51b81526004018080602001828103825260218152602001806113ea6021913960400191505060405180910390fd5b6000610e2a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061126a565b600081848411156112265760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111eb5781810151838201526020016111d3565b50505050905090810190601f1680156112185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061126257508115155b949350505050565b600081836112b95760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156111eb5781810151838201526020016111d3565b5060008385816112c557fe5b0495945050505050565b604051806080016040528060006001600160a01b03168152602001600081526020016000815260200160008152509056fe58565356657374696e6720697320616c726561647920696e697469616c697a6564767274436f6e76657273696f6e416464726573732063616e6e6f74206265205a65726f5361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565646f6e6c7920565254436f6e76657273696f6e20416464726573732063616e2063616c6c207468652066756e6374696f6e726563697069656e7420646f65736e6f74206861766520616e792076657374696e675265636f72646f6e6c792061646d696e206d617920696e697469616c697a6520746865205661756c74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c792061646d696e206d617920696e697469616c697a65207468652058565356657374696e676f6e6c792070726f78792061646d696e2063616e206368616e676520627261696e73a265627a7a723158200f3fd76a9b3c094cdd8417c967835599aed1dcda7a0e292ef954398bd7077fbf64736f6c63430005100032",
  "devdoc": {
    "author": "Venus",
    "methods": {
      "deposit(address,uint256)": {
        "params": {
          "depositAmount": "XVS amount for deposit",
          "recipient": "The vesting recipient"
        }
      },
      "getCurrentTime()": {
        "return": "blocktimestamp"
      },
      "getWithdrawableAmount(address)": {
        "params": {
          "recipient": "The vesting recipient"
        },
        "return": "A tuple with totalWithdrawableAmount , totalVestedAmount and totalWithdrawnAmount"
      },
      "initialize(address)": {
        "params": {
          "_xvsAddress": "The XVSToken address"
        }
      },
      "setVRTConverter(address)": {
        "details": "Note: If VRTConverter is not set, then Vesting is not allowed",
        "params": {
          "_vrtConversionAddress": "The VRTConverterProxy Address"
        }
      }
    },
    "title": "Venus's XVSVesting Contract"
  },
  "userdoc": {
    "methods": {
      "_become(address)": {
        "notice": "* Admin Functions **"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit XVS for Vesting"
      },
      "getCurrentTime()": {
        "notice": "current block timestamp"
      },
      "getWithdrawableAmount(address)": {
        "notice": "get Withdrawable XVS Amount"
      },
      "initialize(address)": {
        "notice": "initialize XVSVestingStorage"
      },
      "setVRTConverter(address)": {
        "notice": "sets VRTConverter Address"
      },
      "withdraw()": {
        "notice": "Withdraw Vested XVS of recipient"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41204,
        "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 41206,
        "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 41208,
        "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 41210,
        "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
        "label": "pendingImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 41224,
        "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
        "label": "_notEntered",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 41226,
        "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
        "label": "initialized",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 41228,
        "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
        "label": "xvs",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBEP20)34287"
      },
      {
        "astId": 41230,
        "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
        "label": "vrtConversionAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 41235,
        "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
        "label": "vestings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(VestingRecord)41222_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(VestingRecord)41222_storage)dyn_storage": {
        "base": "t_struct(VestingRecord)41222_storage",
        "encoding": "dynamic_array",
        "label": "struct XVSVestingStorage.VestingRecord[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBEP20)34287": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(VestingRecord)41222_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct XVSVestingStorage.VestingRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(VestingRecord)41222_storage)dyn_storage"
      },
      "t_struct(VestingRecord)41222_storage": {
        "encoding": "inplace",
        "label": "struct XVSVestingStorage.VestingRecord",
        "members": [
          {
            "astId": 41215,
            "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 41217,
            "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 41219,
            "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 41221,
            "contract": "contracts/VRT/XVSVesting.sol:XVSVesting",
            "label": "withdrawnAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}