{
  "address": "0xa9FB656a6A9868c49a41234913c98B6c0581f080",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransfered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VAIVaultProxy",
          "name": "vaiVaultProxy",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "accXVSPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "burnAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingVAIVaultImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingXVS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setNewAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_xvs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vai",
          "type": "address"
        }
      ],
      "name": "setVenusInfo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "updatePendingRewards",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vai",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaiVaultImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvs",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0dbe3527b67b898849c557e83e669bbfc78d701a3ec2512b0ed4af43334a9d8b",
  "receipt": {
    "to": null,
    "from": "0x9E109d68A7e245d5a1D2e2E8e6BD4230A777a70B",
    "contractAddress": "0xa9FB656a6A9868c49a41234913c98B6c0581f080",
    "transactionIndex": 5,
    "gasUsed": "1220487",
    "logsBloom": "0x
    "blockHash": "0x3376bd94ba3130abd24aea27c250b1455b2db8daa434480dfab19f8e17e2dd93",
    "transactionHash": "0x0dbe3527b67b898849c557e83e669bbfc78d701a3ec2512b0ed4af43334a9d8b",
    "logs": [],
    "blockNumber": 19216337,
    "cumulativeGasUsed": "1676394",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b37497c5b1f763df37ae9c22af67abad",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VAIVaultProxy\",\"name\":\"vaiVaultProxy\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accXVSPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingVAIVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingXVS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setNewAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xvs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vai\",\"type\":\"address\"}],\"name\":\"setVenusInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePendingRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vai\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaiVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvs\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"burnAdmin()\":{\"details\":\"Burn the current admin\"},\"deposit(uint256)\":{\"params\":{\"_amount\":\"The amount to deposit to vault\"}},\"getAdmin()\":{\"details\":\"Returns the address of the current admin\"},\"pendingXVS(address)\":{\"params\":{\"_user\":\"The user to see pending XVS\"}},\"setNewAdmin(address)\":{\"details\":\"Set the current admin to new address\"},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount to withdraw from vault\"}}}},\"userdoc\":{\"methods\":{\"_become(address)\":{\"notice\":\"* Admin Functions **\"},\"claim()\":{\"notice\":\"Claim XVS from VAIVault\"},\"deposit(uint256)\":{\"notice\":\"Deposit VAI to VAIVault for XVS allocation\"},\"pendingXVS(address)\":{\"notice\":\"View function to see pending XVS on frontend\"},\"updatePendingRewards()\":{\"notice\":\"Function that updates pending rewards\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw VAI from VAIVault\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Vault/VAIVault.sol\":\"VAIVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-call-value\\r\\n        // solium-disable-next-line security/no-call-value\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9d1fa802b90f8ac9339ec8e17d54793c42b6f6b5111832143cdf79762f577ec8\"},\"contracts/Utils/IBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {BEP20Detailed}.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3a8f9954c8785aace7fde96102415fa4de1970920315652e3496b1c2b8dd965\"},\"contracts/Utils/SafeBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for BEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeBEP20: decreased allowance below zero\\\");\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeBEP20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeBEP20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x80a537e0bfa50067c3ef015f49aceb4e4ce30ae3069d40977aaa95911916224d\"},\"contracts/Utils/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb295b448107f6adee6c0861eba7cd58983eeb1a2bf9cd24b3df9c75fe17db75\"},\"contracts/Vault/VAIVault.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\nimport \\\"../Utils/SafeBEP20.sol\\\";\\r\\nimport \\\"../Utils/IBEP20.sol\\\";\\r\\nimport \\\"./VAIVaultProxy.sol\\\";\\r\\nimport \\\"./VAIVaultStorage.sol\\\";\\r\\nimport \\\"./VAIVaultErrorReporter.sol\\\";\\r\\n\\r\\ncontract VAIVault is VAIVaultStorage {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    /// @notice Event emitted when VAI deposit\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted when VAI withrawal\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted when admin changed\\r\\n    event AdminTransfered(address indexed oldAdmin, address indexed newAdmin);\\r\\n\\r\\n    constructor() public {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"only admin can\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*** Reentrancy Guard ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit VAI to VAIVault for XVS allocation\\r\\n     * @param _amount The amount to deposit to vault\\r\\n     */\\r\\n    function deposit(uint256 _amount) public nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        updateVault();\\r\\n\\r\\n        // Transfer pending tokens to user\\r\\n        updateAndPayOutPending(msg.sender);\\r\\n\\r\\n        // Transfer in the amounts from user\\r\\n        if(_amount > 0) {\\r\\n            vai.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n            user.amount = user.amount.add(_amount);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(accXVSPerShare).div(1e18);\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw VAI from VAIVault\\r\\n     * @param _amount The amount to withdraw from vault\\r\\n     */\\r\\n    function withdraw(uint256 _amount) public nonReentrant {\\r\\n        _withdraw(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim XVS from VAIVault\\r\\n     */\\r\\n    function claim() public nonReentrant {\\r\\n        _withdraw(msg.sender, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Low level withdraw function\\r\\n     * @param account The account to withdraw from vault\\r\\n     * @param _amount The amount to withdraw from vault\\r\\n     */\\r\\n    function _withdraw(address account, uint256 _amount) internal {\\r\\n        UserInfo storage user = userInfo[account];\\r\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n\\r\\n        updateVault();\\r\\n        updateAndPayOutPending(account); // Update balances of account this is not withdrawal but claiming XVS farmed\\r\\n\\r\\n        if(_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            vai.safeTransfer(address(account), _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(accXVSPerShare).div(1e18);\\r\\n\\r\\n        emit Withdraw(account, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View function to see pending XVS on frontend\\r\\n     * @param _user The user to see pending XVS\\r\\n     */\\r\\n    function pendingXVS(address _user) public view returns (uint256)\\r\\n    {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n\\r\\n        return user.amount.mul(accXVSPerShare).div(1e18).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update and pay out pending XVS to user\\r\\n     * @param account The user to pay out\\r\\n     */\\r\\n    function updateAndPayOutPending(address account) internal {\\r\\n        uint256 pending = pendingXVS(account);\\r\\n\\r\\n        if(pending > 0) {\\r\\n            safeXVSTransfer(account, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Safe XVS transfer function, just in case if rounding error causes pool to not have enough XVS\\r\\n     * @param _to The address that XVS to be transfered\\r\\n     * @param _amount The amount that XVS to be transfered\\r\\n     */\\r\\n    function safeXVSTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 xvsBal = xvs.balanceOf(address(this));\\r\\n\\r\\n        if (_amount > xvsBal) {\\r\\n            xvs.transfer(_to, xvsBal);\\r\\n            xvsBalance = xvs.balanceOf(address(this));\\r\\n        } else {\\r\\n            xvs.transfer(_to, _amount);\\r\\n            xvsBalance = xvs.balanceOf(address(this));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function that updates pending rewards\\r\\n     */\\r\\n    function updatePendingRewards() public {\\r\\n        uint256 newRewards = xvs.balanceOf(address(this)).sub(xvsBalance);\\r\\n\\r\\n        if(newRewards > 0) {\\r\\n            xvsBalance = xvs.balanceOf(address(this)); // If there is no change the balance didn't change\\r\\n            pendingRewards = pendingRewards.add(newRewards);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables to be up-to-date\\r\\n     */\\r\\n    function updateVault() internal {\\r\\n        uint256 vaiBalance = vai.balanceOf(address(this));\\r\\n        if (vaiBalance == 0) { // avoids division by 0 errors\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        accXVSPerShare = accXVSPerShare.add(pendingRewards.mul(1e18).div(vaiBalance));\\r\\n        pendingRewards = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current admin\\r\\n     */\\r\\n    function getAdmin() public view returns (address) {\\r\\n        return admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn the current admin\\r\\n     */\\r\\n    function burnAdmin() public onlyAdmin {\\r\\n        emit AdminTransfered(admin, address(0));\\r\\n        admin = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the current admin to new address\\r\\n     */\\r\\n    function setNewAdmin(address newAdmin) public onlyAdmin {\\r\\n        require(newAdmin != address(0), \\\"new owner is the zero address\\\");\\r\\n        emit AdminTransfered(admin, newAdmin);\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _become(VAIVaultProxy vaiVaultProxy) public {\\r\\n        require(msg.sender == vaiVaultProxy.admin(), \\\"only proxy admin can change brains\\\");\\r\\n        require(vaiVaultProxy._acceptImplementation() == 0, \\\"change not authorized\\\");\\r\\n    }\\r\\n\\r\\n    function setVenusInfo(address _xvs, address _vai) public onlyAdmin {\\r\\n        xvs = IBEP20(_xvs);\\r\\n        vai = IBEP20(_vai);\\r\\n\\r\\n        _notEntered = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fc176821cc0d8b8f945b15697a4e9f445a9388cd4ed15d5db6b8be441cab1de\"},\"contracts/Vault/VAIVaultErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ncontract VAIVaultErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c0740cbb10c99f76a9a92054ffe1ee64fd359b0451dea2194000a904838dec7\"},\"contracts/Vault/VAIVaultProxy.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VAIVaultStorage.sol\\\";\\r\\nimport \\\"./VAIVaultErrorReporter.sol\\\";\\r\\n\\r\\ncontract VAIVaultProxy is VAIVaultAdminStorage, VAIVaultErrorReporter {\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingVAIVaultImplementation is changed\\r\\n      */\\r\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingVAIVaultImplementation is accepted, which means VAI Vault implementation is updated\\r\\n      */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is changed\\r\\n      */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n      */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    constructor() public {\\r\\n        // Set admin to caller\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\r\\n\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        address oldPendingImplementation = pendingVAIVaultImplementation;\\r\\n\\r\\n        pendingVAIVaultImplementation = newPendingImplementation;\\r\\n\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingVAIVaultImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Accepts new implementation of VAI Vault. msg.sender must be pendingImplementation\\r\\n    * @dev Admin function for new implementation to accept it's role as implementation\\r\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n    */\\r\\n    function _acceptImplementation() public returns (uint) {\\r\\n        // Check caller is pendingImplementation\\r\\n        if (msg.sender != pendingVAIVaultImplementation) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = vaiVaultImplementation;\\r\\n        address oldPendingImplementation = pendingVAIVaultImplementation;\\r\\n\\r\\n        vaiVaultImplementation = pendingVAIVaultImplementation;\\r\\n\\r\\n        pendingVAIVaultImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, vaiVaultImplementation);\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingVAIVaultImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() public returns (uint) {\\r\\n        // Check caller is pendingAdmin\\r\\n        if (msg.sender != pendingAdmin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    function () external payable {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = vaiVaultImplementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n              let free_mem_ptr := mload(0x40)\\r\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\r\\n\\r\\n              switch success\\r\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\r\\n              default { return(free_mem_ptr, returndatasize) }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xabc147424d246023c4f22204d4dc9d027369df19560ca2d75853c83367f90d86\"},\"contracts/Vault/VAIVaultStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\nimport \\\"../Utils/SafeMath.sol\\\";\\r\\nimport \\\"../Utils/IBEP20.sol\\\";\\r\\n\\r\\ncontract VAIVaultAdminStorage {\\r\\n    /**\\r\\n    * @notice Administrator for this contract\\r\\n    */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending administrator for this contract\\r\\n    */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n    * @notice Active brains of VAI Vault\\r\\n    */\\r\\n    address public vaiVaultImplementation;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending brains of VAI Vault\\r\\n    */\\r\\n    address public pendingVAIVaultImplementation;\\r\\n}\\r\\n\\r\\ncontract VAIVaultStorage is VAIVaultAdminStorage {\\r\\n    /// @notice The XVS TOKEN!\\r\\n    IBEP20 public xvs;\\r\\n\\r\\n    /// @notice The VAI TOKEN!\\r\\n    IBEP20 public vai;\\r\\n\\r\\n    /// @notice Guard variable for re-entrancy checks\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /// @notice XVS balance of vault\\r\\n    uint256 public xvsBalance;\\r\\n\\r\\n    /// @notice Accumulated XVS per share\\r\\n    uint256 public accXVSPerShare;\\r\\n\\r\\n    //// pending rewards awaiting anyone to update\\r\\n    uint256 public pendingRewards;\\r\\n\\r\\n    /// @notice Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    // Info of each user that stakes tokens.\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n}\\r\\n\",\"keccak256\":\"0x513a23e362b5a1f99e5d9c9b048b2c616d09a471a77b411740978dffd8a67e9c\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556114bb806100326000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806379c3b944116100ad578063b6b55f2511610071578063b6b55f25146102a5578063eded3fda146102c2578063f661bb86146102ca578063f851a440146102d2578063faa1809e146102da5761012c565b806379c3b9441461024157806381bdf98c146102675780638eec99c81461026f57806391cc3da114610295578063b62e4c921461029d5761012c565b806344c0e8ee116100f457806344c0e8ee146101e15780634e71d92d1461020f5780634e79ed3c146102175780636e9960c31461021f578063761692ba146102275761012c565b80631959a002146101315780631d504dc614610170578063211de6b61461019857806326782247146101bc5780632e1a7d4d146101c4575b600080fd5b6101576004803603602081101561014757600080fd5b50356001600160a01b03166102e2565b6040805192835260208301919091528051918290030190f35b6101966004803603602081101561018657600080fd5b50356001600160a01b03166102fb565b005b6101a061045a565b604080516001600160a01b039092168252519081900360200190f35b6101a0610469565b610196600480360360208110156101da57600080fd5b5035610478565b610196600480360360408110156101f757600080fd5b506001600160a01b03813581169160200135166104f0565b61019661057e565b6101a06105f6565b6101a0610605565b61022f610614565b60408051918252519081900360200190f35b61022f6004803603602081101561025757600080fd5b50356001600160a01b031661061a565b61019661067e565b6101966004803603602081101561028557600080fd5b50356001600160a01b0316610718565b61022f61081e565b6101a0610824565b610196600480360360208110156102bb57600080fd5b5035610833565b61022f610958565b6101a061095e565b6101a061096d565b61019661097c565b6009602052600090815260409020805460019091015482565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561033457600080fd5b505afa158015610348573d6000803e3d6000fd5b505050506040513d602081101561035e57600080fd5b50516001600160a01b031633146103a65760405162461bcd60e51b81526004018080602001828103825260228152602001806114656022913960400191505060405180910390fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b505050506040513d602081101561040b57600080fd5b505115610457576040805162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b604482015290519081900360640190fd5b50565b6003546001600160a01b031681565b6001546001600160a01b031681565b600554600160a01b900460ff166104c3576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6005805460ff60a01b191690556104da3382610aa7565b506005805460ff60a01b1916600160a01b179055565b6000546001600160a01b03163314610540576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b600480546001600160a01b03199081166001600160a01b039485161790915560058054600160a01b9216929093169190911760ff60a01b1916179055565b600554600160a01b900460ff166105c9576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6005805460ff60a01b191690556105e1336000610aa7565b6005805460ff60a01b1916600160a01b179055565b6004546001600160a01b031681565b6000546001600160a01b031690565b60065481565b6001600160a01b038116600090815260096020526040812060018101546007548254610677929161066b91670de0b6b3a76400009161065f919063ffffffff610bbd16565b9063ffffffff610c1f16565b9063ffffffff610c6116565b9392505050565b6000546001600160a01b031633146106ce576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f173de3514d8508f36ce8c81d509adcd8c8c76098400f685d3042b36f9a4160c3908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610768576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b6001600160a01b0381166107c3576040805162461bcd60e51b815260206004820152601d60248201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f173de3514d8508f36ce8c81d509adcd8c8c76098400f685d3042b36f9a4160c391a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60075481565b6005546001600160a01b031681565b600554600160a01b900460ff1661087e576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6005805460ff60a01b191690553360009081526009602052604090206108a2610ca3565b6108ab33610d66565b81156108e4576005546108cf906001600160a01b031633308563ffffffff610d8716565b80546108e1908363ffffffff610de716565b81555b600754815461090691670de0b6b3a76400009161065f9163ffffffff610bbd16565b600182015560408051838152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a250506005805460ff60a01b1916600160a01b179055565b60085481565b6002546001600160a01b031681565b6000546001600160a01b031681565b60065460048054604080516370a0823160e01b8152309381019390935251600093610a0b9390926001600160a01b0316916370a0823191602480820192602092909190829003018186803b1580156109d357600080fd5b505afa1580156109e7573d6000803e3d6000fd5b505050506040513d60208110156109fd57600080fd5b50519063ffffffff610c6116565b905080156104575760048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610a5f57600080fd5b505afa158015610a73573d6000803e3d6000fd5b505050506040513d6020811015610a8957600080fd5b5051600655600854610aa1908263ffffffff610de716565b60085550565b6001600160a01b03821660009081526009602052604090208054821115610b0a576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610b12610ca3565b610b1b83610d66565b8115610b52578054610b33908363ffffffff610c6116565b8155600554610b52906001600160a01b0316848463ffffffff610e4116565b6007548154610b7491670de0b6b3a76400009161065f9163ffffffff610bbd16565b60018201556040805183815290516001600160a01b038516917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2505050565b600082610bcc57506000610c19565b82820282848281610bd957fe5b0414610c165760405162461bcd60e51b81526004018080602001828103825260218152602001806114446021913960400191505060405180910390fd5b90505b92915050565b6000610c1683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610e98565b6000610c1683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f3a565b600554604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610cee57600080fd5b505afa158015610d02573d6000803e3d6000fd5b505050506040513d6020811015610d1857600080fd5b5051905080610d275750610d64565b610d5a610d4b8261065f670de0b6b3a7640000600854610bbd90919063ffffffff16565b6007549063ffffffff610de716565b6007555060006008555b565b6000610d718261061a565b90508015610d8357610d838282610f94565b5050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610de1908590611225565b50505050565b600082820183811015610c16576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e93908490611225565b505050565b60008183610f245760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ee9578181015183820152602001610ed1565b50505050905090810190601f168015610f165780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610f3057fe5b0495945050505050565b60008184841115610f8c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610ee9578181015183820152602001610ed1565b505050900390565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610fe357600080fd5b505afa158015610ff7573d6000803e3d6000fd5b505050506040513d602081101561100d57600080fd5b505190508082111561111f57600480546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018590529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561107357600080fd5b505af1158015611087573d6000803e3d6000fd5b505050506040513d602081101561109d57600080fd5b505060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156110eb57600080fd5b505afa1580156110ff573d6000803e3d6000fd5b505050506040513d602081101561111557600080fd5b5051600655610e93565b600480546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561117957600080fd5b505af115801561118d573d6000803e3d6000fd5b505050506040513d60208110156111a357600080fd5b505060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156111f157600080fd5b505afa158015611205573d6000803e3d6000fd5b505050506040513d602081101561121b57600080fd5b5051600655505050565b611237826001600160a01b03166113dd565b611288576040805162461bcd60e51b815260206004820152601f60248201527f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106112c65780518252601f1990920191602091820191016112a7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611328576040519150601f19603f3d011682016040523d82523d6000602084013e61132d565b606091505b509150915081611384576040805162461bcd60e51b815260206004820181905260248201527f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610de1578080602001905160208110156113a057600080fd5b5051610de15760405162461bcd60e51b815260040180806020018281038252602a81526020018061141a602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061141157508115155b94935050505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f742073756363656564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c792070726f78792061646d696e2063616e206368616e676520627261696e73a265627a7a72315820eefe753da8803543a0dddc7699559a941ce894ba215355c50f05f122abef57fd64736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806379c3b944116100ad578063b6b55f2511610071578063b6b55f25146102a5578063eded3fda146102c2578063f661bb86146102ca578063f851a440146102d2578063faa1809e146102da5761012c565b806379c3b9441461024157806381bdf98c146102675780638eec99c81461026f57806391cc3da114610295578063b62e4c921461029d5761012c565b806344c0e8ee116100f457806344c0e8ee146101e15780634e71d92d1461020f5780634e79ed3c146102175780636e9960c31461021f578063761692ba146102275761012c565b80631959a002146101315780631d504dc614610170578063211de6b61461019857806326782247146101bc5780632e1a7d4d146101c4575b600080fd5b6101576004803603602081101561014757600080fd5b50356001600160a01b03166102e2565b6040805192835260208301919091528051918290030190f35b6101966004803603602081101561018657600080fd5b50356001600160a01b03166102fb565b005b6101a061045a565b604080516001600160a01b039092168252519081900360200190f35b6101a0610469565b610196600480360360208110156101da57600080fd5b5035610478565b610196600480360360408110156101f757600080fd5b506001600160a01b03813581169160200135166104f0565b61019661057e565b6101a06105f6565b6101a0610605565b61022f610614565b60408051918252519081900360200190f35b61022f6004803603602081101561025757600080fd5b50356001600160a01b031661061a565b61019661067e565b6101966004803603602081101561028557600080fd5b50356001600160a01b0316610718565b61022f61081e565b6101a0610824565b610196600480360360208110156102bb57600080fd5b5035610833565b61022f610958565b6101a061095e565b6101a061096d565b61019661097c565b6009602052600090815260409020805460019091015482565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561033457600080fd5b505afa158015610348573d6000803e3d6000fd5b505050506040513d602081101561035e57600080fd5b50516001600160a01b031633146103a65760405162461bcd60e51b81526004018080602001828103825260228152602001806114656022913960400191505060405180910390fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b505050506040513d602081101561040b57600080fd5b505115610457576040805162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b604482015290519081900360640190fd5b50565b6003546001600160a01b031681565b6001546001600160a01b031681565b600554600160a01b900460ff166104c3576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6005805460ff60a01b191690556104da3382610aa7565b506005805460ff60a01b1916600160a01b179055565b6000546001600160a01b03163314610540576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b600480546001600160a01b03199081166001600160a01b039485161790915560058054600160a01b9216929093169190911760ff60a01b1916179055565b600554600160a01b900460ff166105c9576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6005805460ff60a01b191690556105e1336000610aa7565b6005805460ff60a01b1916600160a01b179055565b6004546001600160a01b031681565b6000546001600160a01b031690565b60065481565b6001600160a01b038116600090815260096020526040812060018101546007548254610677929161066b91670de0b6b3a76400009161065f919063ffffffff610bbd16565b9063ffffffff610c1f16565b9063ffffffff610c6116565b9392505050565b6000546001600160a01b031633146106ce576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f173de3514d8508f36ce8c81d509adcd8c8c76098400f685d3042b36f9a4160c3908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610768576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b6001600160a01b0381166107c3576040805162461bcd60e51b815260206004820152601d60248201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f173de3514d8508f36ce8c81d509adcd8c8c76098400f685d3042b36f9a4160c391a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60075481565b6005546001600160a01b031681565b600554600160a01b900460ff1661087e576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6005805460ff60a01b191690553360009081526009602052604090206108a2610ca3565b6108ab33610d66565b81156108e4576005546108cf906001600160a01b031633308563ffffffff610d8716565b80546108e1908363ffffffff610de716565b81555b600754815461090691670de0b6b3a76400009161065f9163ffffffff610bbd16565b600182015560408051838152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a250506005805460ff60a01b1916600160a01b179055565b60085481565b6002546001600160a01b031681565b6000546001600160a01b031681565b60065460048054604080516370a0823160e01b8152309381019390935251600093610a0b9390926001600160a01b0316916370a0823191602480820192602092909190829003018186803b1580156109d357600080fd5b505afa1580156109e7573d6000803e3d6000fd5b505050506040513d60208110156109fd57600080fd5b50519063ffffffff610c6116565b905080156104575760048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610a5f57600080fd5b505afa158015610a73573d6000803e3d6000fd5b505050506040513d6020811015610a8957600080fd5b5051600655600854610aa1908263ffffffff610de716565b60085550565b6001600160a01b03821660009081526009602052604090208054821115610b0a576040805162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015290519081900360640190fd5b610b12610ca3565b610b1b83610d66565b8115610b52578054610b33908363ffffffff610c6116565b8155600554610b52906001600160a01b0316848463ffffffff610e4116565b6007548154610b7491670de0b6b3a76400009161065f9163ffffffff610bbd16565b60018201556040805183815290516001600160a01b038516917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2505050565b600082610bcc57506000610c19565b82820282848281610bd957fe5b0414610c165760405162461bcd60e51b81526004018080602001828103825260218152602001806114446021913960400191505060405180910390fd5b90505b92915050565b6000610c1683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610e98565b6000610c1683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610f3a565b600554604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610cee57600080fd5b505afa158015610d02573d6000803e3d6000fd5b505050506040513d6020811015610d1857600080fd5b5051905080610d275750610d64565b610d5a610d4b8261065f670de0b6b3a7640000600854610bbd90919063ffffffff16565b6007549063ffffffff610de716565b6007555060006008555b565b6000610d718261061a565b90508015610d8357610d838282610f94565b5050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610de1908590611225565b50505050565b600082820183811015610c16576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e93908490611225565b505050565b60008183610f245760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ee9578181015183820152602001610ed1565b50505050905090810190601f168015610f165780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610f3057fe5b0495945050505050565b60008184841115610f8c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610ee9578181015183820152602001610ed1565b505050900390565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610fe357600080fd5b505afa158015610ff7573d6000803e3d6000fd5b505050506040513d602081101561100d57600080fd5b505190508082111561111f57600480546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018590529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561107357600080fd5b505af1158015611087573d6000803e3d6000fd5b505050506040513d602081101561109d57600080fd5b505060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156110eb57600080fd5b505afa1580156110ff573d6000803e3d6000fd5b505050506040513d602081101561111557600080fd5b5051600655610e93565b600480546040805163a9059cbb60e01b81526001600160a01b0387811694820194909452602481018690529051929091169163a9059cbb916044808201926020929091908290030181600087803b15801561117957600080fd5b505af115801561118d573d6000803e3d6000fd5b505050506040513d60208110156111a357600080fd5b505060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156111f157600080fd5b505afa158015611205573d6000803e3d6000fd5b505050506040513d602081101561121b57600080fd5b5051600655505050565b611237826001600160a01b03166113dd565b611288576040805162461bcd60e51b815260206004820152601f60248201527f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106112c65780518252601f1990920191602091820191016112a7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611328576040519150601f19603f3d011682016040523d82523d6000602084013e61132d565b606091505b509150915081611384576040805162461bcd60e51b815260206004820181905260248201527f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610de1578080602001905160208110156113a057600080fd5b5051610de15760405162461bcd60e51b815260040180806020018281038252602a81526020018061141a602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061141157508115155b94935050505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f742073756363656564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c792070726f78792061646d696e2063616e206368616e676520627261696e73a265627a7a72315820eefe753da8803543a0dddc7699559a941ce894ba215355c50f05f122abef57fd64736f6c63430005100032",
  "devdoc": {
    "methods": {
      "burnAdmin()": {
        "details": "Burn the current admin"
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "The amount to deposit to vault"
        }
      },
      "getAdmin()": {
        "details": "Returns the address of the current admin"
      },
      "pendingXVS(address)": {
        "params": {
          "_user": "The user to see pending XVS"
        }
      },
      "setNewAdmin(address)": {
        "details": "Set the current admin to new address"
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount to withdraw from vault"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "_become(address)": {
        "notice": "* Admin Functions **"
      },
      "claim()": {
        "notice": "Claim XVS from VAIVault"
      },
      "deposit(uint256)": {
        "notice": "Deposit VAI to VAIVault for XVS allocation"
      },
      "pendingXVS(address)": {
        "notice": "View function to see pending XVS on frontend"
      },
      "updatePendingRewards()": {
        "notice": "Function that updates pending rewards"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw VAI from VAIVault"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 47618,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 47620,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 47622,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "vaiVaultImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 47624,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "pendingVAIVaultImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 47629,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "xvs",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBEP20)34287"
      },
      {
        "astId": 47631,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "vai",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBEP20)34287"
      },
      {
        "astId": 47633,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "_notEntered",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 47635,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "xvsBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 47637,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "accXVSPerShare",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 47639,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "pendingRewards",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 47648,
        "contract": "contracts/Vault/VAIVault.sol:VAIVault",
        "label": "userInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(UserInfo)47644_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBEP20)34287": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)47644_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VAIVaultStorage.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)47644_storage"
      },
      "t_struct(UserInfo)47644_storage": {
        "encoding": "inplace",
        "label": "struct VAIVaultStorage.UserInfo",
        "members": [
          {
            "astId": 47641,
            "contract": "contracts/Vault/VAIVault.sol:VAIVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 47643,
            "contract": "contracts/Vault/VAIVault.sol:VAIVault",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}