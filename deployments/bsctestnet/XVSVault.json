{
  "address": "0xE6CA9904c72a81609121917Ef31a6D06D9C0b968",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChangedV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChangedV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExecutedWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAllocPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAllocPoints",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReqestedWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        }
      ],
      "name": "RewardAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldXvs",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldStore",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newXvs",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newStore",
          "type": "address"
        }
      ],
      "name": "StoreUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalLockingPeriodUpdated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract XVSVaultProxy",
          "name": "xvsVaultProxy",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IBEP20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "burnAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "executeWithdrawal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getEligibleWithdrawalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getRequestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingWithdrawals",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawalRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct XVSVaultStorageV1.WithdrawalRequest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "massUpdatePools",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingXVSVaultImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfos",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardTokenAmountsPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "setRewardAmountPerBlock",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalLockingPeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_xvs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xvsStore",
          "type": "address"
        }
      ],
      "name": "setXvsStore",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalAllocPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvsStore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x005150d916593e5f620abdd81aea6f555c816d4f776adc04815e3890f9940644",
  "receipt": {
    "to": null,
    "from": "0x9E109d68A7e245d5a1D2e2E8e6BD4230A777a70B",
    "contractAddress": "0xE6CA9904c72a81609121917Ef31a6D06D9C0b968",
    "transactionIndex": 9,
    "gasUsed": "3356412",
    "logsBloom": "0x
    "blockHash": "0x2490c5aff25ff825365b3c9ae48b49ab0970bd1911f078ec102c8f851f750340",
    "transactionHash": "0x005150d916593e5f620abdd81aea6f555c816d4f776adc04815e3890f9940644",
    "logs": [],
    "blockNumber": 19216003,
    "cumulativeGasUsed": "4946601",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b37497c5b1f763df37ae9c22af67abad",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChangedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChangedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecutedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAllocPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAllocPoints\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReqestedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"RewardAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldXvs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStore\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newXvs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStore\",\"type\":\"address\"}],\"name\":\"StoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"WithdrawalLockingPeriodUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract XVSVaultProxy\",\"name\":\"xvsVaultProxy\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"executeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEligibleWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRequestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWithdrawals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawalRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct XVSVaultStorageV1.WithdrawalRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"massUpdatePools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingXVSVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfos\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenAmountsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmountPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalLockingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xvs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xvsStore\",\"type\":\"address\"}],\"name\":\"setXvsStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvsStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"add(address,uint256,address,uint256,uint256)\":{\"details\":\"This vault DOES NOT support deflationary tokens \\u2014 it expects that  the amount of transferred tokens would equal the actually deposited  amount. In practice this means that this vault DOES NOT support USDT  and similar tokens (that do not provide these guarantees).\"},\"burnAdmin()\":{\"details\":\"Burn the current admin\"},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"deposit(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to deposit to vault\",\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\"}},\"executeWithdrawal(address,uint256)\":{\"params\":{\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\"}},\"getAdmin()\":{\"details\":\"Returns the address of the current admin\"},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"return\":\"The number of current votes for `account`\"},\"getEligibleWithdrawalAmount(address,uint256,address)\":{\"params\":{\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\",\"_user\":\"The User Address\"}},\"getPriorVotes(address,uint256)\":{\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"return\":\"The balance that user staked\"},\"getRequestedAmount(address,uint256,address)\":{\"params\":{\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\",\"_user\":\"The User Address\"}},\"getWithdrawalRequests(address,uint256,address)\":{\"params\":{\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\",\"_user\":\"The User Address\"}},\"requestWithdrawal(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to withdraw to vault\",\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\"}}}},\"userdoc\":{\"methods\":{\"_become(address)\":{\"notice\":\"* Admin Functions **\"},\"add(address,uint256,address,uint256,uint256)\":{\"notice\":\"Add a new token pool. Can only be called by the admin.\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"deposit(address,uint256,uint256)\":{\"notice\":\"Deposit XVSVault for XVS allocation\"},\"executeWithdrawal(address,uint256)\":{\"notice\":\"Execute withdrawal to XVSVault for XVS allocation\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getEligibleWithdrawalAmount(address,uint256,address)\":{\"notice\":\"Get unlocked withdrawal amount\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the xvs stake balance for an account\"},\"getRequestedAmount(address,uint256,address)\":{\"notice\":\"Get requested amount\"},\"getWithdrawalRequests(address,uint256,address)\":{\"notice\":\"Returns the array of withdrawal requests that have not been executed yet\"},\"requestWithdrawal(address,uint256,uint256)\":{\"notice\":\"Request withdrawal to XVSVault for XVS allocation\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/XVSVault/XVSVault.sol\":\"XVSVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-call-value\\r\\n        // solium-disable-next-line security/no-call-value\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9d1fa802b90f8ac9339ec8e17d54793c42b6f6b5111832143cdf79762f577ec8\"},\"contracts/Utils/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Adapted from OpenZeppelin Contracts v4.3.2 (utils/cryptography/ECDSA.sol)\\r\\n\\r\\n// SPDX-Copyright-Text: OpenZeppelin, 2021\\r\\n// SPDX-Copyright-Text: Venus, 2021\\r\\n\\r\\npragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n */\\r\\ncontract ECDSA {\\r\\n    enum RecoverError {\\r\\n        NoError,\\r\\n        InvalidSignature,\\r\\n        InvalidSignatureLength,\\r\\n        InvalidSignatureS,\\r\\n        InvalidSignatureV\\r\\n    }\\r\\n\\r\\n    function _throwError(RecoverError error) private pure {\\r\\n        if (error == RecoverError.NoError) {\\r\\n            return; // no error: do nothing\\r\\n        } else if (error == RecoverError.InvalidSignature) {\\r\\n            revert(\\\"ECDSA: invalid signature\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\r\\n            revert(\\\"ECDSA: invalid signature length\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureS) {\\r\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\r\\n        } else if (error == RecoverError.InvalidSignatureV) {\\r\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature`. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     */\\r\\n    function recover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address) {\\r\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\r\\n        _throwError(error);\\r\\n        return recovered;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n     * `signature` or error string. This address can then be used for verification purposes.\\r\\n     *\\r\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n     * this function rejects them by requiring the `s` value to be in the lower\\r\\n     * half order, and the `v` value to be either 27 or 28.\\r\\n     *\\r\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n     * verification to be secure: it is possible to craft signatures that\\r\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n     * this is by receiving a hash of the original message (which may otherwise\\r\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n     *\\r\\n     * Documentation for signature generation:\\r\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\r\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function tryRecover(\\r\\n        bytes32 hash,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (address, RecoverError) {\\r\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\r\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n        //\\r\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n        // these malleable signatures as well.\\r\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\r\\n            return (address(0), RecoverError.InvalidSignatureS);\\r\\n        }\\r\\n        if (v != 27 && v != 28) {\\r\\n            return (address(0), RecoverError.InvalidSignatureV);\\r\\n        }\\r\\n\\r\\n        // If the signature is valid (and not malleable), return the signer address\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        if (signer == address(0)) {\\r\\n            return (address(0), RecoverError.InvalidSignature);\\r\\n        }\\r\\n\\r\\n        return (signer, RecoverError.NoError);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6e74a353f73b68e956c2227ec4d55b64435e48cea03f25b438c5d77e1aeae886\"},\"contracts/Utils/IBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {BEP20Detailed}.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3a8f9954c8785aace7fde96102415fa4de1970920315652e3496b1c2b8dd965\"},\"contracts/Utils/SafeBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for BEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeBEP20: decreased allowance below zero\\\");\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeBEP20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeBEP20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x80a537e0bfa50067c3ef015f49aceb4e4ce30ae3069d40977aaa95911916224d\"},\"contracts/Utils/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb295b448107f6adee6c0861eba7cd58983eeb1a2bf9cd24b3df9c75fe17db75\"},\"contracts/XVSVault/XVSVault.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../Utils/ECDSA.sol\\\";\\r\\nimport \\\"../Utils/SafeBEP20.sol\\\";\\r\\nimport \\\"../Utils/IBEP20.sol\\\";\\r\\nimport \\\"./XVSVaultProxy.sol\\\";\\r\\nimport \\\"./XVSVaultStorage.sol\\\";\\r\\nimport \\\"./XVSVaultErrorReporter.sol\\\";\\r\\n\\r\\ninterface IXVSStore {\\r\\n    function safeRewardTransfer(address _token, address _to, uint256 _amount) external;\\r\\n    function setRewardToken(address _tokenAddress, bool status) external;\\r\\n}\\r\\n\\r\\ncontract XVSVault is XVSVaultStorage, ECDSA {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    /// @notice Event emitted when deposit\\r\\n    event Deposit(address indexed user, address indexed rewardToken, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted when execute withrawal\\r\\n    event ExecutedWithdrawal(address indexed user, address indexed rewardToken, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted when request withrawal\\r\\n    event ReqestedWithdrawal(address indexed user, address indexed rewardToken, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted when admin changed\\r\\n    event AdminTransferred(address indexed oldAdmin, address indexed newAdmin);\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChangedV2(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChangedV2(address indexed delegate, uint previousBalance, uint newBalance);\\r\\n\\r\\n    /// @notice An event emitted when the reward store address is updated\\r\\n    event StoreUpdated(address oldXvs, address oldStore, address newXvs, address newStore);\\r\\n\\r\\n    /// @notice An event emitted when the withdrawal locking period is updated for a pool\\r\\n    event WithdrawalLockingPeriodUpdated(\\r\\n        address indexed rewardToken,\\r\\n        uint indexed pid,\\r\\n        uint oldPeriod,\\r\\n        uint newPeriod\\r\\n    );\\r\\n\\r\\n    /// @notice An event emitted when the reward amount per block is modified for a pool\\r\\n    event RewardAmountUpdated(address indexed rewardToken, uint oldReward, uint newReward);\\r\\n\\r\\n    /// @notice An event emitted when a new pool is added\\r\\n    event PoolAdded(\\r\\n        address indexed rewardToken,\\r\\n        uint indexed pid,\\r\\n        address indexed token,\\r\\n        uint allocPoints,\\r\\n        uint rewardPerBlock,\\r\\n        uint lockPeriod\\r\\n    );\\r\\n\\r\\n    /// @notice An event emitted when a pool allocation points are updated\\r\\n    event PoolUpdated(\\r\\n        address indexed rewardToken,\\r\\n        uint indexed pid,\\r\\n        uint oldAllocPoints,\\r\\n        uint newAllocPoints\\r\\n    );\\r\\n\\r\\n    constructor() public {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"only admin can\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n\\r\\n    function poolLength(address rewardToken) external view returns (uint256) {\\r\\n        return poolInfos[rewardToken].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add a new token pool. Can only be called by the admin.\\r\\n     * @dev This vault DOES NOT support deflationary tokens \\u2014 it expects that\\r\\n     *   the amount of transferred tokens would equal the actually deposited\\r\\n     *   amount. In practice this means that this vault DOES NOT support USDT\\r\\n     *   and similar tokens (that do not provide these guarantees).\\r\\n     */\\r\\n    function add(\\r\\n        address _rewardToken,\\r\\n        uint256 _allocPoint,\\r\\n        IBEP20 _token,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _lockPeriod\\r\\n    )\\r\\n        external\\r\\n        onlyAdmin\\r\\n    {\\r\\n        require(address(xvsStore) != address(0), \\\"Store contract addres is empty\\\");\\r\\n\\r\\n        massUpdatePools(_rewardToken);\\r\\n\\r\\n        PoolInfo[] storage poolInfo = poolInfos[_rewardToken];\\r\\n\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            require(poolInfo[pid].token != _token, \\\"Error pool already added\\\");\\r\\n        }\\r\\n\\r\\n        totalAllocPoints[_rewardToken] = totalAllocPoints[_rewardToken].add(_allocPoint);\\r\\n\\r\\n        rewardTokenAmountsPerBlock[_rewardToken] = _rewardPerBlock;\\r\\n\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                token: _token,\\r\\n                allocPoint: _allocPoint,\\r\\n                lastRewardBlock: block.number,\\r\\n                accRewardPerShare: 0,\\r\\n                lockPeriod: _lockPeriod\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // this is calling setRewardToken method of xvsStore which is admin only method \\r\\n        IXVSStore(xvsStore).setRewardToken(_rewardToken, true);\\r\\n\\r\\n        emit PoolAdded(\\r\\n            _rewardToken,\\r\\n            poolInfo.length - 1,\\r\\n            address(_token),\\r\\n            _allocPoint,\\r\\n            _rewardPerBlock,\\r\\n            _lockPeriod\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Update the given pool's reward allocation point. Can only be called by the admin.\\r\\n    function set(\\r\\n        address _rewardToken,\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint\\r\\n    )\\r\\n        external\\r\\n        onlyAdmin\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        massUpdatePools(_rewardToken);\\r\\n\\r\\n        PoolInfo[] storage poolInfo = poolInfos[_rewardToken];\\r\\n        totalAllocPoints[_rewardToken] = totalAllocPoints[_rewardToken].sub(poolInfo[_pid].allocPoint).add(\\r\\n            _allocPoint\\r\\n        );\\r\\n        uint256 oldAllocPoints = poolInfo[_pid].allocPoint;\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n\\r\\n        emit PoolUpdated(_rewardToken, _pid, oldAllocPoints, _allocPoint);\\r\\n    }\\r\\n\\r\\n    // Update the given reward token's amount per block\\r\\n    function setRewardAmountPerBlock(\\r\\n        address _rewardToken,\\r\\n        uint256 _rewardAmount\\r\\n    )\\r\\n        external\\r\\n        onlyAdmin\\r\\n    {\\r\\n        massUpdatePools(_rewardToken);\\r\\n        uint256 oldReward = rewardTokenAmountsPerBlock[_rewardToken];\\r\\n        rewardTokenAmountsPerBlock[_rewardToken] = _rewardAmount;\\r\\n\\r\\n        emit RewardAmountUpdated(_rewardToken, oldReward, _rewardAmount);\\r\\n    }\\r\\n\\r\\n    // Update the given reward token's amount per block\\r\\n    function setWithdrawalLockingPeriod(\\r\\n        address _rewardToken,\\r\\n        uint256 _pid,\\r\\n        uint256 _newPeriod\\r\\n    )\\r\\n        external\\r\\n        onlyAdmin\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        require(_newPeriod > 0, \\\"Invalid new locking period\\\");\\r\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\r\\n        uint256 oldPeriod = pool.lockPeriod;\\r\\n        pool.lockPeriod = _newPeriod;\\r\\n\\r\\n        emit WithdrawalLockingPeriodUpdated(_rewardToken, _pid, oldPeriod, _newPeriod);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit XVSVault for XVS allocation\\r\\n     * @param _rewardToken The Reward Token Address\\r\\n     * @param _pid The Pool Index\\r\\n     * @param _amount The amount to deposit to vault\\r\\n     */\\r\\n    function deposit(address _rewardToken, uint256 _pid, uint256 _amount)\\r\\n        external\\r\\n        nonReentrant\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\r\\n        UserInfo storage user = userInfos[_rewardToken][_pid][msg.sender];\\r\\n        _updatePool(_rewardToken, _pid);\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending =\\r\\n                user.amount.mul(pool.accRewardPerShare).div(1e12).sub(\\r\\n                    user.rewardDebt\\r\\n                );\\r\\n            IXVSStore(xvsStore).safeRewardTransfer(_rewardToken, msg.sender, pending);\\r\\n        }\\r\\n        pool.token.safeTransferFrom(\\r\\n            address(msg.sender),\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        user.amount = user.amount.add(_amount);\\r\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\r\\n\\r\\n        // Update Delegate Amount\\r\\n        if (address(pool.token) == address(xvsAddress)) {\\r\\n            _moveDelegates(address(0), delegates[msg.sender], uint96(_amount));\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _rewardToken, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Pushes withdrawal request to the requests array and updates\\r\\n     *   the pending withdrawals amount. The requests are always sorted\\r\\n     *   by unlock time (descending) so that the earliest to execute requests\\r\\n     *   are always at the end of the array.\\r\\n     * @param _user The user struct storage pointer\\r\\n     * @param _requests The user's requests array storage pointer\\r\\n     * @param _amount The amount being requested\\r\\n     */\\r\\n    function pushWithdrawalRequest(\\r\\n        UserInfo storage _user,\\r\\n        WithdrawalRequest[] storage _requests,\\r\\n        uint _amount,\\r\\n        uint _lockedUntil\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        uint i = _requests.length;\\r\\n        _requests.push(WithdrawalRequest(0, 0));\\r\\n        // Keep it sorted so that the first to get unlocked request is always at the end\\r\\n        for (; i > 0 && _requests[i - 1].lockedUntil <= _lockedUntil; --i) {\\r\\n            _requests[i] = _requests[i - 1];\\r\\n        }\\r\\n        _requests[i] = WithdrawalRequest(_amount, _lockedUntil);\\r\\n        _user.pendingWithdrawals = _user.pendingWithdrawals.add(_amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Pops the requests with unlock time < now from the requests\\r\\n     *   array and deducts the computed amount from the user's pending\\r\\n     *   withdrawals counter. Assumes that the requests array is sorted\\r\\n     *   by unclock time (descending).\\r\\n     * @dev This function **removes** the eligible requests from the requests\\r\\n     *   array. If this function is called, the withdrawal should actually\\r\\n     *   happen (or the transaction should be reverted).\\r\\n     * @param _user The user struct storage pointer\\r\\n     * @param _requests The user's requests array storage pointer\\r\\n     * @return The amount eligible for withdrawal (this amount should be\\r\\n     *   sent to the user, otherwise the state would be inconsistent).\\r\\n     */\\r\\n    function popEligibleWithdrawalRequests(\\r\\n        UserInfo storage _user,\\r\\n        WithdrawalRequest[] storage _requests\\r\\n    )\\r\\n        internal\\r\\n        returns (uint withdrawalAmount)\\r\\n    {\\r\\n        // Since the requests are sorted by their unlock time, we can just\\r\\n        // pop them from the array and stop at the first not-yet-eligible one\\r\\n        for (uint i = _requests.length; i > 0 && isUnlocked(_requests[i - 1]); --i) {\\r\\n            withdrawalAmount = withdrawalAmount.add(_requests[i - 1].amount);\\r\\n            _requests.pop();\\r\\n        }\\r\\n        _user.pendingWithdrawals = _user.pendingWithdrawals.sub(withdrawalAmount);\\r\\n        return withdrawalAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the request is eligible for withdrawal.\\r\\n     * @param _request The request struct storage pointer\\r\\n     * @return True if the request is eligible for withdrawal, false otherwise\\r\\n     */\\r\\n    function isUnlocked(WithdrawalRequest storage _request) private view returns (bool) {\\r\\n        return _request.lockedUntil <= block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Execute withdrawal to XVSVault for XVS allocation\\r\\n     * @param _rewardToken The Reward Token Address\\r\\n     * @param _pid The Pool Index\\r\\n     */\\r\\n    function executeWithdrawal(address _rewardToken, uint256 _pid)\\r\\n        external\\r\\n        nonReentrant\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\r\\n        UserInfo storage user = userInfos[_rewardToken][_pid][msg.sender];\\r\\n        WithdrawalRequest[] storage requests = withdrawalRequests[_rewardToken][_pid][msg.sender];\\r\\n\\r\\n        uint256 _amount = popEligibleWithdrawalRequests(user, requests);\\r\\n        require(_amount > 0, \\\"nothing to withdraw\\\");\\r\\n\\r\\n        _updatePool(_rewardToken, _pid);\\r\\n        uint256 pending =\\r\\n            user.amount.mul(pool.accRewardPerShare).div(1e12).sub(\\r\\n                user.rewardDebt\\r\\n            );\\r\\n        IXVSStore(xvsStore).safeRewardTransfer(_rewardToken, msg.sender, pending);\\r\\n        user.amount = user.amount.sub(_amount);\\r\\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\r\\n        pool.token.safeTransfer(address(msg.sender), _amount);\\r\\n\\r\\n        emit ExecutedWithdrawal(msg.sender, _rewardToken, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request withdrawal to XVSVault for XVS allocation\\r\\n     * @param _rewardToken The Reward Token Address\\r\\n     * @param _pid The Pool Index\\r\\n     * @param _amount The amount to withdraw to vault\\r\\n     */\\r\\n    function requestWithdrawal(address _rewardToken, uint256 _pid, uint256 _amount)\\r\\n        external\\r\\n        nonReentrant\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        require(_amount > 0, \\\"requested amount cannot be zero\\\");\\r\\n        UserInfo storage user = userInfos[_rewardToken][_pid][msg.sender];\\r\\n        require(user.amount >= user.pendingWithdrawals.add(_amount), \\\"requested amount is invalid\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\r\\n        WithdrawalRequest[] storage requests = withdrawalRequests[_rewardToken][_pid][msg.sender];\\r\\n        uint lockedUntil = pool.lockPeriod.add(block.timestamp);\\r\\n\\r\\n        pushWithdrawalRequest(user, requests, _amount, lockedUntil);\\r\\n\\r\\n        // Update Delegate Amount\\r\\n        if (_rewardToken == address(xvsAddress)) {\\r\\n            _moveDelegates(delegates[msg.sender], address(0), uint96(_amount));\\r\\n        }\\r\\n\\r\\n        emit ReqestedWithdrawal(msg.sender, _rewardToken, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get unlocked withdrawal amount\\r\\n     * @param _rewardToken The Reward Token Address\\r\\n     * @param _pid The Pool Index\\r\\n     * @param _user The User Address\\r\\n     */\\r\\n    function getEligibleWithdrawalAmount(address _rewardToken, uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint withdrawalAmount)\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        WithdrawalRequest[] storage requests = withdrawalRequests[_rewardToken][_pid][_user];\\r\\n        // Since the requests are sorted by their unlock time, we can take\\r\\n        // the entries from the end of the array and stop at the first\\r\\n        // not-yet-eligible one\\r\\n        for (uint i = requests.length; i > 0 && isUnlocked(requests[i - 1]); --i) {\\r\\n            withdrawalAmount = withdrawalAmount.add(requests[i - 1].amount);\\r\\n        }\\r\\n        return withdrawalAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get requested amount\\r\\n     * @param _rewardToken The Reward Token Address\\r\\n     * @param _pid The Pool Index\\r\\n     * @param _user The User Address\\r\\n     */\\r\\n    function getRequestedAmount(address _rewardToken, uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        UserInfo storage user = userInfos[_rewardToken][_pid][_user];\\r\\n        return user.pendingWithdrawals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the array of withdrawal requests that have not been executed yet\\r\\n     * @param _rewardToken The Reward Token Address\\r\\n     * @param _pid The Pool Index\\r\\n     * @param _user The User Address\\r\\n     */\\r\\n    function getWithdrawalRequests(address _rewardToken, uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (WithdrawalRequest[] memory)\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        return withdrawalRequests[_rewardToken][_pid][_user];\\r\\n    }\\r\\n\\r\\n    // View function to see pending XVSs on frontend.\\r\\n    function pendingReward(address _rewardToken, uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\r\\n        UserInfo storage user = userInfos[_rewardToken][_pid][_user];\\r\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\r\\n        uint256 supply = pool.token.balanceOf(address(this));\\r\\n        uint256 curBlockNumber = block.number;\\r\\n        uint256 rewardTokenPerBlock = rewardTokenAmountsPerBlock[_rewardToken];\\r\\n        if (curBlockNumber > pool.lastRewardBlock && supply != 0) {\\r\\n            uint256 multiplier = curBlockNumber.sub(pool.lastRewardBlock);\\r\\n            uint256 reward =\\r\\n                multiplier.mul(rewardTokenPerBlock).mul(pool.allocPoint).div(\\r\\n                    totalAllocPoints[_rewardToken]\\r\\n                );\\r\\n            accRewardPerShare = accRewardPerShare.add(\\r\\n                reward.mul(1e12).div(supply)\\r\\n            );\\r\\n        }\\r\\n        return user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    // Update reward vairables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools(address _rewardToken) public {\\r\\n        uint256 length = poolInfos[_rewardToken].length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            _updatePool(_rewardToken, pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updatePool(address _rewardToken, uint256 _pid)\\r\\n        external\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        _updatePool(_rewardToken, _pid);\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function _updatePool(address _rewardToken, uint256 _pid)\\r\\n        internal\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 supply = pool.token.balanceOf(address(this));\\r\\n        if (supply == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 curBlockNumber = block.number;\\r\\n        uint256 multiplier = curBlockNumber.sub(pool.lastRewardBlock);\\r\\n        uint256 reward =\\r\\n            multiplier.mul(rewardTokenAmountsPerBlock[_rewardToken]).mul(pool.allocPoint).div(\\r\\n                totalAllocPoints[_rewardToken]\\r\\n            );\\r\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(\\r\\n            reward.mul(1e12).div(supply)\\r\\n        );\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function _ensureValidPool(address rewardToken, uint256 pid) internal view {\\r\\n        require(pid < poolInfos[rewardToken].length , \\\"vault: pool exists?\\\");\\r\\n    }\\r\\n\\r\\n    // Get user info with reward token address and pid\\r\\n    function getUserInfo(\\r\\n        address _rewardToken,\\r\\n        uint256 _pid,\\r\\n        address _user\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 amount, uint256 rewardDebt, uint256 pendingWithdrawals)\\r\\n    {\\r\\n        _ensureValidPool(_rewardToken, _pid);\\r\\n        UserInfo storage user = userInfos[_rewardToken][_pid][_user];\\r\\n        amount = user.amount;\\r\\n        rewardDebt = user.rewardDebt;\\r\\n        pendingWithdrawals = user.pendingWithdrawals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the XVS stake balance of an account (excluding the pending withdrawals)\\r\\n     * @param account The address of the account to check\\r\\n     * @return The balance that user staked\\r\\n     */\\r\\n    function getStakeAmount(address account) internal view returns (uint96) {\\r\\n        require(xvsAddress != address(0), \\\"XVSVault::getStakeAmount: xvs address is not set\\\");\\r\\n\\r\\n        PoolInfo[] storage poolInfo = poolInfos[xvsAddress];\\r\\n\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            if (address(poolInfo[pid].token) == address(xvsAddress)) {\\r\\n                UserInfo storage user = userInfos[xvsAddress][pid][account];\\r\\n                return uint96(user.amount.sub(user.pendingWithdrawals));\\r\\n            }\\r\\n        }\\r\\n        return uint96(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     */\\r\\n    function delegate(address delegatee) external {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s)\\r\\n        external\\r\\n    {\\r\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\\\"XVSVault\\\")), getChainId(), address(this)));\\r\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\r\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n        address signatory = ECDSA.recover(digest, v, r, s);\\r\\n        require(nonce == nonces[signatory]++, \\\"XVSVault::delegateBySig: invalid nonce\\\");\\r\\n        require(block.timestamp <= expiry, \\\"XVSVault::delegateBySig: signature expired\\\");\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account) external view returns (uint96) {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = delegates[delegator];\\r\\n        uint96 delegatorBalance = getStakeAmount(delegator);\\r\\n        delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChangedV2(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\r\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"XVSVault::_moveVotes: vote amount underflows\\\");\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\r\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"XVSVault::_moveVotes: vote amount overflows\\\");\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\r\\n        uint32 blockNumber = safe32(block.number, \\\"XVSVault::_writeCheckpoint: block number exceeds 32 bits\\\");\\r\\n\\r\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChangedV2(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\r\\n        require(n < 2**96, errorMessage);\\r\\n        return uint96(n);\\r\\n    }\\r\\n\\r\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\r\\n        uint96 c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint) {\\r\\n        uint256 chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the xvs stake balance for an account\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The balance that user staked\\r\\n     */\\r\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96) {\\r\\n        require(blockNumber < block.number, \\\"XVSVault::getPriorVotes: not yet determined\\\");\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current admin\\r\\n     */\\r\\n    function getAdmin() external view returns (address) {\\r\\n        return admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn the current admin\\r\\n     */\\r\\n    function burnAdmin() external onlyAdmin {\\r\\n        emit AdminTransferred(admin, address(0));\\r\\n        admin = address(0);\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _become(XVSVaultProxy xvsVaultProxy) external {\\r\\n        require(msg.sender == xvsVaultProxy.admin(), \\\"only proxy admin can change brains\\\");\\r\\n        require(xvsVaultProxy._acceptImplementation() == 0, \\\"change not authorized\\\");\\r\\n    }\\r\\n\\r\\n    function setXvsStore(address _xvs, address _xvsStore) external onlyAdmin {\\r\\n        address oldXvsContract = xvsAddress;\\r\\n        address oldStore = xvsStore;\\r\\n        xvsAddress = _xvs;\\r\\n        xvsStore = _xvsStore;\\r\\n\\r\\n        _notEntered = true;\\r\\n\\r\\n        emit StoreUpdated(oldXvsContract, oldStore, _xvs, _xvsStore);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5684c0653646cc5a094778d09291e75e6af3f0ee2068ca44ec77fb9970016b48\"},\"contracts/XVSVault/XVSVaultErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ncontract XVSVaultErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe012475eee3a2bb0e16a93c0f65f9628f57579b882a0a24028f8e597085781f1\"},\"contracts/XVSVault/XVSVaultProxy.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./XVSVaultStorage.sol\\\";\\r\\nimport \\\"./XVSVaultErrorReporter.sol\\\";\\r\\n\\r\\ncontract XVSVaultProxy is XVSVaultAdminStorage, XVSVaultErrorReporter {\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingXVSVaultImplementation is changed\\r\\n      */\\r\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingXVSVaultImplementation is accepted, which means XVS Vault implementation is updated\\r\\n      */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is changed\\r\\n      */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n      */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    constructor() public {\\r\\n        // Set admin to caller\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\r\\n\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        address oldPendingImplementation = pendingXVSVaultImplementation;\\r\\n\\r\\n        pendingXVSVaultImplementation = newPendingImplementation;\\r\\n\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingXVSVaultImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Accepts new implementation of XVS Vault. msg.sender must be pendingImplementation\\r\\n    * @dev Admin function for new implementation to accept it's role as implementation\\r\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n    */\\r\\n    function _acceptImplementation() public returns (uint) {\\r\\n        // Check caller is pendingImplementation\\r\\n        if (msg.sender != pendingXVSVaultImplementation) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = implementation;\\r\\n        address oldPendingImplementation = pendingXVSVaultImplementation;\\r\\n\\r\\n        implementation = pendingXVSVaultImplementation;\\r\\n\\r\\n        pendingXVSVaultImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, implementation);\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingXVSVaultImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() public returns (uint) {\\r\\n        // Check caller is pendingAdmin\\r\\n        if (msg.sender != pendingAdmin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    function () external payable {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = implementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n              let free_mem_ptr := mload(0x40)\\r\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\r\\n\\r\\n              switch success\\r\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\r\\n              default { return(free_mem_ptr, returndatasize) }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a0d2d69ec32ffe9f6efbfd154d53a5dcbe74b8cf8c6f05cb55ab8035d3dc5fa\"},\"contracts/XVSVault/XVSVaultStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\nimport \\\"../Utils/SafeMath.sol\\\";\\r\\nimport \\\"../Utils/IBEP20.sol\\\";\\r\\n\\r\\ncontract XVSVaultAdminStorage {\\r\\n    /**\\r\\n    * @notice Administrator for this contract\\r\\n    */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending administrator for this contract\\r\\n    */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n    * @notice Active brains of XVS Vault\\r\\n    */\\r\\n    address public implementation;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending brains of XVS Vault\\r\\n    */\\r\\n    address public pendingXVSVaultImplementation;\\r\\n}\\r\\n\\r\\ncontract XVSVaultStorageV1 is XVSVaultAdminStorage {\\r\\n    /// @notice Guard variable for re-entrancy checks\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /// @notice The reward token store\\r\\n    address public xvsStore;\\r\\n\\r\\n    /// @notice The xvs token address\\r\\n    address public xvsAddress;\\r\\n\\r\\n    // Reward tokens created per block indentified by reward token address.\\r\\n    mapping(address => uint256) public rewardTokenAmountsPerBlock;\\r\\n\\r\\n    /// @notice Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 pendingWithdrawals;\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IBEP20 token;               // Address of token contract to stake.\\r\\n        uint256 allocPoint;         // How many allocation points assigned to this pool.\\r\\n        uint256 lastRewardBlock;    // Last block number that reward tokens distribution occurs.\\r\\n        uint256 accRewardPerShare;  // Accumulated per share, times 1e12. See below.\\r\\n        uint256 lockPeriod;         // Min time between withdrawal request and its execution.\\r\\n    }\\r\\n\\r\\n    // Infomation about a withdrawal request\\r\\n    struct WithdrawalRequest {\\r\\n        uint256 amount;\\r\\n        uint256 lockedUntil;\\r\\n    }\\r\\n\\r\\n    // Info of each user that stakes tokens.\\r\\n    mapping(address => mapping(uint256 => mapping(address => UserInfo))) userInfos;\\r\\n\\r\\n    // Info of each pool.\\r\\n    mapping(address => PoolInfo[]) public poolInfos;\\r\\n\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    mapping(address => uint256) public totalAllocPoints;\\r\\n\\r\\n    // Info of requested but not yet executed withdrawals\\r\\n    mapping(address => mapping(uint256 => mapping(address => WithdrawalRequest[]))) withdrawalRequests;\\r\\n\\r\\n    /// @notice DEPRECATED A record of each accounts delegate (before the voting power fix)\\r\\n    mapping (address => address) private __oldDelegatesSlot;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice DEPRECATED A record of votes checkpoints for each account, by index (before the voting power fix)\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) private __oldCheckpointsSlot;\\r\\n\\r\\n    /// @notice DEPRECATED The number of checkpoints for each account (before the voting power fix)\\r\\n    mapping (address => uint32) private __oldNumCheckpointsSlot;\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping (address => uint) public nonces;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n}\\r\\n\\r\\ncontract XVSVaultStorage is XVSVaultStorageV1 {\\r\\n    /// @notice A record of each accounts delegate\\r\\n    mapping (address => address) public delegates;\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping (address => uint32) public numCheckpoints;\\r\\n}\\r\\n\",\"keccak256\":\"0x418c2fc18f2bd93e6f81d44b13c2732b11a168db443297efd0cfcacb8a6af505\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055613b5f806100326000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80637ac9245611610130578063a09eab7a116100b8578063de0368b21161007c578063de0368b2146104c9578063e7a324dc146104d1578063f1127ed8146104d9578063f851a440146104fa578063fba1b1f91461050257610232565b8063a09eab7a1461045d578063b4b5ea5714610470578063c210259614610483578063c3cda520146104a3578063d7ae45e2146104b657610232565b80638ed7333d116100ff5780638ed7333d146103de57806392e35000146103f157806393c7c4d11461041557806398e1b31b146104285780639e2b6c4d1461044a57610232565b80637ac924561461039d5780637ecebe00146103b057806381bdf98c146103c35780638308d7e9146103cb57610232565b80634298bdbd116101be5780635ff56315116101825780635ff563151461032f5780636dd77cbd146103425780636e9960c3146103555780636fcfff451461035d578063782d6fe11461037d57610232565b80634298bdbd146102db5780635362b503146102ee578063587cde1e146103015780635c19a95c146103145780635c60da1b1461032757610232565b806320606b701161020557806320606b701461029b57806324f52bbf146102a357806326782247146102b85780632eda5c6c146102c0578063358ae036146102d357610232565b80630af13728146102375780630efe6a8b14610260578063115b512f146102755780631d504dc614610288575b600080fd5b61024a610245366004612b9c565b610515565b60405161025791906136ca565b60405180910390f35b61027361026e366004612c5e565b61055b565b005b610273610283366004612c5e565b6107b9565b610273610296366004612d76565b61099b565b61024a610acf565b6102ab610ae6565b60405161025791906135f4565b6102ab610af5565b61024a6102ce366004612af6565b610b04565b6102ab610b16565b61024a6102e9366004612af6565b610b25565b6102736102fc366004612af6565b610b37565b6102ab61030f366004612af6565b610b71565b610273610322366004612af6565b610b8c565b6102ab610b96565b61027361033d366004612b32565b610ba5565b61024a610350366004612b9c565b610c5d565b6102ab610d12565b61037061036b366004612af6565b610d21565b6040516102579190613956565b61039061038b366004612b6c565b610d39565b604051610257919061397f565b6102736103ab366004612b6c565b610f48565b61024a6103be366004612af6565b611167565b610273611179565b6102736103d9366004612c5e565b6111ed565b6102736103ec366004612b6c565b61134b565b6104046103ff366004612b6c565b611363565b604051610257959493929190613750565b610273610423366004612b6c565b6113b8565b61043b610436366004612b9c565b61144c565b6040516102579392919061393b565b610273610458366004612c5e565b61149e565b61024a61046b366004612b9c565b611574565b61039061047e366004612af6565b61175d565b610496610491366004612b9c565b6117d0565b60405161025791906136b9565b6102736104b1366004612ca1565b611876565b61024a6104c4366004612af6565b6119f7565b6102ab611a12565b61024a611a21565b6104ec6104e7366004612d28565b611a2d565b604051610257929190613964565b6102ab611a62565b610273610510366004612be9565b611a71565b60006105218484611cc2565b506001600160a01b0380841660009081526007602090815260408083208684528252808320938516835292905220600201545b9392505050565b600354600160a01b900460ff1661058d5760405162461bcd60e51b81526004016105849061387d565b60405180910390fd5b6003805460ff60a01b191690556105a48383611cc2565b6001600160a01b03831660009081526008602052604081208054849081106105c857fe5b600091825260208083206001600160a01b0388168452600782526040808520888652835280852033865290925292206005909102909101915061060b8585611cf9565b8054156106c0576000610658826001015461064c64e8d4a5100061064087600301548760000154611e7c90919063ffffffff16565b9063ffffffff611eb616565b9063ffffffff611ef816565b6004805460405163135b33cd60e31b81529293506001600160a01b031691639ad99e689161068c918a913391879101613602565b600060405180830381600087803b1580156106a657600080fd5b505af11580156106ba573d6000803e3d6000fd5b50505050505b81546106dd906001600160a01b031633308663ffffffff611f3a16565b80546106ef908463ffffffff611f9b16565b80825560038301546107129164e8d4a5100091610640919063ffffffff611e7c16565b600182015560055482546001600160a01b039081169116141561075357336000908152600f602052604081205461075391906001600160a01b031685611fc0565b83856001600160a01b0316336001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78660405161079791906136ca565b60405180910390a450506003805460ff60a01b1916600160a01b179055505050565b600354600160a01b900460ff166107e25760405162461bcd60e51b81526004016105849061387d565b6003805460ff60a01b191690556107f98383611cc2565b600081116108195760405162461bcd60e51b81526004016105849061385d565b6001600160a01b0383166000908152600760209081526040808320858452825280832033845290915290206002810154610859908363ffffffff611f9b16565b815410156108795760405162461bcd60e51b81526004016105849061390d565b6001600160a01b038416600090815260086020526040812080548590811061089d57fe5b600091825260208083206001600160a01b0389168452600a8252604080852089865283528085203386529092529083206005929092020160048101549093509091906108e99042611f9b565b90506108f784838784612152565b6005546001600160a01b038881169116141561093357336000908152600f6020526040812054610933916001600160a01b039091169087611fc0565b85876001600160a01b0316336001600160a01b03167fc0863fcc3a3b119da683cc8d57bce56f78d0d373c023726dea2aaf6ce3f837ac8860405161097791906136ca565b60405180910390a450506003805460ff60a01b1916600160a01b1790555050505050565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d457600080fd5b505afa1580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a0c9190810190612b14565b6001600160a01b0316336001600160a01b031614610a3c5760405162461bcd60e51b81526004016105849061391d565b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a7757600080fd5b505af1158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aaf9190810190612d94565b15610acc5760405162461bcd60e51b8152600401610584906138bd565b50565b604051610adb906135de565b604051809103902081565b6004546001600160a01b031681565b6001546001600160a01b031681565b60066020526000908152604090205481565b6005546001600160a01b031681565b60096020526000908152604090205481565b6001600160a01b038116600090815260086020526040812054905b81811015610b6c57610b648382611cf9565b600101610b52565b505050565b600f602052600090815260409020546001600160a01b031681565b610acc338261227c565b6002546001600160a01b031681565b6000546001600160a01b03163314610bcf5760405162461bcd60e51b81526004016105849061389d565b60058054600480546001600160a01b03198084166001600160a01b038881169190911790955581168585161790915560038054600160a01b60ff60a01b199091161790556040519183169216907f559f314bb90394a4a9ceb724f365b36a53587d894352c43d12901fd68010145690610c4f90849084908890889061362a565b60405180910390a150505050565b6000610c698484611cc2565b6001600160a01b038085166000908152600a60209081526040808320878452825280832093861683529290522080545b600081118015610cc95750610cc9826001830381548110610cb657fe5b906000526020600020906002020161230b565b15610d0957610cfe826001830381548110610ce057fe5b6000918252602090912060029091020154849063ffffffff611f9b16565b925060001901610c99565b50509392505050565b6000546001600160a01b031690565b60116020526000908152604090205463ffffffff1681565b6000438210610d5a5760405162461bcd60e51b81526004016105849061383d565b6001600160a01b03831660009081526011602052604090205463ffffffff1680610d88576000915050610f42565b6001600160a01b038416600090815260106020908152604080832063ffffffff600019860181168552925290912054168310610e04576001600160a01b03841660009081526010602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610f42565b6001600160a01b038416600090815260106020908152604080832083805290915290205463ffffffff16831015610e3f576000915050610f42565b600060001982015b8163ffffffff168163ffffffff161115610f0257600282820363ffffffff16048103610e71612a87565b506001600160a01b038716600090815260106020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415610edd57602001519450610f429350505050565b805163ffffffff16871115610ef457819350610efb565b6001820392505b5050610e47565b506001600160a01b038516600090815260106020908152604080832063ffffffff909416835292905220546001600160601b03600160201b909104169150505b92915050565b600354600160a01b900460ff16610f715760405162461bcd60e51b81526004016105849061387d565b6003805460ff60a01b19169055610f888282611cc2565b6001600160a01b0382166000908152600860205260408120805483908110610fac57fe5b600091825260208083206001600160a01b038716808552600783526040808620888752845280862033808852908552818720928752600a8552818720898852855281872090875290935291842060059093020193509161100c8383612315565b90506000811161102e5760405162461bcd60e51b8152600401610584906138cd565b6110388686611cf9565b6000611066846001015461064c64e8d4a5100061064089600301548960000154611e7c90919063ffffffff16565b6004805460405163135b33cd60e31b81529293506001600160a01b031691639ad99e689161109a918b913391879101613602565b600060405180830381600087803b1580156110b457600080fd5b505af11580156110c8573d6000803e3d6000fd5b505085546110df925090508363ffffffff611ef816565b80855560038601546111029164e8d4a5100091610640919063ffffffff611e7c16565b60018501558454611123906001600160a01b0316338463ffffffff6123c316565b85876001600160a01b0316336001600160a01b03167fe31da05fae6db869f5ea51f4b638aa6884070b6c87f18f63bd2291a12cb2f5188560405161097791906136ca565b600e6020526000908152604090205481565b6000546001600160a01b031633146111a35760405162461bcd60e51b81526004016105849061389d565b600080546040516001600160a01b03909116907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146112175760405162461bcd60e51b81526004016105849061389d565b6112218383611cc2565b61122a83610b37565b6001600160a01b038316600090815260086020526040902080546112a09083906112949084908790811061125a57fe5b60009182526020808320600160059093020191909101546001600160a01b038a16835260099091526040909120549063ffffffff611ef816565b9063ffffffff611f9b16565b6001600160a01b03851660009081526009602052604081209190915581548290859081106112ca57fe5b9060005260206000209060050201600101549050828285815481106112eb57fe5b90600052602060002090600502016001018190555083856001600160a01b03167f6ee09c6cb801194690c195c69f465aaf7c80255cbeafaab9600f47ed79de2ca9838660405161133c92919061392d565b60405180910390a35050505050565b6113558282611cc2565b61135f8282611cf9565b5050565b6008602052816000526040600020818154811061137c57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039093169550909350919085565b6000546001600160a01b031633146113e25760405162461bcd60e51b81526004016105849061389d565b6113eb82610b37565b6001600160a01b0382166000818152600660205260409081902080549084905590519091907fad96cee0d692f0250b98e085504f399da6733854908215f6203fe3c69366d9f59061143f908490869061392d565b60405180910390a2505050565b600080600061145b8686611cc2565b5050506001600160a01b03928316600090815260076020908152604080832094835293815283822092909416815292529020805460018201546002909201549092565b6000546001600160a01b031633146114c85760405162461bcd60e51b81526004016105849061389d565b6114d28383611cc2565b600081116114f25760405162461bcd60e51b8152600401610584906138dd565b6001600160a01b038316600090815260086020526040812080548490811061151657fe5b9060005260206000209060050201905060008160040154905082826004018190555083856001600160a01b03167f0bcf80c5060ccf99b7a993c57a94b232fc2c5c04bd74c7c7d174595fee6bc31f838660405161133c92919061392d565b60006115808484611cc2565b6001600160a01b03841660009081526008602052604081208054859081106115a457fe5b600091825260208083206001600160a01b0389811685526007835260408086208a8752845280862089831687529093528285206005949094029091016003810154815493516370a0823160e01b8152919650939492909116906370a08231906116119030906004016135f4565b60206040518083038186803b15801561162957600080fd5b505afa15801561163d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116619190810190612d94565b6001600160a01b038916600090815260066020526040902054600286015491925043918211801561169157508215155b156117275760006116af876002015484611ef890919063ffffffff16565b6001600160a01b038c1660009081526009602052604081205460018a015492935090916116f79190610640906116eb868863ffffffff611e7c16565b9063ffffffff611e7c16565b9050611722611715866106408464e8d4a5100063ffffffff611e7c16565b879063ffffffff611f9b16565b955050505b61174f856001015461064c64e8d4a51000610640888a60000154611e7c90919063ffffffff16565b9a9950505050505050505050565b6001600160a01b03811660009081526011602052604081205463ffffffff16806117885760006117c7565b6001600160a01b0383166000908152601060209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9150505b919050565b60606117dc8484611cc2565b6001600160a01b038085166000908152600a602090815260408083208784528252808320938616835292815282822080548451818402810184019095528085529092909184015b8282101561186957838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611823565b5050505090509392505050565b6000604051611884906135de565b604080519182900382208282019091526008825267161594d5985d5b1d60c21b6020909201919091527fddfcc46608a8bd52ebf900f03a24cc97b73a6046cec8c5d0f74a211e376e967a6118d66123e5565b306040516020016118ea949392919061370d565b6040516020818303038152906040528051906020012090506000604051611910906135e9565b60405190819003812061192b918a908a908a906020016136d8565b604051602081830303815290604052805190602001209050600082826040516020016119589291906135ad565b604051602081830303815290604052805190602001209050600061197e828888886123e9565b6001600160a01b0381166000908152600e6020526040902080546001810190915590915089146119c05760405162461bcd60e51b81526004016105849061380d565b874211156119e05760405162461bcd60e51b8152600401610584906137fd565b6119ea818b61227c565b505050505b505050505050565b6001600160a01b031660009081526008602052604090205490565b6003546001600160a01b031681565b604051610adb906135e9565b601060209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6000546001600160a01b031681565b6000546001600160a01b03163314611a9b5760405162461bcd60e51b81526004016105849061389d565b6004546001600160a01b0316611ac35760405162461bcd60e51b8152600401610584906138ad565b611acc85610b37565b6001600160a01b0385166000908152600860205260408120805490915b81811015611b4757856001600160a01b0316838281548110611b0757fe5b60009182526020909120600590910201546001600160a01b03161415611b3f5760405162461bcd60e51b81526004016105849061388d565b600101611ae9565b506001600160a01b038716600090815260096020526040902054611b71908763ffffffff611f9b16565b6001600160a01b0388811660009081526009602090815260408083209490945560068152838220889055835160a08101855289841681528082018b81524382870190815260608301858152608084018b81528a5460018082018d558c8952969097209451600590970290940180546001600160a01b031916968816969096178655915185850155516002850155516003840155516004928301558154935163fb66fb4d60e01b8152939092169263fb66fb4d92611c30928c9201613683565b600060405180830381600087803b158015611c4a57600080fd5b505af1158015611c5e573d6000803e3d6000fd5b50505050846001600160a01b03166001838054905003886001600160a01b03167fd7fa4bff1cd2253c0789c3291a786a6f6b1a3b4569a75af683a15d52abb6a0bf898888604051611cb19392919061393b565b60405180910390a450505050505050565b6001600160a01b038216600090815260086020526040902054811061135f5760405162461bcd60e51b8152600401610584906137bd565b6001600160a01b0382166000908152600860205260408120805483908110611d1d57fe5b9060005260206000209060050201905080600201544311611d3e575061135f565b80546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611d6e9030906004016135f4565b60206040518083038186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dbe9190810190612d94565b905080611dd257504360029091015561135f565b60028201544390600090611ded90839063ffffffff611ef816565b6001600160a01b03871660009081526009602090815260408083205460018901546006909352908320549394509192611e369291610640916116eb90879063ffffffff611e7c16565b9050611e65611e54856106408464e8d4a5100063ffffffff611e7c16565b60038701549063ffffffff611f9b16565b600386015550504360029093019290925550505050565b600082611e8b57506000610f42565b82820282848281611e9857fe5b04146105545760405162461bcd60e51b81526004016105849061386d565b600061055483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612413565b600061055483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061244a565b604051611f959085906323b872dd60e01b90611f5e90879087908790602401613668565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612476565b50505050565b6000828201838110156105545760405162461bcd60e51b81526004016105849061381d565b816001600160a01b0316836001600160a01b031614158015611feb57506000816001600160601b0316115b15610b6c576001600160a01b038316156120a3576001600160a01b03831660009081526011602052604081205463ffffffff16908161202b57600061206a565b6001600160a01b0385166000908152601060209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061209182856040518060600160405280602c8152602001613af1602c913961255b565b905061209f86848484612592565b5050505b6001600160a01b03821615610b6c576001600160a01b03821660009081526011602052604081205463ffffffff1690816120de57600061211d565b6001600160a01b0384166000908152601060209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061214482856040518060600160405280602b8152602001613a8e602b9139612747565b90506119ef85848484612592565b82546040805180820190915260008082526020808301828152600180860189558884529190922092516002850290930192835590519101555b6000811180156121bb5750818460018303815481106121a657fe5b90600052602060002090600202016001015411155b15612210578360018203815481106121cf57fe5b90600052602060002090600202018482815481106121e957fe5b6000918252602090912082546002909202019081556001918201549101556000190161218b565b60405180604001604052808481526020018381525084828154811061223157fe5b9060005260206000209060020201600082015181600001556020820151816001015590505061226d838660020154611f9b90919063ffffffff16565b85600201819055505050505050565b6001600160a01b038083166000908152600f6020526040812054909116906122a384612783565b6001600160a01b038581166000818152600f602052604080822080546001600160a01b031916898616908117909155905194955093928616927f0cc323ffec3ea49cbcddc0de1480978126d350c6a45dff33ad2f1cda6ae992619190a4611f95828483611fc0565b6001015442101590565b80546000905b6000811180156123385750612338836001830381548110610cb657fe5b156123a25761236d83600183038154811061234f57fe5b6000918252602090912060029091020154839063ffffffff611f9b16565b91508280548061237957fe5b60008281526020812060001992830160028102909101828155600101919091559091550161231b565b5060028301546123b8908263ffffffff611ef816565b600284015592915050565b604051610b6c90849063a9059cbb60e01b90611f5e908690869060240161369e565b4690565b60008060006123fa87878787612876565b9150915061240781612956565b5090505b949350505050565b600081836124345760405162461bcd60e51b8152600401610584919061379c565b50600083858161244057fe5b0495945050505050565b6000818484111561246e5760405162461bcd60e51b8152600401610584919061379c565b505050900390565b612488826001600160a01b0316612a1f565b6124a45760405162461bcd60e51b8152600401610584906138fd565b60006060836001600160a01b0316836040516124c091906135a1565b6000604051808303816000865af19150503d80600081146124fd576040519150601f19603f3d011682016040523d82523d6000602084013e612502565b606091505b5091509150816125245760405162461bcd60e51b8152600401610584906138ed565b805115611f95578080602001905161253f9190810190612d58565b611f955760405162461bcd60e51b8152600401610584906137ed565b6000836001600160601b0316836001600160601b03161115829061246e5760405162461bcd60e51b8152600401610584919061379c565b60006125b643604051806060016040528060388152602001613ab960389139612a58565b905060008463ffffffff161180156125ff57506001600160a01b038516600090815260106020908152604080832063ffffffff6000198901811685529252909120548282169116145b1561265e576001600160a01b0385166000908152601060209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b038516021790556126fd565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152601083528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252601190935292909220805460018801909316929091169190911790555b846001600160a01b03167f6adb589fed1e8542fb7a6b10f00a85e02265e77f9ae3ca8ff93b22983e1af9a0848460405161273892919061398d565b60405180910390a25050505050565b6000838301826001600160601b03808716908316101561277a5760405162461bcd60e51b8152600401610584919061379c565b50949350505050565b6005546000906001600160a01b03166127ae5760405162461bcd60e51b8152600401610584906137dd565b6005546001600160a01b03166000908152600860205260408120805490915b8181101561286b5760055483546001600160a01b03909116908490839081106127f257fe5b60009182526020909120600590910201546001600160a01b03161415612863576005546001600160a01b0390811660009081526007602090815260408083208584528252808320938916835292905220600281015481546128589163ffffffff611ef816565b9450505050506117cb565b6001016127cd565b506000949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156128ad575060009050600361294d565b8460ff16601b141580156128c557508460ff16601c14155b156128d6575060009050600461294d565b6000600187878787604051600081526020016040526040516128fb9493929190613735565b6020604051602081039080840390855afa15801561291d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166129465750600091506001905061294d565b9150600090505b94509492505050565b600081600481111561296457fe5b141561296f57610acc565b600181600481111561297d57fe5b141561299b5760405162461bcd60e51b8152600401610584906137ad565b60028160048111156129a957fe5b14156129c75760405162461bcd60e51b8152600401610584906137cd565b60038160048111156129d557fe5b14156129f35760405162461bcd60e51b81526004016105849061382d565b6004816004811115612a0157fe5b1415610acc5760405162461bcd60e51b81526004016105849061384d565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061240b575050151592915050565b600081600160201b8410612a7f5760405162461bcd60e51b8152600401610584919061379c565b509192915050565b604080518082019091526000808252602082015290565b8035610f4281613a4c565b8051610f4281613a4c565b8051610f4281613a60565b8035610f4281613a69565b8035610f4281613a72565b8051610f4281613a69565b8035610f4281613a7b565b8035610f4281613a84565b600060208284031215612b0857600080fd5b600061240b8484612a9e565b600060208284031215612b2657600080fd5b600061240b8484612aa9565b60008060408385031215612b4557600080fd5b6000612b518585612a9e565b9250506020612b6285828601612a9e565b9150509250929050565b60008060408385031215612b7f57600080fd5b6000612b8b8585612a9e565b9250506020612b6285828601612abf565b600080600060608486031215612bb157600080fd5b6000612bbd8686612a9e565b9350506020612bce86828701612abf565b9250506040612bdf86828701612a9e565b9150509250925092565b600080600080600060a08688031215612c0157600080fd5b6000612c0d8888612a9e565b9550506020612c1e88828901612abf565b9450506040612c2f88828901612aca565b9350506060612c4088828901612abf565b9250506080612c5188828901612abf565b9150509295509295909350565b600080600060608486031215612c7357600080fd5b6000612c7f8686612a9e565b9350506020612c9086828701612abf565b9250506040612bdf86828701612abf565b60008060008060008060c08789031215612cba57600080fd5b6000612cc68989612a9e565b9650506020612cd789828a01612abf565b9550506040612ce889828a01612abf565b9450506060612cf989828a01612aeb565b9350506080612d0a89828a01612abf565b92505060a0612d1b89828a01612abf565b9150509295509295509295565b60008060408385031215612d3b57600080fd5b6000612d478585612a9e565b9250506020612b6285828601612ae0565b600060208284031215612d6a57600080fd5b600061240b8484612ab4565b600060208284031215612d8857600080fd5b600061240b8484612aca565b600060208284031215612da657600080fd5b600061240b8484612ad5565b6000612dbe8383613559565b505060400190565b612dcf81613a00565b82525050565b612dcf816139bb565b6000612de9826139ae565b612df381856139b2565b9350612dfe836139a8565b8060005b83811015612e2c578151612e168882612db2565b9750612e21836139a8565b925050600101612e02565b509495945050505050565b612dcf816139c6565b612dcf816139cb565b612dcf612e55826139cb565b6139cb565b6000612e65826139ae565b612e6f81856117cb565b9350612e7f818560208601613a16565b9290920192915050565b612dcf816139ce565b6000612e9d826139ae565b612ea781856139b2565b9350612eb7818560208601613a16565b612ec081613a42565b9093019392505050565b6000612ed76018836139b2565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000815260200192915050565b6000612f106013836139b2565b727661756c743a20706f6f6c206578697374733f60681b815260200192915050565b6000612f3f601f836139b2565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800815260200192915050565b6000612f786030836139b2565b7f5856535661756c743a3a6765745374616b65416d6f756e743a2078767320616481526f191c995cdcc81a5cc81b9bdd081cd95d60821b602082015260400192915050565b6000612fca602a836139b2565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b6000613016602a836139b2565b7f5856535661756c743a3a64656c656761746542795369673a207369676e6174758152691c9948195e1c1a5c995960b21b602082015260400192915050565b60006130626026836139b2565b7f5856535661756c743a3a64656c656761746542795369673a20696e76616c6964815265206e6f6e636560d01b602082015260400192915050565b60006130aa6002836117cb565b61190160f01b815260020192915050565b60006130c8601b836139b2565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006131016022836139b2565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b602082015260400192915050565b6000613145602b836139b2565b7f5856535661756c743a3a6765745072696f72566f7465733a206e6f742079657481526a0819195d195c9b5a5b995960aa1b602082015260400192915050565b60006131926022836139b2565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b602082015260400192915050565b60006131d66043836117cb565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000613241601f836139b2565b7f72657175657374656420616d6f756e742063616e6e6f74206265207a65726f00815260200192915050565b600061327a6021836139b2565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006132bd600a836139b2565b691c994b595b9d195c995960b21b815260200192915050565b60006132e36018836139b2565b7f4572726f7220706f6f6c20616c72656164792061646465640000000000000000815260200192915050565b600061331c600e836139b2565b6d37b7363c9030b236b4b71031b0b760911b815260200192915050565b6000613346601e836139b2565b7f53746f726520636f6e74726163742061646472657320697320656d7074790000815260200192915050565b600061337f6015836139b2565b7418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b815260200192915050565b60006133b06013836139b2565b726e6f7468696e6720746f20776974686472617760681b815260200192915050565b60006133df601a836139b2565b7f496e76616c6964206e6577206c6f636b696e6720706572696f64000000000000815260200192915050565b60006134186020836139b2565b7f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b6000613451603a836117cb565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206e6f6e63652c75696e7432353620657870697279290000000000006020820152603a0192915050565b60006134b0601f836139b2565b7f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b60006134e9601b836139b2565b7f72657175657374656420616d6f756e7420697320696e76616c69640000000000815260200192915050565b60006135226022836139b2565b7f6f6e6c792070726f78792061646d696e2063616e206368616e676520627261698152616e7360f01b602082015260400192915050565b8051604083019061356a8482612e40565b506020820151611f956020850182612e40565b612dcf816139e5565b612dcf816139ee565b612dcf81613a0b565b612dcf816139f4565b60006105548284612e5a565b60006135b88261309d565b91506135c48285612e49565b6020820191506135d48284612e49565b5060200192915050565b6000610f42826131c9565b6000610f4282613444565b60208101610f428284612dd5565b606081016136108286612dd5565b61361d6020830185612dc6565b61240b6040830184612e40565b608081016136388287612dd5565b6136456020830186612dd5565b6136526040830185612dd5565b61365f6060830184612dd5565b95945050505050565b606081016136768286612dd5565b61361d6020830185612dd5565b604081016136918285612dd5565b6105546020830184612e37565b604081016136ac8285612dd5565b6105546020830184612e40565b602080825281016105548184612dde565b60208101610f428284612e40565b608081016136e68287612e40565b6136f36020830186612dd5565b6137006040830185612e40565b61365f6060830184612e40565b6080810161371b8287612e40565b6137286020830186612e40565b6136526040830185612e40565b608081016137438287612e40565b6136f36020830186613586565b60a0810161375e8288612e89565b61376b6020830187612e40565b6137786040830186612e40565b6137856060830185612e40565b6137926080830184612e40565b9695505050505050565b602080825281016105548184612e92565b60208082528101610f4281612eca565b60208082528101610f4281612f03565b60208082528101610f4281612f32565b60208082528101610f4281612f6b565b60208082528101610f4281612fbd565b60208082528101610f4281613009565b60208082528101610f4281613055565b60208082528101610f42816130bb565b60208082528101610f42816130f4565b60208082528101610f4281613138565b60208082528101610f4281613185565b60208082528101610f4281613234565b60208082528101610f428161326d565b60208082528101610f42816132b0565b60208082528101610f42816132d6565b60208082528101610f428161330f565b60208082528101610f4281613339565b60208082528101610f4281613372565b60208082528101610f42816133a3565b60208082528101610f42816133d2565b60208082528101610f428161340b565b60208082528101610f42816134a3565b60208082528101610f42816134dc565b60208082528101610f4281613515565b604081016136ac8285612e40565b606081016139498286612e40565b61361d6020830185612e40565b60208101610f42828461357d565b60408101613972828561357d565b6105546020830184613598565b60208101610f428284613598565b6040810161399b828561358f565b610554602083018461358f565b60200190565b5190565b90815260200190565b6000610f42826139d9565b151590565b90565b6000610f42826139bb565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b6001600160601b031690565b6000610f42826139ce565b6000610f42826139f4565b60005b83811015613a31578181015183820152602001613a19565b83811115611f955750506000910152565b601f01601f191690565b613a55816139bb565b8114610acc57600080fd5b613a55816139c6565b613a55816139cb565b613a55816139ce565b613a55816139e5565b613a55816139ee56fe5856535661756c743a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f77735856535661756c743a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974735856535661756c743a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773a365627a7a72315820365a7bf963a9a25bf7afd45070f6a9430e50224bf8039457d6e8bba4d6e4d2ed6c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c80637ac9245611610130578063a09eab7a116100b8578063de0368b21161007c578063de0368b2146104c9578063e7a324dc146104d1578063f1127ed8146104d9578063f851a440146104fa578063fba1b1f91461050257610232565b8063a09eab7a1461045d578063b4b5ea5714610470578063c210259614610483578063c3cda520146104a3578063d7ae45e2146104b657610232565b80638ed7333d116100ff5780638ed7333d146103de57806392e35000146103f157806393c7c4d11461041557806398e1b31b146104285780639e2b6c4d1461044a57610232565b80637ac924561461039d5780637ecebe00146103b057806381bdf98c146103c35780638308d7e9146103cb57610232565b80634298bdbd116101be5780635ff56315116101825780635ff563151461032f5780636dd77cbd146103425780636e9960c3146103555780636fcfff451461035d578063782d6fe11461037d57610232565b80634298bdbd146102db5780635362b503146102ee578063587cde1e146103015780635c19a95c146103145780635c60da1b1461032757610232565b806320606b701161020557806320606b701461029b57806324f52bbf146102a357806326782247146102b85780632eda5c6c146102c0578063358ae036146102d357610232565b80630af13728146102375780630efe6a8b14610260578063115b512f146102755780631d504dc614610288575b600080fd5b61024a610245366004612b9c565b610515565b60405161025791906136ca565b60405180910390f35b61027361026e366004612c5e565b61055b565b005b610273610283366004612c5e565b6107b9565b610273610296366004612d76565b61099b565b61024a610acf565b6102ab610ae6565b60405161025791906135f4565b6102ab610af5565b61024a6102ce366004612af6565b610b04565b6102ab610b16565b61024a6102e9366004612af6565b610b25565b6102736102fc366004612af6565b610b37565b6102ab61030f366004612af6565b610b71565b610273610322366004612af6565b610b8c565b6102ab610b96565b61027361033d366004612b32565b610ba5565b61024a610350366004612b9c565b610c5d565b6102ab610d12565b61037061036b366004612af6565b610d21565b6040516102579190613956565b61039061038b366004612b6c565b610d39565b604051610257919061397f565b6102736103ab366004612b6c565b610f48565b61024a6103be366004612af6565b611167565b610273611179565b6102736103d9366004612c5e565b6111ed565b6102736103ec366004612b6c565b61134b565b6104046103ff366004612b6c565b611363565b604051610257959493929190613750565b610273610423366004612b6c565b6113b8565b61043b610436366004612b9c565b61144c565b6040516102579392919061393b565b610273610458366004612c5e565b61149e565b61024a61046b366004612b9c565b611574565b61039061047e366004612af6565b61175d565b610496610491366004612b9c565b6117d0565b60405161025791906136b9565b6102736104b1366004612ca1565b611876565b61024a6104c4366004612af6565b6119f7565b6102ab611a12565b61024a611a21565b6104ec6104e7366004612d28565b611a2d565b604051610257929190613964565b6102ab611a62565b610273610510366004612be9565b611a71565b60006105218484611cc2565b506001600160a01b0380841660009081526007602090815260408083208684528252808320938516835292905220600201545b9392505050565b600354600160a01b900460ff1661058d5760405162461bcd60e51b81526004016105849061387d565b60405180910390fd5b6003805460ff60a01b191690556105a48383611cc2565b6001600160a01b03831660009081526008602052604081208054849081106105c857fe5b600091825260208083206001600160a01b0388168452600782526040808520888652835280852033865290925292206005909102909101915061060b8585611cf9565b8054156106c0576000610658826001015461064c64e8d4a5100061064087600301548760000154611e7c90919063ffffffff16565b9063ffffffff611eb616565b9063ffffffff611ef816565b6004805460405163135b33cd60e31b81529293506001600160a01b031691639ad99e689161068c918a913391879101613602565b600060405180830381600087803b1580156106a657600080fd5b505af11580156106ba573d6000803e3d6000fd5b50505050505b81546106dd906001600160a01b031633308663ffffffff611f3a16565b80546106ef908463ffffffff611f9b16565b80825560038301546107129164e8d4a5100091610640919063ffffffff611e7c16565b600182015560055482546001600160a01b039081169116141561075357336000908152600f602052604081205461075391906001600160a01b031685611fc0565b83856001600160a01b0316336001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78660405161079791906136ca565b60405180910390a450506003805460ff60a01b1916600160a01b179055505050565b600354600160a01b900460ff166107e25760405162461bcd60e51b81526004016105849061387d565b6003805460ff60a01b191690556107f98383611cc2565b600081116108195760405162461bcd60e51b81526004016105849061385d565b6001600160a01b0383166000908152600760209081526040808320858452825280832033845290915290206002810154610859908363ffffffff611f9b16565b815410156108795760405162461bcd60e51b81526004016105849061390d565b6001600160a01b038416600090815260086020526040812080548590811061089d57fe5b600091825260208083206001600160a01b0389168452600a8252604080852089865283528085203386529092529083206005929092020160048101549093509091906108e99042611f9b565b90506108f784838784612152565b6005546001600160a01b038881169116141561093357336000908152600f6020526040812054610933916001600160a01b039091169087611fc0565b85876001600160a01b0316336001600160a01b03167fc0863fcc3a3b119da683cc8d57bce56f78d0d373c023726dea2aaf6ce3f837ac8860405161097791906136ca565b60405180910390a450506003805460ff60a01b1916600160a01b1790555050505050565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d457600080fd5b505afa1580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a0c9190810190612b14565b6001600160a01b0316336001600160a01b031614610a3c5760405162461bcd60e51b81526004016105849061391d565b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a7757600080fd5b505af1158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aaf9190810190612d94565b15610acc5760405162461bcd60e51b8152600401610584906138bd565b50565b604051610adb906135de565b604051809103902081565b6004546001600160a01b031681565b6001546001600160a01b031681565b60066020526000908152604090205481565b6005546001600160a01b031681565b60096020526000908152604090205481565b6001600160a01b038116600090815260086020526040812054905b81811015610b6c57610b648382611cf9565b600101610b52565b505050565b600f602052600090815260409020546001600160a01b031681565b610acc338261227c565b6002546001600160a01b031681565b6000546001600160a01b03163314610bcf5760405162461bcd60e51b81526004016105849061389d565b60058054600480546001600160a01b03198084166001600160a01b038881169190911790955581168585161790915560038054600160a01b60ff60a01b199091161790556040519183169216907f559f314bb90394a4a9ceb724f365b36a53587d894352c43d12901fd68010145690610c4f90849084908890889061362a565b60405180910390a150505050565b6000610c698484611cc2565b6001600160a01b038085166000908152600a60209081526040808320878452825280832093861683529290522080545b600081118015610cc95750610cc9826001830381548110610cb657fe5b906000526020600020906002020161230b565b15610d0957610cfe826001830381548110610ce057fe5b6000918252602090912060029091020154849063ffffffff611f9b16565b925060001901610c99565b50509392505050565b6000546001600160a01b031690565b60116020526000908152604090205463ffffffff1681565b6000438210610d5a5760405162461bcd60e51b81526004016105849061383d565b6001600160a01b03831660009081526011602052604090205463ffffffff1680610d88576000915050610f42565b6001600160a01b038416600090815260106020908152604080832063ffffffff600019860181168552925290912054168310610e04576001600160a01b03841660009081526010602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b03169050610f42565b6001600160a01b038416600090815260106020908152604080832083805290915290205463ffffffff16831015610e3f576000915050610f42565b600060001982015b8163ffffffff168163ffffffff161115610f0257600282820363ffffffff16048103610e71612a87565b506001600160a01b038716600090815260106020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415610edd57602001519450610f429350505050565b805163ffffffff16871115610ef457819350610efb565b6001820392505b5050610e47565b506001600160a01b038516600090815260106020908152604080832063ffffffff909416835292905220546001600160601b03600160201b909104169150505b92915050565b600354600160a01b900460ff16610f715760405162461bcd60e51b81526004016105849061387d565b6003805460ff60a01b19169055610f888282611cc2565b6001600160a01b0382166000908152600860205260408120805483908110610fac57fe5b600091825260208083206001600160a01b038716808552600783526040808620888752845280862033808852908552818720928752600a8552818720898852855281872090875290935291842060059093020193509161100c8383612315565b90506000811161102e5760405162461bcd60e51b8152600401610584906138cd565b6110388686611cf9565b6000611066846001015461064c64e8d4a5100061064089600301548960000154611e7c90919063ffffffff16565b6004805460405163135b33cd60e31b81529293506001600160a01b031691639ad99e689161109a918b913391879101613602565b600060405180830381600087803b1580156110b457600080fd5b505af11580156110c8573d6000803e3d6000fd5b505085546110df925090508363ffffffff611ef816565b80855560038601546111029164e8d4a5100091610640919063ffffffff611e7c16565b60018501558454611123906001600160a01b0316338463ffffffff6123c316565b85876001600160a01b0316336001600160a01b03167fe31da05fae6db869f5ea51f4b638aa6884070b6c87f18f63bd2291a12cb2f5188560405161097791906136ca565b600e6020526000908152604090205481565b6000546001600160a01b031633146111a35760405162461bcd60e51b81526004016105849061389d565b600080546040516001600160a01b03909116907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146112175760405162461bcd60e51b81526004016105849061389d565b6112218383611cc2565b61122a83610b37565b6001600160a01b038316600090815260086020526040902080546112a09083906112949084908790811061125a57fe5b60009182526020808320600160059093020191909101546001600160a01b038a16835260099091526040909120549063ffffffff611ef816565b9063ffffffff611f9b16565b6001600160a01b03851660009081526009602052604081209190915581548290859081106112ca57fe5b9060005260206000209060050201600101549050828285815481106112eb57fe5b90600052602060002090600502016001018190555083856001600160a01b03167f6ee09c6cb801194690c195c69f465aaf7c80255cbeafaab9600f47ed79de2ca9838660405161133c92919061392d565b60405180910390a35050505050565b6113558282611cc2565b61135f8282611cf9565b5050565b6008602052816000526040600020818154811061137c57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039093169550909350919085565b6000546001600160a01b031633146113e25760405162461bcd60e51b81526004016105849061389d565b6113eb82610b37565b6001600160a01b0382166000818152600660205260409081902080549084905590519091907fad96cee0d692f0250b98e085504f399da6733854908215f6203fe3c69366d9f59061143f908490869061392d565b60405180910390a2505050565b600080600061145b8686611cc2565b5050506001600160a01b03928316600090815260076020908152604080832094835293815283822092909416815292529020805460018201546002909201549092565b6000546001600160a01b031633146114c85760405162461bcd60e51b81526004016105849061389d565b6114d28383611cc2565b600081116114f25760405162461bcd60e51b8152600401610584906138dd565b6001600160a01b038316600090815260086020526040812080548490811061151657fe5b9060005260206000209060050201905060008160040154905082826004018190555083856001600160a01b03167f0bcf80c5060ccf99b7a993c57a94b232fc2c5c04bd74c7c7d174595fee6bc31f838660405161133c92919061392d565b60006115808484611cc2565b6001600160a01b03841660009081526008602052604081208054859081106115a457fe5b600091825260208083206001600160a01b0389811685526007835260408086208a8752845280862089831687529093528285206005949094029091016003810154815493516370a0823160e01b8152919650939492909116906370a08231906116119030906004016135f4565b60206040518083038186803b15801561162957600080fd5b505afa15801561163d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116619190810190612d94565b6001600160a01b038916600090815260066020526040902054600286015491925043918211801561169157508215155b156117275760006116af876002015484611ef890919063ffffffff16565b6001600160a01b038c1660009081526009602052604081205460018a015492935090916116f79190610640906116eb868863ffffffff611e7c16565b9063ffffffff611e7c16565b9050611722611715866106408464e8d4a5100063ffffffff611e7c16565b879063ffffffff611f9b16565b955050505b61174f856001015461064c64e8d4a51000610640888a60000154611e7c90919063ffffffff16565b9a9950505050505050505050565b6001600160a01b03811660009081526011602052604081205463ffffffff16806117885760006117c7565b6001600160a01b0383166000908152601060209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9150505b919050565b60606117dc8484611cc2565b6001600160a01b038085166000908152600a602090815260408083208784528252808320938616835292815282822080548451818402810184019095528085529092909184015b8282101561186957838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190611823565b5050505090509392505050565b6000604051611884906135de565b604080519182900382208282019091526008825267161594d5985d5b1d60c21b6020909201919091527fddfcc46608a8bd52ebf900f03a24cc97b73a6046cec8c5d0f74a211e376e967a6118d66123e5565b306040516020016118ea949392919061370d565b6040516020818303038152906040528051906020012090506000604051611910906135e9565b60405190819003812061192b918a908a908a906020016136d8565b604051602081830303815290604052805190602001209050600082826040516020016119589291906135ad565b604051602081830303815290604052805190602001209050600061197e828888886123e9565b6001600160a01b0381166000908152600e6020526040902080546001810190915590915089146119c05760405162461bcd60e51b81526004016105849061380d565b874211156119e05760405162461bcd60e51b8152600401610584906137fd565b6119ea818b61227c565b505050505b505050505050565b6001600160a01b031660009081526008602052604090205490565b6003546001600160a01b031681565b604051610adb906135e9565b601060209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6000546001600160a01b031681565b6000546001600160a01b03163314611a9b5760405162461bcd60e51b81526004016105849061389d565b6004546001600160a01b0316611ac35760405162461bcd60e51b8152600401610584906138ad565b611acc85610b37565b6001600160a01b0385166000908152600860205260408120805490915b81811015611b4757856001600160a01b0316838281548110611b0757fe5b60009182526020909120600590910201546001600160a01b03161415611b3f5760405162461bcd60e51b81526004016105849061388d565b600101611ae9565b506001600160a01b038716600090815260096020526040902054611b71908763ffffffff611f9b16565b6001600160a01b0388811660009081526009602090815260408083209490945560068152838220889055835160a08101855289841681528082018b81524382870190815260608301858152608084018b81528a5460018082018d558c8952969097209451600590970290940180546001600160a01b031916968816969096178655915185850155516002850155516003840155516004928301558154935163fb66fb4d60e01b8152939092169263fb66fb4d92611c30928c9201613683565b600060405180830381600087803b158015611c4a57600080fd5b505af1158015611c5e573d6000803e3d6000fd5b50505050846001600160a01b03166001838054905003886001600160a01b03167fd7fa4bff1cd2253c0789c3291a786a6f6b1a3b4569a75af683a15d52abb6a0bf898888604051611cb19392919061393b565b60405180910390a450505050505050565b6001600160a01b038216600090815260086020526040902054811061135f5760405162461bcd60e51b8152600401610584906137bd565b6001600160a01b0382166000908152600860205260408120805483908110611d1d57fe5b9060005260206000209060050201905080600201544311611d3e575061135f565b80546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611d6e9030906004016135f4565b60206040518083038186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dbe9190810190612d94565b905080611dd257504360029091015561135f565b60028201544390600090611ded90839063ffffffff611ef816565b6001600160a01b03871660009081526009602090815260408083205460018901546006909352908320549394509192611e369291610640916116eb90879063ffffffff611e7c16565b9050611e65611e54856106408464e8d4a5100063ffffffff611e7c16565b60038701549063ffffffff611f9b16565b600386015550504360029093019290925550505050565b600082611e8b57506000610f42565b82820282848281611e9857fe5b04146105545760405162461bcd60e51b81526004016105849061386d565b600061055483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612413565b600061055483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061244a565b604051611f959085906323b872dd60e01b90611f5e90879087908790602401613668565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612476565b50505050565b6000828201838110156105545760405162461bcd60e51b81526004016105849061381d565b816001600160a01b0316836001600160a01b031614158015611feb57506000816001600160601b0316115b15610b6c576001600160a01b038316156120a3576001600160a01b03831660009081526011602052604081205463ffffffff16908161202b57600061206a565b6001600160a01b0385166000908152601060209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061209182856040518060600160405280602c8152602001613af1602c913961255b565b905061209f86848484612592565b5050505b6001600160a01b03821615610b6c576001600160a01b03821660009081526011602052604081205463ffffffff1690816120de57600061211d565b6001600160a01b0384166000908152601060209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061214482856040518060600160405280602b8152602001613a8e602b9139612747565b90506119ef85848484612592565b82546040805180820190915260008082526020808301828152600180860189558884529190922092516002850290930192835590519101555b6000811180156121bb5750818460018303815481106121a657fe5b90600052602060002090600202016001015411155b15612210578360018203815481106121cf57fe5b90600052602060002090600202018482815481106121e957fe5b6000918252602090912082546002909202019081556001918201549101556000190161218b565b60405180604001604052808481526020018381525084828154811061223157fe5b9060005260206000209060020201600082015181600001556020820151816001015590505061226d838660020154611f9b90919063ffffffff16565b85600201819055505050505050565b6001600160a01b038083166000908152600f6020526040812054909116906122a384612783565b6001600160a01b038581166000818152600f602052604080822080546001600160a01b031916898616908117909155905194955093928616927f0cc323ffec3ea49cbcddc0de1480978126d350c6a45dff33ad2f1cda6ae992619190a4611f95828483611fc0565b6001015442101590565b80546000905b6000811180156123385750612338836001830381548110610cb657fe5b156123a25761236d83600183038154811061234f57fe5b6000918252602090912060029091020154839063ffffffff611f9b16565b91508280548061237957fe5b60008281526020812060001992830160028102909101828155600101919091559091550161231b565b5060028301546123b8908263ffffffff611ef816565b600284015592915050565b604051610b6c90849063a9059cbb60e01b90611f5e908690869060240161369e565b4690565b60008060006123fa87878787612876565b9150915061240781612956565b5090505b949350505050565b600081836124345760405162461bcd60e51b8152600401610584919061379c565b50600083858161244057fe5b0495945050505050565b6000818484111561246e5760405162461bcd60e51b8152600401610584919061379c565b505050900390565b612488826001600160a01b0316612a1f565b6124a45760405162461bcd60e51b8152600401610584906138fd565b60006060836001600160a01b0316836040516124c091906135a1565b6000604051808303816000865af19150503d80600081146124fd576040519150601f19603f3d011682016040523d82523d6000602084013e612502565b606091505b5091509150816125245760405162461bcd60e51b8152600401610584906138ed565b805115611f95578080602001905161253f9190810190612d58565b611f955760405162461bcd60e51b8152600401610584906137ed565b6000836001600160601b0316836001600160601b03161115829061246e5760405162461bcd60e51b8152600401610584919061379c565b60006125b643604051806060016040528060388152602001613ab960389139612a58565b905060008463ffffffff161180156125ff57506001600160a01b038516600090815260106020908152604080832063ffffffff6000198901811685529252909120548282169116145b1561265e576001600160a01b0385166000908152601060209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b038516021790556126fd565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152601083528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252601190935292909220805460018801909316929091169190911790555b846001600160a01b03167f6adb589fed1e8542fb7a6b10f00a85e02265e77f9ae3ca8ff93b22983e1af9a0848460405161273892919061398d565b60405180910390a25050505050565b6000838301826001600160601b03808716908316101561277a5760405162461bcd60e51b8152600401610584919061379c565b50949350505050565b6005546000906001600160a01b03166127ae5760405162461bcd60e51b8152600401610584906137dd565b6005546001600160a01b03166000908152600860205260408120805490915b8181101561286b5760055483546001600160a01b03909116908490839081106127f257fe5b60009182526020909120600590910201546001600160a01b03161415612863576005546001600160a01b0390811660009081526007602090815260408083208584528252808320938916835292905220600281015481546128589163ffffffff611ef816565b9450505050506117cb565b6001016127cd565b506000949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156128ad575060009050600361294d565b8460ff16601b141580156128c557508460ff16601c14155b156128d6575060009050600461294d565b6000600187878787604051600081526020016040526040516128fb9493929190613735565b6020604051602081039080840390855afa15801561291d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166129465750600091506001905061294d565b9150600090505b94509492505050565b600081600481111561296457fe5b141561296f57610acc565b600181600481111561297d57fe5b141561299b5760405162461bcd60e51b8152600401610584906137ad565b60028160048111156129a957fe5b14156129c75760405162461bcd60e51b8152600401610584906137cd565b60038160048111156129d557fe5b14156129f35760405162461bcd60e51b81526004016105849061382d565b6004816004811115612a0157fe5b1415610acc5760405162461bcd60e51b81526004016105849061384d565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061240b575050151592915050565b600081600160201b8410612a7f5760405162461bcd60e51b8152600401610584919061379c565b509192915050565b604080518082019091526000808252602082015290565b8035610f4281613a4c565b8051610f4281613a4c565b8051610f4281613a60565b8035610f4281613a69565b8035610f4281613a72565b8051610f4281613a69565b8035610f4281613a7b565b8035610f4281613a84565b600060208284031215612b0857600080fd5b600061240b8484612a9e565b600060208284031215612b2657600080fd5b600061240b8484612aa9565b60008060408385031215612b4557600080fd5b6000612b518585612a9e565b9250506020612b6285828601612a9e565b9150509250929050565b60008060408385031215612b7f57600080fd5b6000612b8b8585612a9e565b9250506020612b6285828601612abf565b600080600060608486031215612bb157600080fd5b6000612bbd8686612a9e565b9350506020612bce86828701612abf565b9250506040612bdf86828701612a9e565b9150509250925092565b600080600080600060a08688031215612c0157600080fd5b6000612c0d8888612a9e565b9550506020612c1e88828901612abf565b9450506040612c2f88828901612aca565b9350506060612c4088828901612abf565b9250506080612c5188828901612abf565b9150509295509295909350565b600080600060608486031215612c7357600080fd5b6000612c7f8686612a9e565b9350506020612c9086828701612abf565b9250506040612bdf86828701612abf565b60008060008060008060c08789031215612cba57600080fd5b6000612cc68989612a9e565b9650506020612cd789828a01612abf565b9550506040612ce889828a01612abf565b9450506060612cf989828a01612aeb565b9350506080612d0a89828a01612abf565b92505060a0612d1b89828a01612abf565b9150509295509295509295565b60008060408385031215612d3b57600080fd5b6000612d478585612a9e565b9250506020612b6285828601612ae0565b600060208284031215612d6a57600080fd5b600061240b8484612ab4565b600060208284031215612d8857600080fd5b600061240b8484612aca565b600060208284031215612da657600080fd5b600061240b8484612ad5565b6000612dbe8383613559565b505060400190565b612dcf81613a00565b82525050565b612dcf816139bb565b6000612de9826139ae565b612df381856139b2565b9350612dfe836139a8565b8060005b83811015612e2c578151612e168882612db2565b9750612e21836139a8565b925050600101612e02565b509495945050505050565b612dcf816139c6565b612dcf816139cb565b612dcf612e55826139cb565b6139cb565b6000612e65826139ae565b612e6f81856117cb565b9350612e7f818560208601613a16565b9290920192915050565b612dcf816139ce565b6000612e9d826139ae565b612ea781856139b2565b9350612eb7818560208601613a16565b612ec081613a42565b9093019392505050565b6000612ed76018836139b2565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000815260200192915050565b6000612f106013836139b2565b727661756c743a20706f6f6c206578697374733f60681b815260200192915050565b6000612f3f601f836139b2565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800815260200192915050565b6000612f786030836139b2565b7f5856535661756c743a3a6765745374616b65416d6f756e743a2078767320616481526f191c995cdcc81a5cc81b9bdd081cd95d60821b602082015260400192915050565b6000612fca602a836139b2565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b6000613016602a836139b2565b7f5856535661756c743a3a64656c656761746542795369673a207369676e6174758152691c9948195e1c1a5c995960b21b602082015260400192915050565b60006130626026836139b2565b7f5856535661756c743a3a64656c656761746542795369673a20696e76616c6964815265206e6f6e636560d01b602082015260400192915050565b60006130aa6002836117cb565b61190160f01b815260020192915050565b60006130c8601b836139b2565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006131016022836139b2565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b602082015260400192915050565b6000613145602b836139b2565b7f5856535661756c743a3a6765745072696f72566f7465733a206e6f742079657481526a0819195d195c9b5a5b995960aa1b602082015260400192915050565b60006131926022836139b2565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b602082015260400192915050565b60006131d66043836117cb565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000613241601f836139b2565b7f72657175657374656420616d6f756e742063616e6e6f74206265207a65726f00815260200192915050565b600061327a6021836139b2565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006132bd600a836139b2565b691c994b595b9d195c995960b21b815260200192915050565b60006132e36018836139b2565b7f4572726f7220706f6f6c20616c72656164792061646465640000000000000000815260200192915050565b600061331c600e836139b2565b6d37b7363c9030b236b4b71031b0b760911b815260200192915050565b6000613346601e836139b2565b7f53746f726520636f6e74726163742061646472657320697320656d7074790000815260200192915050565b600061337f6015836139b2565b7418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b815260200192915050565b60006133b06013836139b2565b726e6f7468696e6720746f20776974686472617760681b815260200192915050565b60006133df601a836139b2565b7f496e76616c6964206e6577206c6f636b696e6720706572696f64000000000000815260200192915050565b60006134186020836139b2565b7f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b6000613451603a836117cb565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206e6f6e63652c75696e7432353620657870697279290000000000006020820152603a0192915050565b60006134b0601f836139b2565b7f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b60006134e9601b836139b2565b7f72657175657374656420616d6f756e7420697320696e76616c69640000000000815260200192915050565b60006135226022836139b2565b7f6f6e6c792070726f78792061646d696e2063616e206368616e676520627261698152616e7360f01b602082015260400192915050565b8051604083019061356a8482612e40565b506020820151611f956020850182612e40565b612dcf816139e5565b612dcf816139ee565b612dcf81613a0b565b612dcf816139f4565b60006105548284612e5a565b60006135b88261309d565b91506135c48285612e49565b6020820191506135d48284612e49565b5060200192915050565b6000610f42826131c9565b6000610f4282613444565b60208101610f428284612dd5565b606081016136108286612dd5565b61361d6020830185612dc6565b61240b6040830184612e40565b608081016136388287612dd5565b6136456020830186612dd5565b6136526040830185612dd5565b61365f6060830184612dd5565b95945050505050565b606081016136768286612dd5565b61361d6020830185612dd5565b604081016136918285612dd5565b6105546020830184612e37565b604081016136ac8285612dd5565b6105546020830184612e40565b602080825281016105548184612dde565b60208101610f428284612e40565b608081016136e68287612e40565b6136f36020830186612dd5565b6137006040830185612e40565b61365f6060830184612e40565b6080810161371b8287612e40565b6137286020830186612e40565b6136526040830185612e40565b608081016137438287612e40565b6136f36020830186613586565b60a0810161375e8288612e89565b61376b6020830187612e40565b6137786040830186612e40565b6137856060830185612e40565b6137926080830184612e40565b9695505050505050565b602080825281016105548184612e92565b60208082528101610f4281612eca565b60208082528101610f4281612f03565b60208082528101610f4281612f32565b60208082528101610f4281612f6b565b60208082528101610f4281612fbd565b60208082528101610f4281613009565b60208082528101610f4281613055565b60208082528101610f42816130bb565b60208082528101610f42816130f4565b60208082528101610f4281613138565b60208082528101610f4281613185565b60208082528101610f4281613234565b60208082528101610f428161326d565b60208082528101610f42816132b0565b60208082528101610f42816132d6565b60208082528101610f428161330f565b60208082528101610f4281613339565b60208082528101610f4281613372565b60208082528101610f42816133a3565b60208082528101610f42816133d2565b60208082528101610f428161340b565b60208082528101610f42816134a3565b60208082528101610f42816134dc565b60208082528101610f4281613515565b604081016136ac8285612e40565b606081016139498286612e40565b61361d6020830185612e40565b60208101610f42828461357d565b60408101613972828561357d565b6105546020830184613598565b60208101610f428284613598565b6040810161399b828561358f565b610554602083018461358f565b60200190565b5190565b90815260200190565b6000610f42826139d9565b151590565b90565b6000610f42826139bb565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b6001600160601b031690565b6000610f42826139ce565b6000610f42826139f4565b60005b83811015613a31578181015183820152602001613a19565b83811115611f955750506000910152565b601f01601f191690565b613a55816139bb565b8114610acc57600080fd5b613a55816139c6565b613a55816139cb565b613a55816139ce565b613a55816139e5565b613a55816139ee56fe5856535661756c743a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f77735856535661756c743a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d626572206578636565647320333220626974735856535661756c743a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773a365627a7a72315820365a7bf963a9a25bf7afd45070f6a9430e50224bf8039457d6e8bba4d6e4d2ed6c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "methods": {
      "add(address,uint256,address,uint256,uint256)": {
        "details": "This vault DOES NOT support deflationary tokens — it expects that  the amount of transferred tokens would equal the actually deposited  amount. In practice this means that this vault DOES NOT support USDT  and similar tokens (that do not provide these guarantees)."
      },
      "burnAdmin()": {
        "details": "Burn the current admin"
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "deposit(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to deposit to vault",
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address"
        }
      },
      "executeWithdrawal(address,uint256)": {
        "params": {
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address"
        }
      },
      "getAdmin()": {
        "details": "Returns the address of the current admin"
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "return": "The number of current votes for `account`"
      },
      "getEligibleWithdrawalAmount(address,uint256,address)": {
        "params": {
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address",
          "_user": "The User Address"
        }
      },
      "getPriorVotes(address,uint256)": {
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "return": "The balance that user staked"
      },
      "getRequestedAmount(address,uint256,address)": {
        "params": {
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address",
          "_user": "The User Address"
        }
      },
      "getWithdrawalRequests(address,uint256,address)": {
        "params": {
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address",
          "_user": "The User Address"
        }
      },
      "requestWithdrawal(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to withdraw to vault",
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "_become(address)": {
        "notice": "* Admin Functions **"
      },
      "add(address,uint256,address,uint256,uint256)": {
        "notice": "Add a new token pool. Can only be called by the admin."
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "deposit(address,uint256,uint256)": {
        "notice": "Deposit XVSVault for XVS allocation"
      },
      "executeWithdrawal(address,uint256)": {
        "notice": "Execute withdrawal to XVSVault for XVS allocation"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getEligibleWithdrawalAmount(address,uint256,address)": {
        "notice": "Get unlocked withdrawal amount"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the xvs stake balance for an account"
      },
      "getRequestedAmount(address,uint256,address)": {
        "notice": "Get requested amount"
      },
      "getWithdrawalRequests(address,uint256,address)": {
        "notice": "Returns the array of withdrawal requests that have not been executed yet"
      },
      "requestWithdrawal(address,uint256,uint256)": {
        "notice": "Request withdrawal to XVSVault for XVS allocation"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 51398,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 51400,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 51402,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 51404,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "pendingXVSVaultImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 51409,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "_notEntered",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 51411,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "xvsStore",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 51413,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "xvsAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 51417,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "rewardTokenAmountsPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 51448,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "userInfos",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)51424_storage)))"
      },
      {
        "astId": 51453,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "poolInfos",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_struct(PoolInfo)51435_storage)dyn_storage)"
      },
      {
        "astId": 51457,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "totalAllocPoints",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 51466,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "withdrawalRequests",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(WithdrawalRequest)51440_storage)dyn_storage)))"
      },
      {
        "astId": 51470,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "__oldDelegatesSlot",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 51481,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "__oldCheckpointsSlot",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)51475_storage))"
      },
      {
        "astId": 51485,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "__oldNumCheckpointsSlot",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 51489,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "nonces",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 51506,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "delegates",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 51512,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "checkpoints",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)51475_storage))"
      },
      {
        "astId": 51516,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)51435_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)51435_storage",
        "encoding": "dynamic_array",
        "label": "struct XVSVaultStorageV1.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WithdrawalRequest)51440_storage)dyn_storage": {
        "base": "t_struct(WithdrawalRequest)51440_storage",
        "encoding": "dynamic_array",
        "label": "struct XVSVaultStorageV1.WithdrawalRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBEP20)34287": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(PoolInfo)51435_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct XVSVaultStorageV1.PoolInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PoolInfo)51435_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)51440_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct XVSVaultStorageV1.WithdrawalRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(WithdrawalRequest)51440_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(WithdrawalRequest)51440_storage)dyn_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => struct XVSVaultStorageV1.WithdrawalRequest[])))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(WithdrawalRequest)51440_storage)dyn_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)51424_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => struct XVSVaultStorageV1.UserInfo)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)51424_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)51475_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct XVSVaultStorageV1.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)51475_storage)"
      },
      "t_mapping(t_address,t_struct(UserInfo)51424_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct XVSVaultStorageV1.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)51424_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(WithdrawalRequest)51440_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct XVSVaultStorageV1.WithdrawalRequest[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)51440_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)51424_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct XVSVaultStorageV1.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)51424_storage)"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)51475_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct XVSVaultStorageV1.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)51475_storage"
      },
      "t_struct(Checkpoint)51475_storage": {
        "encoding": "inplace",
        "label": "struct XVSVaultStorageV1.Checkpoint",
        "members": [
          {
            "astId": 51472,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 51474,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)51435_storage": {
        "encoding": "inplace",
        "label": "struct XVSVaultStorageV1.PoolInfo",
        "members": [
          {
            "astId": 51426,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBEP20)34287"
          },
          {
            "astId": 51428,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 51430,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 51432,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 51434,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "lockPeriod",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)51424_storage": {
        "encoding": "inplace",
        "label": "struct XVSVaultStorageV1.UserInfo",
        "members": [
          {
            "astId": 51419,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 51421,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 51423,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "pendingWithdrawals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(WithdrawalRequest)51440_storage": {
        "encoding": "inplace",
        "label": "struct XVSVaultStorageV1.WithdrawalRequest",
        "members": [
          {
            "astId": 51437,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 51439,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}