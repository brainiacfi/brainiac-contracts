{
  "address": "0x64aa1cD85DC61924D6bF05590149FaF28E76701A",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionStartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionEndTime",
          "type": "uint256"
        }
      ],
      "name": "ConversionInfoSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "reedeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vrtAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vrtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "xvsAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "xvsAmount",
          "type": "uint256"
        }
      ],
      "name": "TokenConverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "xvsVestingAddress",
          "type": "address"
        }
      ],
      "name": "XVSVestingSet",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DEAD_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VRTConverterProxy",
          "name": "vrtConverterProxy",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_notEntered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "conversionEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "conversionPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "conversionRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "conversionStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vrtAmount",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrtAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xvsAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_conversionRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_conversionStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_conversionPeriod",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isConversionActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_xvsVestingAddress",
          "type": "address"
        }
      ],
      "name": "setXVSVesting",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalVrtConverted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vrt",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vrtDecimalsMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvs",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvsDecimalsMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvsVesting",
      "outputs": [
        {
          "internalType": "contract IXVSVesting",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xec94f15daeedcfe2f1c9d58cf3aab119279ca360d212cd554cf768924fc3ef4a",
  "receipt": {
    "to": null,
    "from": "0x9E109d68A7e245d5a1D2e2E8e6BD4230A777a70B",
    "contractAddress": "0x64aa1cD85DC61924D6bF05590149FaF28E76701A",
    "transactionIndex": 6,
    "gasUsed": "1021143",
    "logsBloom": "0x
    "blockHash": "0xed954c4249ef7f957ed8707e76714504d0df7438f46601615159f4a3e89c4542",
    "transactionHash": "0xec94f15daeedcfe2f1c9d58cf3aab119279ca360d212cd554cf768924fc3ef4a",
    "logs": [],
    "blockNumber": 19219057,
    "cumulativeGasUsed": "1517413",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b37497c5b1f763df37ae9c22af67abad",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionEndTime\",\"type\":\"uint256\"}],\"name\":\"ConversionInfoSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reedeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrtAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vrtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xvsAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xvsAmount\",\"type\":\"uint256\"}],\"name\":\"TokenConverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"xvsVestingAddress\",\"type\":\"address\"}],\"name\":\"XVSVestingSet\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VRTConverterProxy\",\"name\":\"vrtConverterProxy\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_notEntered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vrtAmount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xvsAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_conversionRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_conversionStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_conversionPeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConversionActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xvsVestingAddress\",\"type\":\"address\"}],\"name\":\"setXVSVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVrtConverted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vrt\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vrtDecimalsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvs\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvsDecimalsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvsVesting\",\"outputs\":[{\"internalType\":\"contract IXVSVesting\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"methods\":{\"convert(uint256)\":{\"details\":\"Note: If there is not enough XVS, we do not perform the conversion.\",\"params\":{\"vrtAmount\":\"The amount of VRT\"}},\"setXVSVesting(address)\":{\"details\":\"Note: If XVSVestingProxy is not set, then Conversion is not allowed\",\"params\":{\"_xvsVestingAddress\":\"The XVSVestingProxy Address\"}}},\"title\":\"Venus's VRTConversion Contract\"},\"userdoc\":{\"methods\":{\"_become(address)\":{\"notice\":\"* Admin Functions **\"},\"convert(uint256)\":{\"notice\":\"Transfer VRT and redeem XVS\"},\"setXVSVesting(address)\":{\"notice\":\"sets XVSVestingProxy Address\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/VRT/VRTConverter.sol\":\"VRTConverter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-call-value\\r\\n        // solium-disable-next-line security/no-call-value\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9d1fa802b90f8ac9339ec8e17d54793c42b6f6b5111832143cdf79762f577ec8\"},\"contracts/Utils/IBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {BEP20Detailed}.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3a8f9954c8785aace7fde96102415fa4de1970920315652e3496b1c2b8dd965\"},\"contracts/Utils/SafeBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for BEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeBEP20: decreased allowance below zero\\\");\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeBEP20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeBEP20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x80a537e0bfa50067c3ef015f49aceb4e4ce30ae3069d40977aaa95911916224d\"},\"contracts/Utils/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb295b448107f6adee6c0861eba7cd58983eeb1a2bf9cd24b3df9c75fe17db75\"},\"contracts/VRT/IXVSVesting.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ninterface IXVSVesting {\\r\\n\\r\\n    /// @param _recipient Address of the Vesting. recipient entitled to claim the vested funds\\r\\n    /// @param _amount Total number of tokens Vested\\r\\n    function deposit(address _recipient, uint256 _amount) external;\\r\\n}\",\"keccak256\":\"0x21a9bfcfdbd8626171eab51ce22835b086e7ed47c19fdfefa00dbe690fd54df2\"},\"contracts/VRT/VRTConverter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"../Utils/IBEP20.sol\\\";\\r\\nimport \\\"../Utils/SafeBEP20.sol\\\";\\r\\nimport \\\"./IXVSVesting.sol\\\";\\r\\nimport \\\"./VRTConverterStorage.sol\\\";\\r\\nimport \\\"./VRTConverterProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Venus's VRTConversion Contract\\r\\n * @author Venus\\r\\n */\\r\\ncontract VRTConverter is VRTConverterStorage {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    address public constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    /// @notice decimal precision for VRT\\r\\n    uint256 public constant vrtDecimalsMultiplier = 1e18;\\r\\n\\r\\n    /// @notice decimal precision for XVS\\r\\n    uint256 public constant xvsDecimalsMultiplier = 1e18;\\r\\n\\r\\n    /// @notice Emitted when an admin set conversion info\\r\\n    event ConversionInfoSet(uint256 conversionRatio, uint256 conversionStartTime, uint256 conversionPeriod, uint256 conversionEndTime);\\r\\n\\r\\n    /// @notice Emitted when token conversion is done\\r\\n    event TokenConverted(address reedeemer, address vrtAddress, uint256 vrtAmount, address xvsAddress, uint256 xvsAmount);\\r\\n\\r\\n    /// @notice Emitted when an admin withdraw converted token\\r\\n    event TokenWithdraw(address token, address to, uint256 amount);\\r\\n\\r\\n    /// @notice Emitted when XVSVestingAddress is set\\r\\n    event XVSVestingSet(address xvsVestingAddress);\\r\\n\\r\\n    constructor() public {}\\r\\n\\r\\n    function initialize(address _vrtAddress,\\r\\n                address _xvsAddress,\\r\\n                uint256 _conversionRatio,\\r\\n                uint256 _conversionStartTime,\\r\\n                uint256 _conversionPeriod) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the VRTConverter\\\");\\r\\n        require(initialized == false, \\\"VRTConverter is already initialized\\\");\\r\\n\\r\\n        require(_vrtAddress != address(0), \\\"vrtAddress cannot be Zero\\\");\\r\\n        vrt = IBEP20(_vrtAddress);\\r\\n        \\r\\n        require(_xvsAddress != address(0), \\\"xvsAddress cannot be Zero\\\");\\r\\n        xvs = IBEP20(_xvsAddress);\\r\\n        \\r\\n        require(_conversionRatio > 0, \\\"conversionRatio cannot be Zero\\\");\\r\\n        conversionRatio = _conversionRatio;\\r\\n\\r\\n        require(_conversionStartTime >= block.timestamp, \\\"conversionStartTime must be time in the future\\\");\\r\\n        require(_conversionPeriod > 0, \\\"_conversionPeriod is invalid\\\");\\r\\n\\r\\n        conversionStartTime = _conversionStartTime;\\r\\n        conversionPeriod = _conversionPeriod;\\r\\n        conversionEndTime = conversionStartTime.add(conversionPeriod);\\r\\n        emit ConversionInfoSet(conversionRatio, conversionStartTime, conversionPeriod, conversionEndTime);\\r\\n        \\r\\n        totalVrtConverted = 0;\\r\\n        _notEntered = true;\\r\\n        initialized = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice sets XVSVestingProxy Address\\r\\n     * @dev Note: If XVSVestingProxy is not set, then Conversion is not allowed\\r\\n     * @param _xvsVestingAddress The XVSVestingProxy Address\\r\\n     */\\r\\n    function setXVSVesting(address _xvsVestingAddress) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the Vault\\\");\\r\\n        require(_xvsVestingAddress != address(0), \\\"xvsVestingAddress cannot be Zero\\\");\\r\\n        xvsVesting = IXVSVesting(_xvsVestingAddress);\\r\\n        emit XVSVestingSet(_xvsVestingAddress);\\r\\n    }\\r\\n\\r\\n    modifier isInitialized() {\\r\\n        require(initialized == true, \\\"VRTConverter is not initialized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isConversionActive() public view returns(bool) {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        if(currentTime >= conversionStartTime && currentTime <= conversionEndTime){\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    modifier checkForActiveConversionPeriod(){\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        require(currentTime >= conversionStartTime, \\\"Conversion did not start yet\\\");\\r\\n        require(currentTime <= conversionEndTime, \\\"Conversion Period Ended\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"only admin can\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier nonZeroAddress(address _address) {\\r\\n        require(_address != address(0), \\\"Address cannot be Zero\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer VRT and redeem XVS\\r\\n     * @dev Note: If there is not enough XVS, we do not perform the conversion.\\r\\n     * @param vrtAmount The amount of VRT\\r\\n     */\\r\\n    function convert(uint256 vrtAmount) external isInitialized checkForActiveConversionPeriod nonReentrant\\r\\n    {\\r\\n        require(address(xvsVesting) != address(0) && address(xvsVesting) != DEAD_ADDRESS, \\\"XVS-Vesting Address is not set\\\");\\r\\n        require(vrtAmount > 0, \\\"VRT amount must be non-zero\\\");\\r\\n        totalVrtConverted = totalVrtConverted.add(vrtAmount);\\r\\n\\r\\n        uint256 redeemAmount = vrtAmount\\r\\n            .mul(conversionRatio)\\r\\n            .mul(xvsDecimalsMultiplier)\\r\\n            .div(1e18)\\r\\n            .div(vrtDecimalsMultiplier);\\r\\n\\r\\n        emit TokenConverted(msg.sender, address(vrt), vrtAmount, address(xvs), redeemAmount);\\r\\n        vrt.safeTransferFrom(msg.sender, DEAD_ADDRESS, vrtAmount);\\r\\n        xvsVesting.deposit(msg.sender, redeemAmount);\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _become(VRTConverterProxy vrtConverterProxy) public {\\r\\n        require(msg.sender == vrtConverterProxy.admin(), \\\"only proxy admin can change brains\\\");\\r\\n        vrtConverterProxy._acceptImplementation();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4413d541ea10acaa20b1ebc4cf0c262386418a240dbf2c43fbc251a0743b8998\"},\"contracts/VRT/VRTConverterProxy.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VRTConverterStorage.sol\\\";\\r\\n\\r\\ncontract VRTConverterProxy is VRTConverterAdminStorage {\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingImplementation is changed\\r\\n      */\\r\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingImplementation is accepted, which means VRTConverter implementation is updated\\r\\n      */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n    * @notice Emitted when pendingAdmin is changed\\r\\n    */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n    * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n    */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    constructor(address implementation_,\\r\\n                address _vrtAddress,\\r\\n                address _xvsAddress,\\r\\n                uint256 _conversionRatio,\\r\\n                uint256 _conversionStartTime,\\r\\n                uint256 _conversionPeriod) nonZeroAddress(implementation_) nonZeroAddress(_vrtAddress) nonZeroAddress(_xvsAddress) public {\\r\\n        // Creator of the contract is admin during initialization\\r\\n        admin = msg.sender;\\r\\n\\r\\n        // New implementations always get set via the settor (post-initialize)\\r\\n        _setImplementation(implementation_);\\r\\n\\r\\n        // First delegate gets to initialize the delegator (i.e. storage contract)\\r\\n        delegateTo(implementation_, abi.encodeWithSignature(\\\"initialize(address,address,uint256,uint256,uint256)\\\",\\r\\n                                                            _vrtAddress,\\r\\n                                                            _xvsAddress,\\r\\n                                                            _conversionRatio,\\r\\n                                                            _conversionStartTime,\\r\\n                                                            _conversionPeriod));\\r\\n    }\\r\\n\\r\\n    modifier nonZeroAddress(address _address) {\\r\\n        require(_address != address(0), \\\"Address cannot be Zero\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Called by the admin to update the implementation of the delegator\\r\\n    * @param implementation_ The address of the new implementation for delegation\\r\\n    */\\r\\n    function _setImplementation(address implementation_) public {\\r\\n        require(msg.sender == admin, \\\"VRTConverterProxy::_setImplementation: admin only\\\");\\r\\n        require(implementation_ != address(0), \\\"VRTConverterProxy::_setImplementation: invalid implementation address\\\");\\r\\n\\r\\n        address oldImplementation = implementation;\\r\\n        implementation = implementation_;\\r\\n\\r\\n        emit NewImplementation(oldImplementation, implementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Internal method to delegate execution to another contract\\r\\n      * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\r\\n      * @param callee The contract to delegatecall\\r\\n      * @param data The raw data to delegatecall\\r\\n      * @return The returned bytes from the delegatecall\\r\\n     */\\r\\n    function delegateTo(address callee, bytes memory data) internal nonZeroAddress(callee) returns (bytes memory) {\\r\\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\\r\\n        assembly {\\r\\n            if eq(success, 0) {\\r\\n                revert(add(returnData, 0x20), returndatasize)\\r\\n            }\\r\\n        }\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _setPendingImplementation(address newPendingImplementation) nonZeroAddress(newPendingImplementation) public {\\r\\n\\r\\n        require(msg.sender == admin, \\\"Only admin can set Pending Implementation\\\");\\r\\n\\r\\n        address oldPendingImplementation = pendingImplementation;\\r\\n\\r\\n        pendingImplementation = newPendingImplementation;\\r\\n\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Accepts new implementation of VRTConverter. msg.sender must be pendingImplementation\\r\\n    * @dev Admin function for new implementation to accept it's role as implementation\\r\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n    */\\r\\n    function _acceptImplementation() public {\\r\\n        // Check caller is pendingImplementation\\r\\n        require(msg.sender == pendingImplementation, \\\"only address marked as pendingImplementation can accept Implementation\\\");\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = implementation;\\r\\n        address oldPendingImplementation = pendingImplementation;\\r\\n\\r\\n        implementation = pendingImplementation;\\r\\n\\r\\n        pendingImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, implementation);\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address newPendingAdmin) nonZeroAddress(newPendingAdmin) public {\\r\\n        // Check caller = admin\\r\\n        require(msg.sender == admin, \\\"only admin can set pending admin\\\");\\r\\n        require(newPendingAdmin != pendingAdmin , \\\"New pendingAdmin can not be same as the previous one\\\");\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() public {\\r\\n        // Check caller is pendingAdmin\\r\\n        require(msg.sender == pendingAdmin, \\\"only address marked as pendingAdmin can accept as Admin\\\");\\r\\n        \\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    function () external payable {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = implementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n              let free_mem_ptr := mload(0x40)\\r\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\r\\n\\r\\n              switch success\\r\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\r\\n              default { return(free_mem_ptr, returndatasize) }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x98cba33ba0d6820619c732524547bd1c018fb352c25177c55034abe61a2b4d36\"},\"contracts/VRT/VRTConverterStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"../Utils/SafeMath.sol\\\";\\r\\nimport \\\"../Utils/IBEP20.sol\\\";\\r\\nimport \\\"./IXVSVesting.sol\\\";\\r\\n\\r\\ncontract VRTConverterAdminStorage {\\r\\n    /**\\r\\n    * @notice Administrator for this contract\\r\\n    */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending administrator for this contract\\r\\n    */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n    * @notice Active brains of VRTConverter\\r\\n    */\\r\\n    address public implementation;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending brains of VRTConverter\\r\\n    */\\r\\n    address public pendingImplementation;\\r\\n}\\r\\n\\r\\ncontract VRTConverterStorage is VRTConverterAdminStorage {\\r\\n\\r\\n    /// @notice Guard variable for re-entrancy checks\\r\\n    bool public _notEntered;\\r\\n\\r\\n    /// @notice indicator to check if the contract is initialized\\r\\n    bool public initialized;\\r\\n\\r\\n    /// @notice The VRT TOKEN!\\r\\n    IBEP20 public vrt;\\r\\n\\r\\n    /// @notice The XVS TOKEN!\\r\\n    IBEP20 public xvs;\\r\\n\\r\\n    /// @notice XVSVesting Contract reference\\r\\n    IXVSVesting public xvsVesting;\\r\\n\\r\\n    /// @notice Conversion ratio from VRT to XVS with decimal 18\\r\\n    uint256 public conversionRatio;\\r\\n\\r\\n    /// @notice total VRT converted to XVS\\r\\n    uint256 public totalVrtConverted;\\r\\n\\r\\n    /// @notice Conversion Start time in EpochSeconds\\r\\n    uint256 public conversionStartTime;\\r\\n\\r\\n    /// @notice ConversionPeriod in Seconds\\r\\n    uint256 public conversionPeriod;\\r\\n\\r\\n    /// @notice Conversion End time in EpochSeconds\\r\\n    uint256 public conversionEndTime;\\r\\n}\",\"keccak256\":\"0x259beb9f117c812475489bf6ca0bace61a07aab58cd1c07e96b33634b3e5c7dd\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611182806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80636a1a4d36116100b8578063b8f1d1971161007c578063b8f1d1971461025c578063bcab369b1461025c578063d13f90b414610264578063d8438ae8146102a6578063e775f6ce146102ae578063f851a440146102b657610142565b80636a1a4d36146102015780636ebdd31c14610209578063a3908e1b1461022f578063a9ffd6b21461024c578063acc8c92b1461025457610142565b8063396f7b231161010a578063396f7b23146101d15780634bcf2ed9146101d95780634e6fd6c4146101e15780634e79ed3c146101e957806358859916146101f15780635c60da1b146101f957610142565b8063158ef93e146101475780631888927a146101635780631d504dc61461017d57806326782247146101a557806333fca8b1146101c9575b600080fd5b61014f6102be565b604080519115158252519081900360200190f35b61016b6102ce565b60408051918252519081900360200190f35b6101a36004803603602081101561019357600080fd5b50356001600160a01b03166102d4565b005b6101ad6103d5565b604080516001600160a01b039092168252519081900360200190f35b61016b6103e4565b6101ad6103ea565b61014f6103f9565b6101ad61042a565b6101ad610430565b6101ad61043f565b6101ad61044e565b61016b61045d565b6101a36004803603602081101561021f57600080fd5b50356001600160a01b0316610463565b6101a36004803603602081101561024557600080fd5b503561055b565b6101ad610905565b61016b610914565b61016b61091a565b6101a3600480360360a081101561027a57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060800135610926565b61014f610c29565b61016b610c39565b6101ad610c3f565b600354600160a81b900460ff1681565b60095481565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561030d57600080fd5b505afa158015610321573d6000803e3d6000fd5b505050506040513d602081101561033757600080fd5b50516001600160a01b0316331461037f5760405162461bcd60e51b815260040180806020018281038252602281526020018061112c6022913960400191505060405180910390fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103ba57600080fd5b505af11580156103ce573d6000803e3d6000fd5b5050505050565b6001546001600160a01b031681565b60075481565b6003546001600160a01b031681565b600954600090429081108015906104125750600b548111155b15610421576001915050610427565b60009150505b90565b61dead81565b6005546001600160a01b031681565b6006546001600160a01b031681565b6002546001600160a01b031681565b600b5481565b6000546001600160a01b031633146104ac5760405162461bcd60e51b81526004018080602001828103825260238152602001806110ba6023913960400191505060405180910390fd5b6001600160a01b038116610507576040805162461bcd60e51b815260206004820181905260248201527f78767356657374696e67416464726573732063616e6e6f74206265205a65726f604482015290519081900360640190fd5b600680546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fb3849bf00f7a1ef27db5b5740efa1d9e032be4db8cfbe8fc84f01599616dd59f9181900360200190a150565b600354600160a81b900460ff1615156001146105be576040805162461bcd60e51b815260206004820152601f60248201527f565254436f6e766572746572206973206e6f7420696e697469616c697a656400604482015290519081900360640190fd5b6009544290811015610617576040805162461bcd60e51b815260206004820152601c60248201527f436f6e76657273696f6e20646964206e6f742073746172742079657400000000604482015290519081900360640190fd5b600b5481111561066e576040805162461bcd60e51b815260206004820152601760248201527f436f6e76657273696f6e20506572696f6420456e646564000000000000000000604482015290519081900360640190fd5b600354600160a01b900460ff166106b9576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b6003805460ff60a01b191690556006546001600160a01b0316158015906106ed57506006546001600160a01b031661dead14155b61073e576040805162461bcd60e51b815260206004820152601e60248201527f5856532d56657374696e672041646472657373206973206e6f74207365740000604482015290519081900360640190fd5b60008211610793576040805162461bcd60e51b815260206004820152601b60248201527f56525420616d6f756e74206d757374206265206e6f6e2d7a65726f0000000000604482015290519081900360640190fd5b6008546107a6908363ffffffff610c4e16565b60088190555060006107ff670de0b6b3a76400006107f3670de0b6b3a76400006107f3670de0b6b3a76400006107e76007548a610cb190919063ffffffff16565b9063ffffffff610cb116565b9063ffffffff610d0a16565b600454600554604080513381526001600160a01b0393841660208201528082018890529190921660608201526080810183905290519192507fe0aebc0b49a57880fff1a14cdb8f71331347f88fedf9f4a251ff97b31061d828919081900360a00190a1600454610882906001600160a01b03163361dead8663ffffffff610d4c16565b600654604080516311f9fbc960e21b81523360048201526024810184905290516001600160a01b03909216916347e7ef249160448082019260009290919082900301818387803b1580156108d557600080fd5b505af11580156108e9573d6000803e3d6000fd5b50506003805460ff60a01b1916600160a01b1790555050505050565b6004546001600160a01b031681565b60085481565b670de0b6b3a764000081565b6000546001600160a01b0316331461096f5760405162461bcd60e51b815260040180806020018281038252602a815260200180611090602a913960400191505060405180910390fd5b600354600160a81b900460ff16156109b85760405162461bcd60e51b815260040180806020018281038252602381526020018061106d6023913960400191505060405180910390fd5b6001600160a01b038516610a13576040805162461bcd60e51b815260206004820152601960248201527f767274416464726573732063616e6e6f74206265205a65726f00000000000000604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b03878116919091179091558416610a86576040805162461bcd60e51b815260206004820152601960248201527f787673416464726573732063616e6e6f74206265205a65726f00000000000000604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b03861617905582610af3576040805162461bcd60e51b815260206004820152601e60248201527f636f6e76657273696f6e526174696f2063616e6e6f74206265205a65726f0000604482015290519081900360640190fd5b600783905542821015610b375760405162461bcd60e51b815260040180806020018281038252602e8152602001806110dd602e913960400191505060405180910390fd5b60008111610b8c576040805162461bcd60e51b815260206004820152601c60248201527f5f636f6e76657273696f6e506572696f6420697320696e76616c696400000000604482015290519081900360640190fd5b6009829055600a819055610ba6828263ffffffff610c4e16565b600b819055600754600954600a5460408051938452602084019290925282820152606082019290925290517fd1a8ac984a8430f21edede61cef5f001917ac908c13ff7d1c7bfd9e0eca6e7b69181900360800190a15050600060085550506003805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b17905550565b600354600160a01b900460ff1681565b600a5481565b6000546001600160a01b031681565b600082820183811015610ca8576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600082610cc057506000610cab565b82820282848281610ccd57fe5b0414610ca85760405162461bcd60e51b815260040180806020018281038252602181526020018061110b6021913960400191505060405180910390fd5b6000610ca883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610dac565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610da6908590610e4e565b50505050565b60008183610e385760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610dfd578181015183820152602001610de5565b50505050905090810190601f168015610e2a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610e4457fe5b0495945050505050565b610e60826001600160a01b0316611006565b610eb1576040805162461bcd60e51b815260206004820152601f60248201527f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310610eef5780518252601f199092019160209182019101610ed0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610f51576040519150601f19603f3d011682016040523d82523d6000602084013e610f56565b606091505b509150915081610fad576040805162461bcd60e51b815260206004820181905260248201527f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610da657808060200190516020811015610fc957600080fd5b5051610da65760405162461bcd60e51b815260040180806020018281038252602a815260200180611043602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061103a57508115155b94935050505056fe5361666542455032303a204245503230206f7065726174696f6e20646964206e6f742073756363656564565254436f6e76657274657220697320616c726561647920696e697469616c697a65646f6e6c792061646d696e206d617920696e697469616c697a652074686520565254436f6e7665727465726f6e6c792061646d696e206d617920696e697469616c697a6520746865205661756c74636f6e76657273696f6e537461727454696d65206d7573742062652074696d6520696e2074686520667574757265536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c792070726f78792061646d696e2063616e206368616e676520627261696e73a265627a7a72315820e027d5c511fdfca75b15573a1a9bc5677e0e3f272ccb242614d8c1ea79bd7dfc64736f6c63430005100032",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Venus",
    "methods": {
      "convert(uint256)": {
        "details": "Note: If there is not enough XVS, we do not perform the conversion.",
        "params": {
          "vrtAmount": "The amount of VRT"
        }
      },
      "setXVSVesting(address)": {
        "details": "Note: If XVSVestingProxy is not set, then Conversion is not allowed",
        "params": {
          "_xvsVestingAddress": "The XVSVestingProxy Address"
        }
      }
    },
    "title": "Venus's VRTConversion Contract"
  },
  "userdoc": {
    "methods": {
      "_become(address)": {
        "notice": "* Admin Functions **"
      },
      "convert(uint256)": {
        "notice": "Transfer VRT and redeem XVS"
      },
      "setXVSVesting(address)": {
        "notice": "sets XVSVestingProxy Address"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40301,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 40303,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 40305,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 40307,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "pendingImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 40312,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "_notEntered",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 40314,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "initialized",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 40316,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "vrt",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IBEP20)34287"
      },
      {
        "astId": 40318,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "xvs",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBEP20)34287"
      },
      {
        "astId": 40320,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "xvsVesting",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IXVSVesting)39554"
      },
      {
        "astId": 40322,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "conversionRatio",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 40324,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "totalVrtConverted",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 40326,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "conversionStartTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 40328,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "conversionPeriod",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 40330,
        "contract": "contracts/VRT/VRTConverter.sol:VRTConverter",
        "label": "conversionEndTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBEP20)34287": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_contract(IXVSVesting)39554": {
        "encoding": "inplace",
        "label": "contract IXVSVesting",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}