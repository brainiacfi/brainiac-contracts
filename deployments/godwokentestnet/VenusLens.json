{
  "address": "0xaafCCA5f9E2FC078dBE5270C0cB89539704f2C35",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract LensInterface",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract VToken[]",
              "name": "markets",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shortfall",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.AccountLimits",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract GovernorAlpha",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "proposalIds",
          "type": "uint256[]"
        }
      ],
      "name": "getGovProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "eta",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "string[]",
              "name": "signatures",
              "type": "string[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "forVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "againstVotes",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canceled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct VenusLens.GovProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract GovernorAlpha",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "proposalIds",
          "type": "uint256[]"
        }
      ],
      "name": "getGovReceipts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct VenusLens.GovReceipt[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract XVS",
          "name": "xvs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "blockNumbers",
          "type": "uint32[]"
        }
      ],
      "name": "getVenusVotes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VenusVotes[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract XVS",
          "name": "xvs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getXVSBalanceMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct VenusLens.XVSBalanceMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract XVS",
          "name": "xvs",
          "type": "address"
        },
        {
          "internalType": "contract LensInterface",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getXVSBalanceMetadataExt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocated",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.XVSBalanceMetadataExt",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract Comptroller",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "pendingVenus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vTokenBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalanceCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOfUnderlying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAllowance",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenBalances",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vTokenBalancesAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalanceCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOfUnderlying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAllowance",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenBalances[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "vTokenMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRateCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCash",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAssetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        }
      ],
      "name": "vTokenMetadataAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRateCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCash",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAssetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "vTokenUnderlyingPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenUnderlyingPrice",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        }
      ],
      "name": "vTokenUnderlyingPriceAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenUnderlyingPrice[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8522c5a70507005e731040d70a5889d382666341b4547338e47070b3afc30204",
  "receipt": {
    "to": null,
    "from": "0x02FE5abFC9054C9E23B47c7743eE6F55b35E8470",
    "contractAddress": "0xaafCCA5f9E2FC078dBE5270C0cB89539704f2C35",
    "transactionIndex": 0,
    "gasUsed": "335999",
    "logsBloom": "0x
    "blockHash": "0xab6049e4628b39c9cc368111faaaae25d7e6b7cbfd56e586b532a502200e29b3",
    "transactionHash": "0x8522c5a70507005e731040d70a5889d382666341b4547338e47070b3afc30204",
    "logs": [],
    "blockNumber": 110815,
    "cumulativeGasUsed": "335999",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0e99640d4d68368a8bacc1b00b1ae63d",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"contract LensInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"contract VToken[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct VenusLens.GovProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovReceipts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct VenusLens.GovReceipt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract XVS\",\"name\":\"xvs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"blockNumbers\",\"type\":\"uint32[]\"}],\"name\":\"getVenusVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VenusVotes[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract XVS\",\"name\":\"xvs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getXVSBalanceMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct VenusLens.XVSBalanceMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract XVS\",\"name\":\"xvs\",\"type\":\"address\"},{\"internalType\":\"contract LensInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getXVSBalanceMetadataExt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.XVSBalanceMetadataExt\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract Comptroller\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"pendingVenus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenBalances\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vTokenBalancesAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"vTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"vTokenMetadataAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"vTokenUnderlyingPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenUnderlyingPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"vTokenUnderlyingPriceAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenUnderlyingPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Lens/VenusLens.sol\":\"VenusLens\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n  * @title Careful Math\\r\\n  * @author Venus\\r\\n  * @notice Derived from OpenZeppelin's SafeMath library\\r\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\r\\n  */\\r\\ncontract CarefulMath {\\r\\n\\r\\n    /**\\r\\n     * @dev Possible error codes that we can return\\r\\n     */\\r\\n    enum MathError {\\r\\n        NO_ERROR,\\r\\n        DIVISION_BY_ZERO,\\r\\n        INTEGER_OVERFLOW,\\r\\n        INTEGER_UNDERFLOW\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Multiplies two numbers, returns an error on overflow.\\r\\n    */\\r\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (a == 0) {\\r\\n            return (MathError.NO_ERROR, 0);\\r\\n        }\\r\\n\\r\\n        uint c = a * b;\\r\\n\\r\\n        if (c / a != b) {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        } else {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Integer division of two numbers, truncating the quotient.\\r\\n    */\\r\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b == 0) {\\r\\n            return (MathError.DIVISION_BY_ZERO, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        if (b <= a) {\\r\\n            return (MathError.NO_ERROR, a - b);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two numbers, returns an error on overflow.\\r\\n    */\\r\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\r\\n        uint c = a + b;\\r\\n\\r\\n        if (c >= a) {\\r\\n            return (MathError.NO_ERROR, c);\\r\\n        } else {\\r\\n            return (MathError.INTEGER_OVERFLOW, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev add a and b and then subtract c\\r\\n    */\\r\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\r\\n        (MathError err0, uint sum) = addUInt(a, b);\\r\\n\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, 0);\\r\\n        }\\r\\n\\r\\n        return subUInt(sum, c);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x855f65e2bd271e114555e71a10c3b3276ab70643c0c96a452b3493423de474a4\"},\"contracts/Comptroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\nimport \\\"./Unitroller.sol\\\";\\r\\nimport \\\"./Governance/XVS.sol\\\";\\r\\nimport \\\"./VAI/VAI.sol\\\";\\r\\nimport \\\"./ComptrollerLensInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Venus's Comptroller Contract\\r\\n * @author Venus\\r\\n */\\r\\ncontract Comptroller is ComptrollerV7Storage, ComptrollerInterfaceG2, ComptrollerErrorReporter, ExponentialNoError {\\r\\n    /// @notice Emitted when an admin supports a market\\r\\n    event MarketListed(VToken vToken);\\r\\n\\r\\n    /// @notice Emitted when an account enters a market\\r\\n    event MarketEntered(VToken vToken, address account);\\r\\n\\r\\n    /// @notice Emitted when an account exits a market\\r\\n    event MarketExited(VToken vToken, address account);\\r\\n\\r\\n    /// @notice Emitted when close factor is changed by admin\\r\\n    event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\\r\\n\\r\\n    /// @notice Emitted when a collateral factor is changed by admin\\r\\n    event NewCollateralFactor(VToken vToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\r\\n\\r\\n    /// @notice Emitted when liquidation incentive is changed by admin\\r\\n    event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\r\\n\\r\\n    /// @notice Emitted when price oracle is changed\\r\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\r\\n\\r\\n    /// @notice Emitted when VAI Vault info is changed\\r\\n    event NewVAIVaultInfo(address vault_, uint releaseStartBlock_, uint releaseInterval_);\\r\\n\\r\\n    /// @notice Emitted when pause guardian is changed\\r\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\r\\n\\r\\n    /// @notice Emitted when an action is paused globally\\r\\n    event ActionPaused(string action, bool pauseState);\\r\\n\\r\\n    /// @notice Emitted when an action is paused on a market\\r\\n    event ActionPausedMarket(VToken vToken, string action, bool pauseState);\\r\\n\\r\\n    /// @notice Emitted when Venus VAI rate is changed\\r\\n    event NewVenusVAIRate(uint oldVenusVAIRate, uint newVenusVAIRate);\\r\\n\\r\\n    /// @notice Emitted when Venus VAI Vault rate is changed\\r\\n    event NewVenusVAIVaultRate(uint oldVenusVAIVaultRate, uint newVenusVAIVaultRate);\\r\\n\\r\\n    /// @notice Emitted when a new Venus speed is calculated for a market\\r\\n    event VenusSpeedUpdated(VToken indexed vToken, uint newSpeed);\\r\\n\\r\\n    /// @notice Emitted when XVS is distributed to a supplier\\r\\n    event DistributedSupplierVenus(VToken indexed vToken, address indexed supplier, uint venusDelta, uint venusSupplyIndex);\\r\\n\\r\\n    /// @notice Emitted when XVS is distributed to a borrower\\r\\n    event DistributedBorrowerVenus(VToken indexed vToken, address indexed borrower, uint venusDelta, uint venusBorrowIndex);\\r\\n\\r\\n    /// @notice Emitted when XVS is distributed to a VAI minter\\r\\n    event DistributedVAIMinterVenus(address indexed vaiMinter, uint venusDelta, uint venusVAIMintIndex);\\r\\n\\r\\n    /// @notice Emitted when XVS is distributed to VAI Vault\\r\\n    event DistributedVAIVaultVenus(uint amount);\\r\\n\\r\\n    /// @notice Emitted when VAIController is changed\\r\\n    event NewVAIController(VAIControllerInterface oldVAIController, VAIControllerInterface newVAIController);\\r\\n\\r\\n    /// @notice Emitted when VAI mint rate is changed by admin\\r\\n    event NewVAIMintRate(uint oldVAIMintRate, uint newVAIMintRate);\\r\\n\\r\\n    /// @notice Emitted when protocol state is changed by admin\\r\\n    event ActionProtocolPaused(bool state);\\r\\n\\r\\n    /// @notice Emitted when borrow cap for a vToken is changed\\r\\n    event NewBorrowCap(VToken indexed vToken, uint newBorrowCap);\\r\\n\\r\\n    /// @notice Emitted when borrow cap guardian is changed\\r\\n    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\r\\n\\r\\n    /// @notice Emitted when treasury guardian is changed\\r\\n    event NewTreasuryGuardian(address oldTreasuryGuardian, address newTreasuryGuardian);\\r\\n\\r\\n    /// @notice Emitted when treasury address is changed\\r\\n    event NewTreasuryAddress(address oldTreasuryAddress, address newTreasuryAddress);\\r\\n\\r\\n    /// @notice Emitted when treasury percent is changed\\r\\n    event NewTreasuryPercent(uint oldTreasuryPercent, uint newTreasuryPercent);\\r\\n\\r\\n    // @notice Emitted when liquidator adress is changed\\r\\n    event NewLiquidatorContract(address oldLiquidatorContract, address newLiquidatorContract);\\r\\n\\r\\n    /// @notice Emitted when Venus is granted by admin\\r\\n    event VenusGranted(address recipient, uint amount);\\r\\n\\r\\n    /// @notice Emitted whe ComptrollerLens address is changed\\r\\n    event NewComptrollerLens(address oldComptrollerLens, address newComptrollerLens);\\r\\n\\r\\n    /// @notice The initial Venus index for a market\\r\\n    uint224 public constant venusInitialIndex = 1e36;\\r\\n\\r\\n    // closeFactorMantissa must be strictly greater than this value\\r\\n    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\r\\n\\r\\n    // closeFactorMantissa must not exceed this value\\r\\n    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    // No collateralFactorMantissa may exceed this value\\r\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\r\\n\\r\\n    constructor() public {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyProtocolAllowed {\\r\\n        require(!protocolPaused, \\\"protocol is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function ensureAdmin() private {\\r\\n        require(msg.sender == admin, \\\"only admin can\\\");\\r\\n    }\\r\\n\\r\\n    function ensureNonzeroAddress(address someone) private {\\r\\n        require(someone != address(0), \\\"can't be zero address\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyListedMarket(VToken vToken) {\\r\\n        require(markets[address(vToken)].isListed, \\\"venus market is not listed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validPauseState(bool state) {\\r\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can\\\");\\r\\n        require(msg.sender == admin || state, \\\"only admin can unpause\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the assets an account has entered\\r\\n     * @param account The address of the account to pull assets for\\r\\n     * @return A dynamic list with the assets the account has entered\\r\\n     */\\r\\n    function getAssetsIn(address account) external view returns (VToken[] memory) {\\r\\n        return accountAssets[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the given account is entered in the given asset\\r\\n     * @param account The address of the account to check\\r\\n     * @param vToken The vToken to check\\r\\n     * @return True if the account is in the asset, otherwise false.\\r\\n     */\\r\\n    function checkMembership(address account, VToken vToken) external view returns (bool) {\\r\\n        return markets[address(vToken)].accountMembership[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add assets to be included in account liquidity calculation\\r\\n     * @param vTokens The list of addresses of the vToken markets to be enabled\\r\\n     * @return Success indicator for whether each corresponding market was entered\\r\\n     */\\r\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory) {\\r\\n        uint len = vTokens.length;\\r\\n\\r\\n        uint[] memory results = new uint[](len);\\r\\n        for (uint i = 0; i < len; i++) {\\r\\n            results[i] = uint(addToMarketInternal(VToken(vTokens[i]), msg.sender));\\r\\n        }\\r\\n\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\r\\n     * @param vToken The market to enter\\r\\n     * @param borrower The address of the account to modify\\r\\n     * @return Success indicator for whether the market was entered\\r\\n     */\\r\\n    function addToMarketInternal(VToken vToken, address borrower) internal returns (Error) {\\r\\n        Market storage marketToJoin = markets[address(vToken)];\\r\\n\\r\\n        if (!marketToJoin.isListed) {\\r\\n            // market is not listed, cannot join\\r\\n            return Error.MARKET_NOT_LISTED;\\r\\n        }\\r\\n\\r\\n        if (marketToJoin.accountMembership[borrower]) {\\r\\n            // already joined\\r\\n            return Error.NO_ERROR;\\r\\n        }\\r\\n\\r\\n        // survived the gauntlet, add to list\\r\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\r\\n        //  this avoids having to iterate through the list for the most common use cases\\r\\n        //  that is, only when we need to perform liquidity checks\\r\\n        //  and not whenever we want to check if an account is in a particular market\\r\\n        marketToJoin.accountMembership[borrower] = true;\\r\\n        accountAssets[borrower].push(vToken);\\r\\n\\r\\n        emit MarketEntered(vToken, borrower);\\r\\n\\r\\n        return Error.NO_ERROR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes asset from sender's account liquidity calculation\\r\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\r\\n     *  or be providing necessary collateral for an outstanding borrow.\\r\\n     * @param vTokenAddress The address of the asset to be removed\\r\\n     * @return Whether or not the account successfully exited the market\\r\\n     */\\r\\n    function exitMarket(address vTokenAddress) external returns (uint) {\\r\\n        VToken vToken = VToken(vTokenAddress);\\r\\n        /* Get sender tokensHeld and amountOwed underlying from the vToken */\\r\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = vToken.getAccountSnapshot(msg.sender);\\r\\n        require(oErr == 0, \\\"getAccountSnapshot failed\\\"); // semi-opaque error code\\r\\n\\r\\n        /* Fail if the sender has a borrow balance */\\r\\n        if (amountOwed != 0) {\\r\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\r\\n        }\\r\\n\\r\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\r\\n        uint allowed = redeemAllowedInternal(vTokenAddress, msg.sender, tokensHeld);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        Market storage marketToExit = markets[address(vToken)];\\r\\n\\r\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\r\\n        if (!marketToExit.accountMembership[msg.sender]) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Set vToken account membership to false */\\r\\n        delete marketToExit.accountMembership[msg.sender];\\r\\n\\r\\n        /* Delete vToken from the account\\u2019s list of assets */\\r\\n        // In order to delete vToken, copy last item in list to location of item to be removed, reduce length by 1\\r\\n        VToken[] storage userAssetList = accountAssets[msg.sender];\\r\\n        uint len = userAssetList.length;\\r\\n        uint i;\\r\\n        for (; i < len; i++) {\\r\\n            if (userAssetList[i] == vToken) {\\r\\n                userAssetList[i] = userAssetList[len - 1];\\r\\n                userAssetList.length--;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\r\\n        assert(i < len);\\r\\n\\r\\n        emit MarketExited(vToken, msg.sender);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\r\\n     * @param vToken The market to verify the mint against\\r\\n     * @param minter The account which would get the minted tokens\\r\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\r\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external onlyProtocolAllowed returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!mintGuardianPaused[vToken], \\\"mint is paused\\\");\\r\\n\\r\\n        // Shh - currently unused\\r\\n        mintAmount;\\r\\n\\r\\n        if (!markets[vToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateVenusSupplyIndex(vToken);\\r\\n        distributeSupplierVenus(vToken, minter);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset being minted\\r\\n     * @param minter The address minting the tokens\\r\\n     * @param actualMintAmount The amount of the underlying asset being minted\\r\\n     * @param mintTokens The number of tokens being minted\\r\\n     */\\r\\n    function mintVerify(address vToken, address minter, uint actualMintAmount, uint mintTokens) external {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        minter;\\r\\n        actualMintAmount;\\r\\n        mintTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\r\\n     * @param vToken The market to verify the redeem against\\r\\n     * @param redeemer The account which would redeem the tokens\\r\\n     * @param redeemTokens The number of vTokens to exchange for the underlying asset in the market\\r\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external onlyProtocolAllowed returns (uint) {\\r\\n        uint allowed = redeemAllowedInternal(vToken, redeemer, redeemTokens);\\r\\n        if (allowed != uint(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateVenusSupplyIndex(vToken);\\r\\n        distributeSupplierVenus(vToken, redeemer);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function redeemAllowedInternal(address vToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\r\\n        if (!markets[vToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\r\\n        if (!markets[vToken].accountMembership[redeemer]) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, VToken(vToken), redeemTokens, 0);\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall != 0) {\\r\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset being redeemed\\r\\n     * @param redeemer The address redeeming the tokens\\r\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\r\\n     * @param redeemTokens The number of tokens being redeemed\\r\\n     */\\r\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        redeemer;\\r\\n\\r\\n        // Require tokens is zero or amount is also zero\\r\\n        require(redeemTokens != 0 || redeemAmount == 0, \\\"redeemTokens zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\r\\n     * @param vToken The market to verify the borrow against\\r\\n     * @param borrower The account which would borrow the asset\\r\\n     * @param borrowAmount The amount of underlying the account would borrow\\r\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external onlyProtocolAllowed returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!borrowGuardianPaused[vToken], \\\"borrow is paused\\\");\\r\\n\\r\\n        if (!markets[vToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        if (!markets[vToken].accountMembership[borrower]) {\\r\\n            // only vTokens may call borrowAllowed if borrower not in market\\r\\n            require(msg.sender == vToken, \\\"sender must be vToken\\\");\\r\\n\\r\\n            // attempt to add borrower to the market\\r\\n            Error err = addToMarketInternal(VToken(vToken), borrower);\\r\\n            if (err != Error.NO_ERROR) {\\r\\n                return uint(err);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (oracle.getUnderlyingPrice(VToken(vToken)) == 0) {\\r\\n            return uint(Error.PRICE_ERROR);\\r\\n        }\\r\\n\\r\\n        uint borrowCap = borrowCaps[vToken];\\r\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\r\\n        if (borrowCap != 0) {\\r\\n            uint totalBorrows = VToken(vToken).totalBorrows();\\r\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\r\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\r\\n        }\\r\\n\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, VToken(vToken), 0, borrowAmount);\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall != 0) {\\r\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        Exp memory borrowIndex = Exp({mantissa: VToken(vToken).borrowIndex()});\\r\\n        updateVenusBorrowIndex(vToken, borrowIndex);\\r\\n        distributeBorrowerVenus(vToken, borrower, borrowIndex);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset whose underlying is being borrowed\\r\\n     * @param borrower The address borrowing the underlying\\r\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\r\\n     */\\r\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        borrower;\\r\\n        borrowAmount;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\r\\n     * @param vToken The market to verify the repay against\\r\\n     * @param payer The account which would repay the asset\\r\\n     * @param borrower The account which borrowed the asset\\r\\n     * @param repayAmount The amount of the underlying asset the account would repay\\r\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function repayBorrowAllowed(\\r\\n        address vToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) external onlyProtocolAllowed returns (uint) {\\r\\n        // Shh - currently unused\\r\\n        payer;\\r\\n        borrower;\\r\\n        repayAmount;\\r\\n\\r\\n        if (!markets[vToken].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        Exp memory borrowIndex = Exp({mantissa: VToken(vToken).borrowIndex()});\\r\\n        updateVenusBorrowIndex(vToken, borrowIndex);\\r\\n        distributeBorrowerVenus(vToken, borrower, borrowIndex);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset being repaid\\r\\n     * @param payer The address repaying the borrow\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param actualRepayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function repayBorrowVerify(\\r\\n        address vToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint actualRepayAmount,\\r\\n        uint borrowerIndex) external {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        payer;\\r\\n        borrower;\\r\\n        actualRepayAmount;\\r\\n        borrowerIndex;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the liquidation should be allowed to occur\\r\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param repayAmount The amount of underlying being repaid\\r\\n     */\\r\\n    function liquidateBorrowAllowed(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) external onlyProtocolAllowed returns (uint) {\\r\\n        if (liquidatorContract != address(0) && liquidator != liquidatorContract) {\\r\\n            return uint(Error.UNAUTHORIZED);\\r\\n        }\\r\\n\\r\\n        if (!(markets[vTokenBorrowed].isListed || address(vTokenBorrowed) == address(vaiController)) || !markets[vTokenCollateral].isListed) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        /* The borrower must have shortfall in order to be liquidatable */\\r\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, VToken(0), 0, 0);\\r\\n        if (err != Error.NO_ERROR) {\\r\\n            return uint(err);\\r\\n        }\\r\\n        if (shortfall == 0) {\\r\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\r\\n        }\\r\\n\\r\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\r\\n        uint borrowBalance;\\r\\n        if (address(vTokenBorrowed) != address(vaiController)) {\\r\\n            borrowBalance = VToken(vTokenBorrowed).borrowBalanceStored(borrower);\\r\\n        } else {\\r\\n            borrowBalance = mintedVAIs[borrower];\\r\\n        }\\r\\n        uint maxClose = mul_ScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\\r\\n        if (repayAmount > maxClose) {\\r\\n            return uint(Error.TOO_MUCH_REPAY);\\r\\n        }\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\r\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param actualRepayAmount The amount of underlying being repaid\\r\\n     * @param seizeTokens The amount of collateral token that will be seized\\r\\n     */\\r\\n    function liquidateBorrowVerify(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint actualRepayAmount,\\r\\n        uint seizeTokens) external {\\r\\n        // Shh - currently unused\\r\\n        vTokenBorrowed;\\r\\n        vTokenCollateral;\\r\\n        liquidator;\\r\\n        borrower;\\r\\n        actualRepayAmount;\\r\\n        seizeTokens;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the seizing of assets should be allowed to occur\\r\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param seizeTokens The number of collateral tokens to seize\\r\\n     */\\r\\n    function seizeAllowed(\\r\\n        address vTokenCollateral,\\r\\n        address vTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external onlyProtocolAllowed returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\r\\n\\r\\n        // Shh - currently unused\\r\\n        seizeTokens;\\r\\n\\r\\n        // We've added VAIController as a borrowed token list check for seize\\r\\n        if (!markets[vTokenCollateral].isListed || !(markets[vTokenBorrowed].isListed || address(vTokenBorrowed) == address(vaiController))) {\\r\\n            return uint(Error.MARKET_NOT_LISTED);\\r\\n        }\\r\\n\\r\\n        if (VToken(vTokenCollateral).comptroller() != VToken(vTokenBorrowed).comptroller()) {\\r\\n            return uint(Error.COMPTROLLER_MISMATCH);\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateVenusSupplyIndex(vTokenCollateral);\\r\\n        distributeSupplierVenus(vTokenCollateral, borrower);\\r\\n        distributeSupplierVenus(vTokenCollateral, liquidator);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\r\\n     * @param vTokenCollateral Asset which was used as collateral and will be seized\\r\\n     * @param vTokenBorrowed Asset which was borrowed by the borrower\\r\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\r\\n     * @param borrower The address of the borrower\\r\\n     * @param seizeTokens The number of collateral tokens to seize\\r\\n     */\\r\\n    function seizeVerify(\\r\\n        address vTokenCollateral,\\r\\n        address vTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external {\\r\\n        // Shh - currently unused\\r\\n        vTokenCollateral;\\r\\n        vTokenBorrowed;\\r\\n        liquidator;\\r\\n        borrower;\\r\\n        seizeTokens;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\r\\n     * @param vToken The market to verify the transfer against\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     * @param transferTokens The number of vTokens to transfer\\r\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\r\\n     */\\r\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external onlyProtocolAllowed returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\r\\n\\r\\n        // Currently the only consideration is whether or not\\r\\n        //  the src is allowed to redeem this many tokens\\r\\n        uint allowed = redeemAllowedInternal(vToken, src, transferTokens);\\r\\n        if (allowed != uint(Error.NO_ERROR)) {\\r\\n            return allowed;\\r\\n        }\\r\\n\\r\\n        // Keep the flywheel moving\\r\\n        updateVenusSupplyIndex(vToken);\\r\\n        distributeSupplierVenus(vToken, src);\\r\\n        distributeSupplierVenus(vToken, dst);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\r\\n     * @param vToken Asset being transferred\\r\\n     * @param src The account which sources the tokens\\r\\n     * @param dst The account which receives the tokens\\r\\n     * @param transferTokens The number of vTokens to transfer\\r\\n     */\\r\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external {\\r\\n        // Shh - currently unused\\r\\n        vToken;\\r\\n        src;\\r\\n        dst;\\r\\n        transferTokens;\\r\\n\\r\\n        // Shh - we don't ever want this hook to be marked pure\\r\\n        if (false) {\\r\\n            maxAssets = maxAssets;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the current account liquidity wrt collateral requirements\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                account liquidity in excess of collateral requirements,\\r\\n     *          account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\r\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, VToken(0), 0, 0);\\r\\n\\r\\n        return (uint(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param vTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @return (possible error code (semi-opaque),\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidity(\\r\\n        address account,\\r\\n        address vTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\r\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, VToken(vTokenModify), redeemTokens, borrowAmount);\\r\\n        return (uint(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\r\\n     * @param vTokenModify The market to hypothetically redeem/borrow in\\r\\n     * @param account The account to determine liquidity for\\r\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\r\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\r\\n     * @dev Note that we calculate the exchangeRateStored for each collateral vToken using stored data,\\r\\n     *  without calculating accumulated interest.\\r\\n     * @return (possible error code,\\r\\n                hypothetical account liquidity in excess of collateral requirements,\\r\\n     *          hypothetical account shortfall below collateral requirements)\\r\\n     */\\r\\n    function getHypotheticalAccountLiquidityInternal(\\r\\n        address account,\\r\\n        VToken vTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount) internal view returns (Error, uint, uint) {\\r\\n        (uint err, uint liquidity, uint shortfall) = comptrollerLens.getHypotheticalAccountLiquidity(\\r\\n            address(this),\\r\\n            account,\\r\\n            vTokenModify,\\r\\n            redeemTokens,\\r\\n            borrowAmount\\r\\n        );\\r\\n        return (Error(err), liquidity, shortfall);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\r\\n     * @dev Used in liquidation (called in vToken.liquidateBorrowFresh)\\r\\n     * @param vTokenBorrowed The address of the borrowed vToken\\r\\n     * @param vTokenCollateral The address of the collateral vToken\\r\\n     * @param actualRepayAmount The amount of vTokenBorrowed underlying to convert into vTokenCollateral tokens\\r\\n     * @return (errorCode, number of vTokenCollateral tokens to be seized in a liquidation)\\r\\n     */\\r\\n    function liquidateCalculateSeizeTokens(address vTokenBorrowed, address vTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\\r\\n        (uint err, uint seizeTokens) = comptrollerLens.liquidateCalculateSeizeTokens(\\r\\n            address(this), \\r\\n            vTokenBorrowed, \\r\\n            vTokenCollateral, \\r\\n            actualRepayAmount);\\r\\n        return (err, seizeTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\r\\n     * @dev Used in liquidation (called in vToken.liquidateBorrowFresh)\\r\\n     * @param vTokenCollateral The address of the collateral vToken\\r\\n     * @param actualRepayAmount The amount of vTokenBorrowed underlying to convert into vTokenCollateral tokens\\r\\n     * @return (errorCode, number of vTokenCollateral tokens to be seized in a liquidation)\\r\\n     */\\r\\n    function liquidateVAICalculateSeizeTokens(address vTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\\r\\n        (uint err, uint seizeTokens) = comptrollerLens.liquidateVAICalculateSeizeTokens(\\r\\n            address(this), \\r\\n            vTokenCollateral, \\r\\n            actualRepayAmount);\\r\\n        return (err, seizeTokens);\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new price oracle for the comptroller\\r\\n      * @dev Admin function to set a new price oracle\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPriceOracle(PriceOracle newOracle) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        ensureNonzeroAddress(address(newOracle));\\r\\n\\r\\n        // Track the old oracle for the comptroller\\r\\n        PriceOracle oldOracle = oracle;\\r\\n\\r\\n        // Set comptroller's oracle to newOracle\\r\\n        oracle = newOracle;\\r\\n\\r\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\r\\n        emit NewPriceOracle(oldOracle, newOracle);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets the closeFactor used when liquidating borrows\\r\\n      * @dev Admin function to set closeFactor\\r\\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\\r\\n      * @return uint 0=success, otherwise will revert\\r\\n      */\\r\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        ensureAdmin();\\r\\n\\r\\n        uint oldCloseFactorMantissa = closeFactorMantissa;\\r\\n        closeFactorMantissa = newCloseFactorMantissa;\\r\\n        emit NewCloseFactor(oldCloseFactorMantissa, newCloseFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets the collateralFactor for a market\\r\\n      * @dev Admin function to set per-market collateralFactor\\r\\n      * @param vToken The market to set the factor on\\r\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\r\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n      */\\r\\n    function _setCollateralFactor(VToken vToken, uint newCollateralFactorMantissa) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        ensureNonzeroAddress(address(vToken));\\r\\n\\r\\n        // Verify market is listed\\r\\n        Market storage market = markets[address(vToken)];\\r\\n        if (!market.isListed) {\\r\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\r\\n        }\\r\\n\\r\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\r\\n\\r\\n        // Check collateral factor <= 0.9\\r\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\r\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\r\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\r\\n        }\\r\\n\\r\\n        // If collateral factor != 0, fail if price == 0\\r\\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(vToken) == 0) {\\r\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\r\\n        }\\r\\n\\r\\n        // Set market's collateral factor to new collateral factor, remember old value\\r\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\r\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\r\\n\\r\\n        // Emit event with asset, old collateral factor, and new collateral factor\\r\\n        emit NewCollateralFactor(vToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets liquidationIncentive\\r\\n      * @dev Admin function to set liquidationIncentive\\r\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\r\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\r\\n      */\\r\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        require(newLiquidationIncentiveMantissa >= 1e18, \\\"incentive must be over 1e18\\\");\\r\\n\\r\\n        // Save current value for use in log\\r\\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\r\\n\\r\\n        // Set liquidation incentive to new incentive\\r\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\r\\n\\r\\n        // Emit event with old incentive, new incentive\\r\\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _setLiquidatorContract(address newLiquidatorContract_) external {\\r\\n        ensureAdmin();\\r\\n        address oldLiquidatorContract = liquidatorContract;\\r\\n        liquidatorContract = newLiquidatorContract_;\\r\\n        emit NewLiquidatorContract(oldLiquidatorContract, newLiquidatorContract_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Add the market to the markets mapping and set it as listed\\r\\n      * @dev Admin function to set isListed and add support for the market\\r\\n      * @param vToken The address of the market (token) to list\\r\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n      */\\r\\n    function _supportMarket(VToken vToken) external returns (uint) {\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        if (markets[address(vToken)].isListed) {\\r\\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\r\\n        }\\r\\n\\r\\n        vToken.isVToken(); // Sanity check to make sure its really a VToken\\r\\n\\r\\n        // Note that isVenus is not in active use anymore\\r\\n        markets[address(vToken)] = Market({isListed: true, isVenus: false, collateralFactorMantissa: 0});\\r\\n\\r\\n        _addMarketInternal(vToken);\\r\\n\\r\\n        emit MarketListed(vToken);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _addMarketInternal(VToken vToken) internal {\\r\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\r\\n            require(allMarkets[i] != vToken, \\\"market already added\\\");\\r\\n        }\\r\\n        allMarkets.push(vToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Pause Guardian\\r\\n     * @param newPauseGuardian The address of the new Pause Guardian\\r\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\r\\n     */\\r\\n    function _setPauseGuardian(address newPauseGuardian) external returns (uint) {\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        ensureNonzeroAddress(newPauseGuardian);\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldPauseGuardian = pauseGuardian;\\r\\n\\r\\n        // Store pauseGuardian with value newPauseGuardian\\r\\n        pauseGuardian = newPauseGuardian;\\r\\n\\r\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\r\\n        emit NewPauseGuardian(oldPauseGuardian, newPauseGuardian);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Set the given borrow caps for the given vToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\r\\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\r\\n      * @param vTokens The addresses of the markets (tokens) to change the borrow caps for\\r\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\r\\n      */\\r\\n    function _setMarketBorrowCaps(VToken[] calldata vTokens, uint[] calldata newBorrowCaps) external {\\r\\n        require(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"only admin or borrow cap guardian can set borrow caps\\\");\\r\\n\\r\\n        uint numMarkets = vTokens.length;\\r\\n        uint numBorrowCaps = newBorrowCaps.length;\\r\\n\\r\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\r\\n\\r\\n        for(uint i = 0; i < numMarkets; i++) {\\r\\n            borrowCaps[address(vTokens[i])] = newBorrowCaps[i];\\r\\n            emit NewBorrowCap(vTokens[i], newBorrowCaps[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin function to change the Borrow Cap Guardian\\r\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\r\\n     */\\r\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\r\\n        ensureAdmin();\\r\\n        ensureNonzeroAddress(newBorrowCapGuardian);\\r\\n\\r\\n        // Save current value for inclusion in log\\r\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\r\\n\\r\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\r\\n        borrowCapGuardian = newBorrowCapGuardian;\\r\\n\\r\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\r\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set whole protocol pause/unpause state\\r\\n     */\\r\\n    function _setProtocolPaused(bool state) external validPauseState(state) returns(bool) {\\r\\n        protocolPaused = state;\\r\\n        emit ActionProtocolPaused(state);\\r\\n        return state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new VAI controller\\r\\n      * @dev Admin function to set a new VAI controller\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setVAIController(VAIControllerInterface vaiController_) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_VAICONTROLLER_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        ensureNonzeroAddress(address(vaiController_));\\r\\n\\r\\n        VAIControllerInterface oldVaiController = vaiController;\\r\\n        vaiController = vaiController_;\\r\\n        emit NewVAIController(oldVaiController, vaiController_);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _setVAIMintRate(uint newVAIMintRate) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_VAI_MINT_RATE_CHECK);\\r\\n        }\\r\\n\\r\\n        uint oldVAIMintRate = vaiMintRate;\\r\\n        vaiMintRate = newVAIMintRate;\\r\\n        emit NewVAIMintRate(oldVAIMintRate, newVAIMintRate);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _setTreasuryData(address newTreasuryGuardian, address newTreasuryAddress, uint newTreasuryPercent) external returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (!(msg.sender == admin || msg.sender == treasuryGuardian)) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_TREASURY_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        require(newTreasuryPercent < 1e18, \\\"treasury percent cap overflow\\\");\\r\\n        ensureNonzeroAddress(newTreasuryGuardian);\\r\\n        ensureNonzeroAddress(newTreasuryAddress);\\r\\n\\r\\n        address oldTreasuryGuardian = treasuryGuardian;\\r\\n        address oldTreasuryAddress = treasuryAddress;\\r\\n        uint oldTreasuryPercent = treasuryPercent;\\r\\n\\r\\n        treasuryGuardian = newTreasuryGuardian;\\r\\n        treasuryAddress = newTreasuryAddress;\\r\\n        treasuryPercent = newTreasuryPercent;\\r\\n\\r\\n        emit NewTreasuryGuardian(oldTreasuryGuardian, newTreasuryGuardian);\\r\\n        emit NewTreasuryAddress(oldTreasuryAddress, newTreasuryAddress);\\r\\n        emit NewTreasuryPercent(oldTreasuryPercent, newTreasuryPercent);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    function _become(Unitroller unitroller) external {\\r\\n        require(msg.sender == unitroller.admin(), \\\"only unitroller admin can\\\");\\r\\n        require(unitroller._acceptImplementation() == 0, \\\"not authorized\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\r\\n     */\\r\\n    function adminOrInitializing() internal view returns (bool) {\\r\\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\\r\\n    }\\r\\n\\r\\n    /*** Venus Distribution ***/\\r\\n\\r\\n    function setVenusSpeedInternal(VToken vToken, uint venusSpeed) internal {\\r\\n        uint currentVenusSpeed = venusSpeeds[address(vToken)];\\r\\n        if (currentVenusSpeed != 0) {\\r\\n            // note that XVS speed could be set to 0 to halt liquidity rewards for a market\\r\\n            Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\\r\\n            updateVenusSupplyIndex(address(vToken));\\r\\n            updateVenusBorrowIndex(address(vToken), borrowIndex);\\r\\n        } else if (venusSpeed != 0) {\\r\\n            // Add the XVS market\\r\\n            Market memory market = markets[address(vToken)];\\r\\n            require(market.isListed, \\\"venus market is not listed\\\");\\r\\n\\r\\n            if (venusSupplyState[address(vToken)].index == 0 && venusSupplyState[address(vToken)].block == 0) {\\r\\n                venusSupplyState[address(vToken)] = VenusMarketState({\\r\\n                    index: venusInitialIndex,\\r\\n                    block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\r\\n                });\\r\\n            }\\r\\n\\r\\n\\r\\n        if (venusBorrowState[address(vToken)].index == 0 && venusBorrowState[address(vToken)].block == 0) {\\r\\n                venusBorrowState[address(vToken)] = VenusMarketState({\\r\\n                    index: venusInitialIndex,\\r\\n                    block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (currentVenusSpeed != venusSpeed) {\\r\\n            venusSpeeds[address(vToken)] = venusSpeed;\\r\\n            emit VenusSpeedUpdated(vToken, venusSpeed);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ComptrollerLens contract address\\r\\n     */\\r\\n    function _setComptrollerLens(ComptrollerLensInterface comptrollerLens_) external returns (uint) {\\r\\n        ensureAdmin();\\r\\n        ensureNonzeroAddress(address(comptrollerLens_));\\r\\n        address oldComptrollerLens = address(comptrollerLens);\\r\\n        comptrollerLens = comptrollerLens_;\\r\\n        emit NewComptrollerLens(oldComptrollerLens, address(comptrollerLens));\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue XVS to the market by updating the supply index\\r\\n     * @param vToken The market whose supply index to update\\r\\n     */\\r\\n    function updateVenusSupplyIndex(address vToken) internal {\\r\\n        VenusMarketState storage supplyState = venusSupplyState[vToken];\\r\\n        uint supplySpeed = venusSpeeds[vToken];\\r\\n        uint blockNumber = getBlockNumber();\\r\\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\\r\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\r\\n            uint supplyTokens = VToken(vToken).totalSupply();\\r\\n            uint venusAccrued = mul_(deltaBlocks, supplySpeed);\\r\\n            Double memory ratio = supplyTokens > 0 ? fraction(venusAccrued, supplyTokens) : Double({mantissa: 0});\\r\\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\\r\\n            venusSupplyState[vToken] = VenusMarketState({\\r\\n                index: safe224(index.mantissa, \\\"new index overflows\\\"),\\r\\n                block: safe32(blockNumber, \\\"block number overflows\\\")\\r\\n            });\\r\\n        } else if (deltaBlocks > 0) {\\r\\n            supplyState.block = safe32(blockNumber, \\\"block number overflows\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue XVS to the market by updating the borrow index\\r\\n     * @param vToken The market whose borrow index to update\\r\\n     */\\r\\n    function updateVenusBorrowIndex(address vToken, Exp memory marketBorrowIndex) internal {\\r\\n        VenusMarketState storage borrowState = venusBorrowState[vToken];\\r\\n        uint borrowSpeed = venusSpeeds[vToken];\\r\\n        uint blockNumber = getBlockNumber();\\r\\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\\r\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\r\\n            uint borrowAmount = div_(VToken(vToken).totalBorrows(), marketBorrowIndex);\\r\\n            uint venusAccrued = mul_(deltaBlocks, borrowSpeed);\\r\\n            Double memory ratio = borrowAmount > 0 ? fraction(venusAccrued, borrowAmount) : Double({mantissa: 0});\\r\\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\\r\\n            venusBorrowState[vToken] = VenusMarketState({\\r\\n                index: safe224(index.mantissa, \\\"new index overflows\\\"),\\r\\n                block: safe32(blockNumber, \\\"block number overflows\\\")\\r\\n            });\\r\\n        } else if (deltaBlocks > 0) {\\r\\n            borrowState.block = safe32(blockNumber, \\\"block number overflows\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate XVS accrued by a supplier and possibly transfer it to them\\r\\n     * @param vToken The market in which the supplier is interacting\\r\\n     * @param supplier The address of the supplier to distribute XVS to\\r\\n     */\\r\\n    function distributeSupplierVenus(address vToken, address supplier) internal {\\r\\n        if (address(vaiVaultAddress) != address(0)) {\\r\\n            releaseToVault();\\r\\n        }\\r\\n\\r\\n        VenusMarketState memory supplyState = venusSupplyState[vToken];\\r\\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\\r\\n        Double memory supplierIndex = Double({mantissa: venusSupplierIndex[vToken][supplier]});\\r\\n        venusSupplierIndex[vToken][supplier] = supplyIndex.mantissa;\\r\\n\\r\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\r\\n            supplierIndex.mantissa = venusInitialIndex;\\r\\n        }\\r\\n\\r\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\r\\n        uint supplierTokens = VToken(vToken).balanceOf(supplier);\\r\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\r\\n        uint supplierAccrued = add_(venusAccrued[supplier], supplierDelta);\\r\\n        venusAccrued[supplier] = supplierAccrued;\\r\\n        emit DistributedSupplierVenus(VToken(vToken), supplier, supplierDelta, supplyIndex.mantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate XVS accrued by a borrower and possibly transfer it to them\\r\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\r\\n     * @param vToken The market in which the borrower is interacting\\r\\n     * @param borrower The address of the borrower to distribute XVS to\\r\\n     */\\r\\n    function distributeBorrowerVenus(address vToken, address borrower, Exp memory marketBorrowIndex) internal {\\r\\n        if (address(vaiVaultAddress) != address(0)) {\\r\\n            releaseToVault();\\r\\n        }\\r\\n\\r\\n        VenusMarketState memory borrowState = venusBorrowState[vToken];\\r\\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\\r\\n        Double memory borrowerIndex = Double({mantissa: venusBorrowerIndex[vToken][borrower]});\\r\\n        venusBorrowerIndex[vToken][borrower] = borrowIndex.mantissa;\\r\\n\\r\\n        if (borrowerIndex.mantissa > 0) {\\r\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\r\\n            uint borrowerAmount = div_(VToken(vToken).borrowBalanceStored(borrower), marketBorrowIndex);\\r\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\r\\n            uint borrowerAccrued = add_(venusAccrued[borrower], borrowerDelta);\\r\\n            venusAccrued[borrower] = borrowerAccrued;\\r\\n            emit DistributedBorrowerVenus(VToken(vToken), borrower, borrowerDelta, borrowIndex.mantissa);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the xvs accrued by holder in all markets and VAI\\r\\n     * @param holder The address to claim XVS for\\r\\n     */\\r\\n    function claimVenus(address holder) public {\\r\\n        return claimVenus(holder, allMarkets);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the xvs accrued by holder in the specified markets\\r\\n     * @param holder The address to claim XVS for\\r\\n     * @param vTokens The list of markets to claim XVS in\\r\\n     */\\r\\n    function claimVenus(address holder, VToken[] memory vTokens) public {\\r\\n        address[] memory holders = new address[](1);\\r\\n        holders[0] = holder;\\r\\n        claimVenus(holders, vTokens, true, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all xvs accrued by the holders\\r\\n     * @param holders The addresses to claim XVS for\\r\\n     * @param vTokens The list of markets to claim XVS in\\r\\n     * @param borrowers Whether or not to claim XVS earned by borrowing\\r\\n     * @param suppliers Whether or not to claim XVS earned by supplying\\r\\n     */\\r\\n     function claimVenus(address[] memory holders, VToken[] memory vTokens, bool borrowers, bool suppliers) public {\\r\\n        claimVenus(holders, vTokens, borrowers, suppliers, false);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all xvs accrued by the holders\\r\\n     * @param holders The addresses to claim XVS for\\r\\n     * @param vTokens The list of markets to claim XVS in\\r\\n     * @param borrowers Whether or not to claim XVS earned by borrowing\\r\\n     * @param suppliers Whether or not to claim XVS earned by supplying\\r\\n     * @param collateral Whether or not to use XVS earned as collateral, only takes effect when the holder has a shortfall\\r\\n     */\\r\\n    function claimVenus(address[] memory holders, VToken[] memory vTokens, bool borrowers, bool suppliers, bool collateral) public {\\r\\n        uint j;\\r\\n        // Save shortfalls of all holders\\r\\n        // if there is a positive shortfall, the XVS reward is accrued,\\r\\n        // but won't be granted to this holder\\r\\n        uint[] memory shortfalls = new uint[](holders.length);\\r\\n        for (j = 0; j < holders.length; j++) {\\r\\n            (, , uint shortfall) = getHypotheticalAccountLiquidityInternal(holders[j], VToken(0), 0, 0);\\r\\n            shortfalls[j] = shortfall;\\r\\n        }\\r\\n        for (uint i = 0; i < vTokens.length; i++) {\\r\\n            VToken vToken = vTokens[i];\\r\\n            require(markets[address(vToken)].isListed, \\\"not listed market\\\");\\r\\n            if (borrowers) {\\r\\n                Exp memory borrowIndex = Exp({mantissa: vToken.borrowIndex()});\\r\\n                updateVenusBorrowIndex(address(vToken), borrowIndex);\\r\\n                for (j = 0; j < holders.length; j++) {\\r\\n                    distributeBorrowerVenus(address(vToken), holders[j], borrowIndex);\\r\\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]], shortfalls[j], collateral);\\r\\n                }\\r\\n            }\\r\\n            if (suppliers) {\\r\\n                updateVenusSupplyIndex(address(vToken));\\r\\n                for (j = 0; j < holders.length; j++) {\\r\\n                    distributeSupplierVenus(address(vToken), holders[j]);\\r\\n                    venusAccrued[holders[j]] = grantXVSInternal(holders[j], venusAccrued[holders[j]], shortfalls[j], collateral);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim all the xvs accrued by holder in all markets, a shorthand for `claimVenus` with collateral set to `true`\\r\\n     * @param holder The address to claim XVS for\\r\\n     */\\r\\n    function claimVenusAsCollateral(address holder) external {\\r\\n        address[] memory holders = new address[](1);\\r\\n        holders[0] = holder;\\r\\n        claimVenus(holders, allMarkets, true, true, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer XVS to the user with user's shortfall considered\\r\\n     * @dev Note: If there is not enough XVS, we do not perform the transfer all.\\r\\n     * @param user The address of the user to transfer XVS to\\r\\n     * @param amount The amount of XVS to (possibly) transfer\\r\\n     * @param shortfall The shortfall of the user\\r\\n     * @param collateral Whether or not we will use user's venus reward as collateral to pay off the debt\\r\\n     * @return The amount of XVS which was NOT transferred to the user\\r\\n     */\\r\\n    function grantXVSInternal(address user, uint amount, uint shortfall, bool collateral) internal returns (uint) {\\r\\n        XVS xvs = XVS(getXVSAddress());\\r\\n        uint venusRemaining = xvs.balanceOf(address(this));\\r\\n        bool bankrupt = shortfall > 0;\\r\\n\\r\\n        if (amount == 0 || amount > venusRemaining) {\\r\\n            return amount;\\r\\n        }\\r\\n\\r\\n        // If user's not bankrupt, user can get the reward,\\r\\n        // so the liquidators will have chances to liquidate bankrupt accounts\\r\\n        if (!bankrupt) {\\r\\n            xvs.transfer(user, amount);\\r\\n            return 0;\\r\\n        }\\r\\n        // If user's bankrupt and doesn't use pending xvs as collateral, don't grant\\r\\n        // anything, otherwise, we will transfer the pending xvs as collateral to \\r\\n        // vXVS token and mint vXVS for the user.\\r\\n        // \\r\\n        // If mintBehalf failed, don't grant any xvs\\r\\n        require(collateral, \\\"bankrupt accounts can only collateralize their pending xvs rewards\\\");\\r\\n\\r\\n        xvs.approve(getXVSVTokenAddress(), amount);\\r\\n        require(\\r\\n            VBep20Interface(getXVSVTokenAddress()).mintBehalf(user, amount) == uint(Error.NO_ERROR),\\r\\n            \\\"mint behalf error during collateralize xvs\\\"\\r\\n        );\\r\\n\\r\\n        // set venusAccrue[user] to 0\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /*** Venus Distribution Admin ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer XVS to the recipient\\r\\n     * @dev Note: If there is not enough XVS, we do not perform the transfer all.\\r\\n     * @param recipient The address of the recipient to transfer XVS to\\r\\n     * @param amount The amount of XVS to (possibly) transfer\\r\\n     */\\r\\n    function _grantXVS(address recipient, uint amount) external {\\r\\n        require(adminOrInitializing(), \\\"only admin or impl can grant xvs\\\");\\r\\n        uint amountLeft = grantXVSInternal(recipient, amount, 0, false);\\r\\n        require(amountLeft == 0, \\\"insufficient xvs for grant\\\");\\r\\n        emit VenusGranted(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the amount of XVS distributed per block to VAI Vault\\r\\n     * @param venusVAIVaultRate_ The amount of XVS wei per block to distribute to VAI Vault\\r\\n     */\\r\\n    function _setVenusVAIVaultRate(uint venusVAIVaultRate_) external {\\r\\n        ensureAdmin();\\r\\n\\r\\n        uint oldVenusVAIVaultRate = venusVAIVaultRate;\\r\\n        venusVAIVaultRate = venusVAIVaultRate_;\\r\\n        emit NewVenusVAIVaultRate(oldVenusVAIVaultRate, venusVAIVaultRate_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the VAI Vault infos\\r\\n     * @param vault_ The address of the VAI Vault\\r\\n     * @param releaseStartBlock_ The start block of release to VAI Vault\\r\\n     * @param minReleaseAmount_ The minimum release amount to VAI Vault\\r\\n     */\\r\\n    function _setVAIVaultInfo(address vault_, uint256 releaseStartBlock_, uint256 minReleaseAmount_) external {\\r\\n        ensureAdmin();\\r\\n        ensureNonzeroAddress(vault_);\\r\\n\\r\\n        vaiVaultAddress = vault_;\\r\\n        releaseStartBlock = releaseStartBlock_;\\r\\n        minReleaseAmount = minReleaseAmount_;\\r\\n        emit NewVAIVaultInfo(vault_, releaseStartBlock_, minReleaseAmount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set XVS speed for a single market\\r\\n     * @param vToken The market whose XVS speed to update\\r\\n     * @param venusSpeed New XVS speed for market\\r\\n     */\\r\\n    function _setVenusSpeed(VToken vToken, uint venusSpeed) external {\\r\\n        require(adminOrInitializing(), \\\"only admin or impl can set venus speed\\\");\\r\\n        ensureNonzeroAddress(address(vToken));\\r\\n        setVenusSpeedInternal(vToken, venusSpeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return all of the markets\\r\\n     * @dev The automatic getter may be used to access an individual market.\\r\\n     * @return The list of market addresses\\r\\n     */\\r\\n    function getAllMarkets() public view returns (VToken[] memory) {\\r\\n        return allMarkets;\\r\\n    }\\r\\n\\r\\n    function getBlockNumber() public view returns (uint) {\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the address of the XVS token\\r\\n     * @return The address of XVS\\r\\n     */\\r\\n    function getXVSAddress() public view returns (address) {\\r\\n        return 0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the address of the XVS vToken\\r\\n     * @return The address of XVS vToken\\r\\n     */\\r\\n    function getXVSVTokenAddress() public view returns (address) {\\r\\n        return 0x151B1e2635A717bcDc836ECd6FbB62B674FE3E1D;\\r\\n    }\\r\\n\\r\\n    /*** VAI functions ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Set the minted VAI amount of the `owner`\\r\\n     * @param owner The address of the account to set\\r\\n     * @param amount The amount of VAI to set to the account\\r\\n     * @return The number of minted VAI by `owner`\\r\\n     */\\r\\n    function setMintedVAIOf(address owner, uint amount) external onlyProtocolAllowed returns (uint) {\\r\\n        // Pausing is a very serious situation - we revert to sound the alarms\\r\\n        require(!mintVAIGuardianPaused && !repayVAIGuardianPaused, \\\"VAI is paused\\\");\\r\\n        // Check caller is vaiController\\r\\n        if (msg.sender != address(vaiController)) {\\r\\n            return fail(Error.REJECTION, FailureInfo.SET_MINTED_VAI_REJECTION);\\r\\n        }\\r\\n        mintedVAIs[owner] = amount;\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer XVS to VAI Vault\\r\\n     */\\r\\n    function releaseToVault() public {\\r\\n        if(releaseStartBlock == 0 || getBlockNumber() < releaseStartBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        XVS xvs = XVS(getXVSAddress());\\r\\n\\r\\n        uint256 xvsBalance = xvs.balanceOf(address(this));\\r\\n        if(xvsBalance == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 actualAmount;\\r\\n        uint256 deltaBlocks = sub_(getBlockNumber(), releaseStartBlock);\\r\\n        // releaseAmount = venusVAIVaultRate * deltaBlocks\\r\\n        uint256 _releaseAmount = mul_(venusVAIVaultRate, deltaBlocks);\\r\\n\\r\\n        if (xvsBalance >= _releaseAmount) {\\r\\n            actualAmount = _releaseAmount;\\r\\n        } else {\\r\\n            actualAmount = xvsBalance;\\r\\n        }\\r\\n\\r\\n        if (actualAmount < minReleaseAmount) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        releaseStartBlock = getBlockNumber();\\r\\n\\r\\n        xvs.transfer(vaiVaultAddress, actualAmount);\\r\\n        emit DistributedVAIVaultVenus(actualAmount);\\r\\n\\r\\n        IVAIVault(vaiVaultAddress).updatePendingRewards();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x78f7a3127e98d4c101a497a48693ae38b8f062c8e76d832b0cbb4a5d0690967e\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ncontract ComptrollerInterfaceG1 {\\r\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n    bool public constant isComptroller = true;\\r\\n\\r\\n    /*** Assets You Are In ***/\\r\\n\\r\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\r\\n    function exitMarket(address vToken) external returns (uint);\\r\\n\\r\\n    /*** Policy Hooks ***/\\r\\n\\r\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\r\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\r\\n\\r\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\r\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\r\\n\\r\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\r\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\r\\n\\r\\n    function repayBorrowAllowed(\\r\\n        address vToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount) external returns (uint);\\r\\n    function repayBorrowVerify(\\r\\n        address vToken,\\r\\n        address payer,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint borrowerIndex) external;\\r\\n\\r\\n    function liquidateBorrowAllowed(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount) external returns (uint);\\r\\n    function liquidateBorrowVerify(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint repayAmount,\\r\\n        uint seizeTokens) external;\\r\\n\\r\\n    function seizeAllowed(\\r\\n        address vTokenCollateral,\\r\\n        address vTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external returns (uint);\\r\\n    function seizeVerify(\\r\\n        address vTokenCollateral,\\r\\n        address vTokenBorrowed,\\r\\n        address liquidator,\\r\\n        address borrower,\\r\\n        uint seizeTokens) external;\\r\\n\\r\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\r\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\r\\n\\r\\n    /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address vTokenBorrowed,\\r\\n        address vTokenCollateral,\\r\\n        uint repayAmount) external view returns (uint, uint);\\r\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\r\\n}\\r\\n\\r\\ncontract ComptrollerInterfaceG2 is ComptrollerInterfaceG1 {\\r\\n    function liquidateVAICalculateSeizeTokens(\\r\\n        address vTokenCollateral,\\r\\n        uint repayAmount) external view returns (uint, uint);\\r\\n}\\r\\n\\r\\ncontract ComptrollerInterface is ComptrollerInterfaceG2 {\\r\\n}\\r\\n\\r\\ninterface IVAIVault {\\r\\n    function updatePendingRewards() external;\\r\\n}\\r\\n\\r\\ninterface IComptroller {\\r\\n    function liquidationIncentiveMantissa() external view returns (uint);\\r\\n    /*** Treasury Data ***/\\r\\n    function treasuryAddress() external view returns (address);\\r\\n    function treasuryPercent() external view returns (uint);\\r\\n}\",\"keccak256\":\"0x6f57c7c8e3c865de54605f6608be54eb926efeae3588390b88a397ceef665093\"},\"contracts/ComptrollerLensInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\n\\r\\ninterface ComptrollerLensInterface {\\r\\n    function liquidateCalculateSeizeTokens(\\r\\n        address comptroller, \\r\\n        address vTokenBorrowed, \\r\\n        address vTokenCollateral, \\r\\n        uint actualRepayAmount\\r\\n    ) external view returns (uint, uint);\\r\\n    function liquidateVAICalculateSeizeTokens(\\r\\n        address comptroller,\\r\\n        address vTokenCollateral, \\r\\n        uint actualRepayAmount\\r\\n    ) external view returns (uint, uint);\\r\\n    function getHypotheticalAccountLiquidity(\\r\\n        address comptroller,\\r\\n        address account,\\r\\n        VToken vTokenModify,\\r\\n        uint redeemTokens,\\r\\n        uint borrowAmount) external view returns (uint, uint, uint);\\r\\n}\",\"keccak256\":\"0x64bc26d86ccdf3bfb4f509a41b3138cad1cd9a27ff54181eff3f39be59b370e1\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\nimport \\\"./VAIControllerInterface.sol\\\";\\r\\nimport \\\"./ComptrollerLensInterface.sol\\\";\\r\\n\\r\\ncontract UnitrollerAdminStorage {\\r\\n    /**\\r\\n    * @notice Administrator for this contract\\r\\n    */\\r\\n    address public admin;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending administrator for this contract\\r\\n    */\\r\\n    address public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n    * @notice Active brains of Unitroller\\r\\n    */\\r\\n    address public comptrollerImplementation;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending brains of Unitroller\\r\\n    */\\r\\n    address public pendingComptrollerImplementation;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\r\\n\\r\\n    /**\\r\\n     * @notice Oracle which gives the price of any given asset\\r\\n     */\\r\\n    PriceOracle public oracle;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\r\\n     */\\r\\n    uint public closeFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\r\\n     */\\r\\n    uint public liquidationIncentiveMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\r\\n     */\\r\\n    uint public maxAssets;\\r\\n\\r\\n    /**\\r\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\r\\n     */\\r\\n    mapping(address => VToken[]) public accountAssets;\\r\\n\\r\\n    struct Market {\\r\\n        /// @notice Whether or not this market is listed\\r\\n        bool isListed;\\r\\n\\r\\n        /**\\r\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\r\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\r\\n         *  Must be between 0 and 1, and stored as a mantissa.\\r\\n         */\\r\\n        uint collateralFactorMantissa;\\r\\n\\r\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\r\\n        mapping(address => bool) accountMembership;\\r\\n\\r\\n        /// @notice Whether or not this market receives XVS\\r\\n        bool isVenus;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Official mapping of vTokens -> Market metadata\\r\\n     * @dev Used e.g. to determine if a market is supported\\r\\n     */\\r\\n    mapping(address => Market) public markets;\\r\\n\\r\\n    /**\\r\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\r\\n     *  Actions which allow users to remove their own assets cannot be paused.\\r\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\r\\n     */\\r\\n    address public pauseGuardian;\\r\\n    bool public _mintGuardianPaused;\\r\\n    bool public _borrowGuardianPaused;\\r\\n    bool public transferGuardianPaused;\\r\\n    bool public seizeGuardianPaused;\\r\\n    mapping(address => bool) public mintGuardianPaused;\\r\\n    mapping(address => bool) public borrowGuardianPaused;\\r\\n\\r\\n    struct VenusMarketState {\\r\\n        /// @notice The market's last updated venusBorrowIndex or venusSupplyIndex\\r\\n        uint224 index;\\r\\n\\r\\n        /// @notice The block number the index was last updated at\\r\\n        uint32 block;\\r\\n    }\\r\\n\\r\\n    /// @notice A list of all markets\\r\\n    VToken[] public allMarkets;\\r\\n\\r\\n    /// @notice The rate at which the flywheel distributes XVS, per block\\r\\n    uint public venusRate;\\r\\n\\r\\n    /// @notice The portion of venusRate that each market currently receives\\r\\n    mapping(address => uint) public venusSpeeds;\\r\\n\\r\\n    /// @notice The Venus market supply state for each market\\r\\n    mapping(address => VenusMarketState) public venusSupplyState;\\r\\n\\r\\n    /// @notice The Venus market borrow state for each market\\r\\n    mapping(address => VenusMarketState) public venusBorrowState;\\r\\n\\r\\n    /// @notice The Venus supply index for each market for each supplier as of the last time they accrued XVS\\r\\n    mapping(address => mapping(address => uint)) public venusSupplierIndex;\\r\\n\\r\\n    /// @notice The Venus borrow index for each market for each borrower as of the last time they accrued XVS\\r\\n    mapping(address => mapping(address => uint)) public venusBorrowerIndex;\\r\\n\\r\\n    /// @notice The XVS accrued but not yet transferred to each user\\r\\n    mapping(address => uint) public venusAccrued;\\r\\n\\r\\n    /// @notice The Address of VAIController\\r\\n    VAIControllerInterface public vaiController;\\r\\n\\r\\n    /// @notice The minted VAI amount to each user\\r\\n    mapping(address => uint) public mintedVAIs;\\r\\n\\r\\n    /// @notice VAI Mint Rate as a percentage\\r\\n    uint public vaiMintRate;\\r\\n\\r\\n    /**\\r\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\r\\n     */\\r\\n    bool public mintVAIGuardianPaused;\\r\\n    bool public repayVAIGuardianPaused;\\r\\n\\r\\n    /**\\r\\n     * @notice Pause/Unpause whole protocol actions\\r\\n     */\\r\\n    bool public protocolPaused;\\r\\n\\r\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Minters, per block\\r\\n    uint public venusVAIRate;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\r\\n    /// @notice The rate at which the flywheel distributes XVS to VAI Vault, per block\\r\\n    uint public venusVAIVaultRate;\\r\\n\\r\\n    // address of VAI Vault\\r\\n    address public vaiVaultAddress;\\r\\n\\r\\n    // start block of release to VAI Vault\\r\\n    uint256 public releaseStartBlock;\\r\\n\\r\\n    // minimum release amount to VAI Vault\\r\\n    uint256 public minReleaseAmount;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\r\\n    /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\r\\n    address public borrowCapGuardian;\\r\\n\\r\\n    /// @notice Borrow caps enforced by borrowAllowed for each vToken address. Defaults to zero which corresponds to unlimited borrowing.\\r\\n    mapping(address => uint) public borrowCaps;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\r\\n    /// @notice Treasury Guardian address\\r\\n    address public treasuryGuardian;\\r\\n\\r\\n    /// @notice Treasury address\\r\\n    address public treasuryAddress;\\r\\n\\r\\n    /// @notice Fee percent of accrued interest with decimal 18\\r\\n    uint256 public treasuryPercent;\\r\\n}\\r\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\r\\n    /// @notice The portion of XVS that each contributor receives per block\\r\\n    mapping(address => uint) public venusContributorSpeeds;\\r\\n\\r\\n    /// @notice Last block at which a contributor's XVS rewards have been allocated\\r\\n    mapping(address => uint) public lastContributorBlock;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\r\\n    address public liquidatorContract;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\r\\n    ComptrollerLensInterface public comptrollerLens;\\r\\n}\",\"keccak256\":\"0x7683d3fdf6849b79b6413c622cee47497f84ffe0f375eafc438f925cc768f6d8\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n * @title BEP 20 Token Standard Interface\\r\\n *  https://eips.ethereum.org/EIPS/eip-20\\r\\n */\\r\\ninterface EIP20Interface {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the total number of tokens in circulation\\r\\n      * @return The supply of tokens\\r\\n      */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      * @return Whether or not the transfer succeeded\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n      * @return Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x33c5c2c7a45637618ec3ff2741c6902c356ef9ced300a0779edb5238791bf70f\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n * @title EIP20NonStandardInterface\\r\\n * @dev Version of BEP20 with no return values for `transfer` and `transferFrom`\\r\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n */\\r\\ninterface EIP20NonStandardInterface {\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total number of tokens in circulation\\r\\n     * @return The supply of tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the balance of the specified address\\r\\n     * @param owner The address from which the balance will be retrieved\\r\\n     * @return The balance\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the BEP-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transfer(address dst, uint256 amount) external;\\r\\n\\r\\n    ///\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the BEP-20 specification\\r\\n    /// !!!!!!!!!!!!!!\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n      * @param src The address of the source account\\r\\n      * @param dst The address of the destination account\\r\\n      * @param amount The number of tokens to transfer\\r\\n      */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n      * @dev This will overwrite the approval amount for `spender`\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @param amount The number of tokens that are approved\\r\\n      * @return Whether or not the approval succeeded\\r\\n      */\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n\\r\\n    /**\\r\\n      * @notice Get the current allowance from `owner` for `spender`\\r\\n      * @param owner The address of the account which owns the tokens to be spent\\r\\n      * @param spender The address of the account which may transfer tokens\\r\\n      * @return The number of tokens allowed to be spent\\r\\n      */\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x210d80c5343b519cbb0745bc5c7157b79100c5870c80a90596bbeff9186c2b5c\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ncontract ComptrollerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        COMPTROLLER_MISMATCH,\\r\\n        INSUFFICIENT_SHORTFALL,\\r\\n        INSUFFICIENT_LIQUIDITY,\\r\\n        INVALID_CLOSE_FACTOR,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        INVALID_LIQUIDATION_INCENTIVE,\\r\\n        MARKET_NOT_ENTERED, // no longer possible\\r\\n        MARKET_NOT_LISTED,\\r\\n        MARKET_ALREADY_LISTED,\\r\\n        MATH_ERROR,\\r\\n        NONZERO_BORROW_BALANCE,\\r\\n        PRICE_ERROR,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        TOO_MANY_ASSETS,\\r\\n        TOO_MUCH_REPAY,\\r\\n        INSUFFICIENT_BALANCE_FOR_VAI\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        EXIT_MARKET_BALANCE_OWED,\\r\\n        EXIT_MARKET_REJECTION,\\r\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\r\\n        SET_CLOSE_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\r\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\r\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\r\\n        SUPPORT_MARKET_EXISTS,\\r\\n        SUPPORT_MARKET_OWNER_CHECK,\\r\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\r\\n        SET_VAI_MINT_RATE_CHECK,\\r\\n        SET_VAICONTROLLER_OWNER_CHECK,\\r\\n        SET_MINTED_VAI_REJECTION,\\r\\n        SET_TREASURY_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        BAD_INPUT,\\r\\n        COMPTROLLER_REJECTION,\\r\\n        COMPTROLLER_CALCULATION_ERROR,\\r\\n        INTEREST_RATE_MODEL_ERROR,\\r\\n        INVALID_ACCOUNT_PAIR,\\r\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\r\\n        INVALID_COLLATERAL_FACTOR,\\r\\n        MATH_ERROR,\\r\\n        MARKET_NOT_FRESH,\\r\\n        MARKET_NOT_LISTED,\\r\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\r\\n        TOKEN_INSUFFICIENT_BALANCE,\\r\\n        TOKEN_INSUFFICIENT_CASH,\\r\\n        TOKEN_TRANSFER_IN_FAILED,\\r\\n        TOKEN_TRANSFER_OUT_FAILED,\\r\\n        TOKEN_PRICE_ERROR\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\r\\n     *       This is because FailureInfo grows significantly faster, and\\r\\n     *       the order of Error has some meaning, while the order of FailureInfo\\r\\n     *       is entirely arbitrary.\\r\\n     */\\r\\n    enum FailureInfo {\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\r\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\r\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        BORROW_CASH_NOT_AVAILABLE,\\r\\n        BORROW_FRESHNESS_CHECK,\\r\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        BORROW_MARKET_NOT_LISTED,\\r\\n        BORROW_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\r\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\r\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\r\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\r\\n        LIQUIDATE_FRESHNESS_CHECK,\\r\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\r\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\r\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\r\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\r\\n        MINT_ACCRUE_INTEREST_FAILED,\\r\\n        MINT_COMPTROLLER_REJECTION,\\r\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\r\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\r\\n        MINT_FRESHNESS_CHECK,\\r\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        MINT_TRANSFER_IN_FAILED,\\r\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\r\\n        REDEEM_COMPTROLLER_REJECTION,\\r\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\r\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\r\\n        REDEEM_FRESHNESS_CHECK,\\r\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\r\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\r\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        REDUCE_RESERVES_ADMIN_CHECK,\\r\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\r\\n        REDUCE_RESERVES_FRESH_CHECK,\\r\\n        REDUCE_RESERVES_VALIDATION,\\r\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\r\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\r\\n        REPAY_BORROW_FRESHNESS_CHECK,\\r\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\r\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\r\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\r\\n        SET_COMPTROLLER_OWNER_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\r\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\r\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\r\\n        SET_MAX_ASSETS_OWNER_CHECK,\\r\\n        SET_ORACLE_MARKET_NOT_LISTED,\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\r\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\r\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\r\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\r\\n        TRANSFER_COMPTROLLER_REJECTION,\\r\\n        TRANSFER_NOT_ALLOWED,\\r\\n        TRANSFER_NOT_ENOUGH,\\r\\n        TRANSFER_TOO_MUCH,\\r\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\r\\n        ADD_RESERVES_FRESH_CHECK,\\r\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\r\\n        TOKEN_GET_UNDERLYING_PRICE_ERROR,\\r\\n        REPAY_VAI_COMPTROLLER_REJECTION,\\r\\n        REPAY_VAI_FRESHNESS_CHECK,\\r\\n        VAI_MINT_EXCHANGE_CALCULATION_FAILED,\\r\\n        SFT_MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\r\\n        REDEEM_FEE_CALCULATION_FAILED\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract VAIControllerErrorReporter {\\r\\n    enum Error {\\r\\n        NO_ERROR,\\r\\n        UNAUTHORIZED,\\r\\n        REJECTION,\\r\\n        SNAPSHOT_ERROR,\\r\\n        PRICE_ERROR,\\r\\n        MATH_ERROR,\\r\\n        INSUFFICIENT_BALANCE_FOR_VAI\\r\\n    }\\r\\n\\r\\n    enum FailureInfo {\\r\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\r\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\r\\n        SET_COMPTROLLER_OWNER_CHECK,\\r\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\r\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\r\\n        VAI_MINT_REJECTION,\\r\\n        VAI_BURN_REJECTION,\\r\\n        VAI_LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\r\\n        VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\r\\n        VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\r\\n        VAI_LIQUIDATE_COMPTROLLER_REJECTION,\\r\\n        VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\r\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\r\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\r\\n        VAI_LIQUIDATE_FRESHNESS_CHECK,\\r\\n        VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\r\\n        VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\r\\n        VAI_LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\r\\n        VAI_LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\r\\n        VAI_LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\r\\n        VAI_LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\r\\n        VAI_LIQUIDATE_SEIZE_TOO_MUCH,\\r\\n        MINT_FEE_CALCULATION_FAILED,\\r\\n        SET_TREASURY_OWNER_CHECK\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\r\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\r\\n      **/\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\r\\n      */\\r\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), 0);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\r\\n      */\\r\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\r\\n        emit Failure(uint(err), uint(info), opaqueError);\\r\\n\\r\\n        return uint(err);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x08bdc77bdcb6954ce9d0367de18184644f30afdc959f54e226788e8813ea3654\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./CarefulMath.sol\\\";\\r\\nimport \\\"./ExponentialNoError.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Venus\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract Exponential is CarefulMath, ExponentialNoError {\\r\\n    /**\\r\\n     * @dev Creates an exponential from numerator and denominator values.\\r\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\r\\n     *            or if `denom` is zero.\\r\\n     */\\r\\n    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\r\\n\\r\\n        return (error, Exp({mantissa: result}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(product));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\r\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return addUInt(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\r\\n     */\\r\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\r\\n     */\\r\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\r\\n        /*\\r\\n          We are doing this as:\\r\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\r\\n\\r\\n          How it works:\\r\\n          Exp = a / b;\\r\\n          Scalar = s;\\r\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\r\\n        */\\r\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n        return getExp(numerator, divisor.mantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\r\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, truncate(fraction));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\r\\n\\r\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\r\\n        if (err0 != MathError.NO_ERROR) {\\r\\n            return (err0, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\r\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\r\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\r\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\r\\n        if (err1 != MathError.NO_ERROR) {\\r\\n            return (err1, Exp({mantissa: 0}));\\r\\n        }\\r\\n\\r\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\r\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\r\\n        assert(err2 == MathError.NO_ERROR);\\r\\n\\r\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\r\\n     */\\r\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\r\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies three exponentials, returning a new exponential.\\r\\n     */\\r\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\r\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\r\\n        if (err != MathError.NO_ERROR) {\\r\\n            return (err, ab);\\r\\n        }\\r\\n        return mulExp(ab, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two exponentials, returning a new exponential.\\r\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\r\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\r\\n     */\\r\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\r\\n        return getExp(a.mantissa, b.mantissa);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9f441978e19b6e2788386a713bbe330345d98a782da025f583d9dbdb716ab745\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n * @title Exponential module for storing fixed-precision decimals\\r\\n * @author Compound\\r\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\r\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\r\\n *         `Exp({mantissa: 5100000000000000000})`.\\r\\n */\\r\\ncontract ExponentialNoError {\\r\\n    uint constant expScale = 1e18;\\r\\n    uint constant doubleScale = 1e36;\\r\\n    uint constant halfExpScale = expScale/2;\\r\\n    uint constant mantissaOne = expScale;\\r\\n\\r\\n    struct Exp {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    struct Double {\\r\\n        uint mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Truncates the given exp to a whole number value.\\r\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\r\\n     */\\r\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\r\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\r\\n        return exp.mantissa / expScale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return truncate(product);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\r\\n     */\\r\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\r\\n        Exp memory product = mul_(a, scalar);\\r\\n        return add_(truncate(product), addend);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if first Exp is less than second Exp.\\r\\n     */\\r\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa < right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp <= right Exp.\\r\\n     */\\r\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa <= right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if left Exp > right Exp.\\r\\n     */\\r\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\r\\n        return left.mantissa > right.mantissa;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns true if Exp is exactly zero\\r\\n     */\\r\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\r\\n        return value.mantissa == 0;\\r\\n    }\\r\\n\\r\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\r\\n        require(n < 2**224, errorMessage);\\r\\n        return uint224(n);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b) pure internal returns (uint) {\\r\\n        return add_(a, b, \\\"addition overflow\\\");\\r\\n    }\\r\\n\\r\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        uint c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\r\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / expScale;\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\r\\n    }\\r\\n\\r\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: mul_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return mul_(a, b.mantissa) / doubleScale;\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\r\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        if (a == 0 || b == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\r\\n        return Exp({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, expScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\r\\n    }\\r\\n\\r\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(a.mantissa, b)});\\r\\n    }\\r\\n\\r\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\r\\n        return div_(mul_(a, doubleScale), b.mantissa);\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b) pure internal returns (uint) {\\r\\n        return div_(a, b, \\\"divide by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\r\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ed4e4fc1926f2db120798edbd049838c4d47fdbf3416a9aeb4a91ae1872dfc7\"},\"contracts/Governance/GovernorAlpha.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ncontract GovernorAlpha {\\r\\n    /// @notice The name of this contract\\r\\n    string public constant name = \\\"Venus Governor Alpha\\\";\\r\\n\\r\\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\r\\n    function quorumVotes() public pure returns (uint) { return 600000e18; } // 600,000 = 2% of XVS\\r\\n\\r\\n    /// @notice The number of votes required in order for a voter to become a proposer\\r\\n    function proposalThreshold() public pure returns (uint) { return 300000e18; } // 300,000 = 1% of XVS\\r\\n\\r\\n    /// @notice The maximum number of actions that can be included in a proposal\\r\\n    function proposalMaxOperations() public pure returns (uint) { return 10; } // 10 actions\\r\\n\\r\\n    /// @notice The delay before voting on a proposal may take place, once proposed\\r\\n    function votingDelay() public pure returns (uint) { return 1; } // 1 block\\r\\n\\r\\n    /// @notice The duration of voting on a proposal, in blocks\\r\\n    function votingPeriod() public pure returns (uint) { return 60 * 60 * 24 * 3 / 3; } // ~3 days in blocks (assuming 3s blocks)\\r\\n\\r\\n    /// @notice The address of the Venus Protocol Timelock\\r\\n    TimelockInterface public timelock;\\r\\n\\r\\n    /// @notice The address of the Venus governance token\\r\\n    XVSInterface public xvs;\\r\\n\\r\\n    /// @notice The address of the Governor Guardian\\r\\n    address public guardian;\\r\\n\\r\\n    /// @notice The total number of proposals\\r\\n    uint public proposalCount;\\r\\n\\r\\n    struct Proposal {\\r\\n        /// @notice Unique id for looking up a proposal\\r\\n        uint id;\\r\\n\\r\\n        /// @notice Creator of the proposal\\r\\n        address proposer;\\r\\n\\r\\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\r\\n        uint eta;\\r\\n\\r\\n        /// @notice the ordered list of target addresses for calls to be made\\r\\n        address[] targets;\\r\\n\\r\\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\r\\n        uint[] values;\\r\\n\\r\\n        /// @notice The ordered list of function signatures to be called\\r\\n        string[] signatures;\\r\\n\\r\\n        /// @notice The ordered list of calldata to be passed to each call\\r\\n        bytes[] calldatas;\\r\\n\\r\\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\r\\n        uint startBlock;\\r\\n\\r\\n        /// @notice The block at which voting ends: votes must be cast prior to this block\\r\\n        uint endBlock;\\r\\n\\r\\n        /// @notice Current number of votes in favor of this proposal\\r\\n        uint forVotes;\\r\\n\\r\\n        /// @notice Current number of votes in opposition to this proposal\\r\\n        uint againstVotes;\\r\\n\\r\\n        /// @notice Flag marking whether the proposal has been canceled\\r\\n        bool canceled;\\r\\n\\r\\n        /// @notice Flag marking whether the proposal has been executed\\r\\n        bool executed;\\r\\n\\r\\n        /// @notice Receipts of ballots for the entire set of voters\\r\\n        mapping (address => Receipt) receipts;\\r\\n    }\\r\\n\\r\\n    /// @notice Ballot receipt record for a voter\\r\\n    struct Receipt {\\r\\n        /// @notice Whether or not a vote has been cast\\r\\n        bool hasVoted;\\r\\n\\r\\n        /// @notice Whether or not the voter supports the proposal\\r\\n        bool support;\\r\\n\\r\\n        /// @notice The number of votes the voter had, which were cast\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice Possible states that a proposal may be in\\r\\n    enum ProposalState {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Canceled,\\r\\n        Defeated,\\r\\n        Succeeded,\\r\\n        Queued,\\r\\n        Expired,\\r\\n        Executed\\r\\n    }\\r\\n\\r\\n    /// @notice The official record of all proposals ever proposed\\r\\n    mapping (uint => Proposal) public proposals;\\r\\n\\r\\n    /// @notice The latest proposal for each proposer\\r\\n    mapping (address => uint) public latestProposalIds;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\\r\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,bool support)\\\");\\r\\n\\r\\n    /// @notice An event emitted when a new proposal is created\\r\\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string description);\\r\\n\\r\\n    /// @notice An event emitted when a vote has been cast on a proposal\\r\\n    event VoteCast(address voter, uint proposalId, bool support, uint votes);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been canceled\\r\\n    event ProposalCanceled(uint id);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been queued in the Timelock\\r\\n    event ProposalQueued(uint id, uint eta);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been executed in the Timelock\\r\\n    event ProposalExecuted(uint id);\\r\\n\\r\\n    constructor(address timelock_, address xvs_, address guardian_) public {\\r\\n        timelock = TimelockInterface(timelock_);\\r\\n        xvs = XVSInterface(xvs_);\\r\\n        guardian = guardian_;\\r\\n    }\\r\\n\\r\\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint) {\\r\\n        require(xvs.getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold(), \\\"GovernorAlpha::propose: proposer votes below proposal threshold\\\");\\r\\n        require(targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length, \\\"GovernorAlpha::propose: proposal function information arity mismatch\\\");\\r\\n        require(targets.length != 0, \\\"GovernorAlpha::propose: must provide actions\\\");\\r\\n        require(targets.length <= proposalMaxOperations(), \\\"GovernorAlpha::propose: too many actions\\\");\\r\\n\\r\\n        uint latestProposalId = latestProposalIds[msg.sender];\\r\\n        if (latestProposalId != 0) {\\r\\n          ProposalState proposersLatestProposalState = state(latestProposalId);\\r\\n          require(proposersLatestProposalState != ProposalState.Active, \\\"GovernorAlpha::propose: found an already active proposal\\\");\\r\\n          require(proposersLatestProposalState != ProposalState.Pending, \\\"GovernorAlpha::propose: found an already pending proposal\\\");\\r\\n        }\\r\\n\\r\\n        uint startBlock = add256(block.number, votingDelay());\\r\\n        uint endBlock = add256(startBlock, votingPeriod());\\r\\n\\r\\n        proposalCount++;\\r\\n        Proposal memory newProposal = Proposal({\\r\\n            id: proposalCount,\\r\\n            proposer: msg.sender,\\r\\n            eta: 0,\\r\\n            targets: targets,\\r\\n            values: values,\\r\\n            signatures: signatures,\\r\\n            calldatas: calldatas,\\r\\n            startBlock: startBlock,\\r\\n            endBlock: endBlock,\\r\\n            forVotes: 0,\\r\\n            againstVotes: 0,\\r\\n            canceled: false,\\r\\n            executed: false\\r\\n        });\\r\\n\\r\\n        proposals[newProposal.id] = newProposal;\\r\\n        latestProposalIds[newProposal.proposer] = newProposal.id;\\r\\n\\r\\n        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);\\r\\n        return newProposal.id;\\r\\n    }\\r\\n\\r\\n    function queue(uint proposalId) public {\\r\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"GovernorAlpha::queue: proposal can only be queued if it is succeeded\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        uint eta = add256(block.timestamp, timelock.delay());\\r\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\r\\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\\r\\n        }\\r\\n        proposal.eta = eta;\\r\\n        emit ProposalQueued(proposalId, eta);\\r\\n    }\\r\\n\\r\\n    function _queueOrRevert(address target, uint value, string memory signature, bytes memory data, uint eta) internal {\\r\\n        require(!timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))), \\\"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\\\");\\r\\n        timelock.queueTransaction(target, value, signature, data, eta);\\r\\n    }\\r\\n\\r\\n    function execute(uint proposalId) public payable {\\r\\n        require(state(proposalId) == ProposalState.Queued, \\\"GovernorAlpha::execute: proposal can only be executed if it is queued\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        proposal.executed = true;\\r\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\r\\n            timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\r\\n        }\\r\\n        emit ProposalExecuted(proposalId);\\r\\n    }\\r\\n\\r\\n    function cancel(uint proposalId) public {\\r\\n        ProposalState state = state(proposalId);\\r\\n        require(state != ProposalState.Executed, \\\"GovernorAlpha::cancel: cannot cancel executed proposal\\\");\\r\\n\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        require(msg.sender == guardian || xvs.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(), \\\"GovernorAlpha::cancel: proposer above threshold\\\");\\r\\n\\r\\n        proposal.canceled = true;\\r\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\r\\n            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\r\\n        }\\r\\n\\r\\n        emit ProposalCanceled(proposalId);\\r\\n    }\\r\\n\\r\\n    function getActions(uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\\r\\n        Proposal storage p = proposals[proposalId];\\r\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\r\\n    }\\r\\n\\r\\n    function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\\r\\n        return proposals[proposalId].receipts[voter];\\r\\n    }\\r\\n\\r\\n    function state(uint proposalId) public view returns (ProposalState) {\\r\\n        require(proposalCount >= proposalId && proposalId > 0, \\\"GovernorAlpha::state: invalid proposal id\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        if (proposal.canceled) {\\r\\n            return ProposalState.Canceled;\\r\\n        } else if (block.number <= proposal.startBlock) {\\r\\n            return ProposalState.Pending;\\r\\n        } else if (block.number <= proposal.endBlock) {\\r\\n            return ProposalState.Active;\\r\\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes()) {\\r\\n            return ProposalState.Defeated;\\r\\n        } else if (proposal.eta == 0) {\\r\\n            return ProposalState.Succeeded;\\r\\n        } else if (proposal.executed) {\\r\\n            return ProposalState.Executed;\\r\\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\\r\\n            return ProposalState.Expired;\\r\\n        } else {\\r\\n            return ProposalState.Queued;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function castVote(uint proposalId, bool support) public {\\r\\n        return _castVote(msg.sender, proposalId, support);\\r\\n    }\\r\\n\\r\\n    function castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s) public {\\r\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\r\\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\r\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"GovernorAlpha::castVoteBySig: invalid signature\\\");\\r\\n        return _castVote(signatory, proposalId, support);\\r\\n    }\\r\\n\\r\\n    function _castVote(address voter, uint proposalId, bool support) internal {\\r\\n        require(state(proposalId) == ProposalState.Active, \\\"GovernorAlpha::_castVote: voting is closed\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        Receipt storage receipt = proposal.receipts[voter];\\r\\n        require(receipt.hasVoted == false, \\\"GovernorAlpha::_castVote: voter already voted\\\");\\r\\n        uint96 votes = xvs.getPriorVotes(voter, proposal.startBlock);\\r\\n\\r\\n        if (support) {\\r\\n            proposal.forVotes = add256(proposal.forVotes, votes);\\r\\n        } else {\\r\\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\\r\\n        }\\r\\n\\r\\n        receipt.hasVoted = true;\\r\\n        receipt.support = support;\\r\\n        receipt.votes = votes;\\r\\n\\r\\n        emit VoteCast(voter, proposalId, support, votes);\\r\\n    }\\r\\n\\r\\n    function __acceptAdmin() public {\\r\\n        require(msg.sender == guardian, \\\"GovernorAlpha::__acceptAdmin: sender must be gov guardian\\\");\\r\\n        timelock.acceptAdmin();\\r\\n    }\\r\\n\\r\\n    function __abdicate() public {\\r\\n        require(msg.sender == guardian, \\\"GovernorAlpha::__abdicate: sender must be gov guardian\\\");\\r\\n        guardian = address(0);\\r\\n    }\\r\\n\\r\\n    function __queueSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\\r\\n        require(msg.sender == guardian, \\\"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\\\");\\r\\n        timelock.queueTransaction(address(timelock), 0, \\\"setPendingAdmin(address)\\\", abi.encode(newPendingAdmin), eta);\\r\\n    }\\r\\n\\r\\n    function __executeSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\\r\\n        require(msg.sender == guardian, \\\"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\\\");\\r\\n        timelock.executeTransaction(address(timelock), 0, \\\"setPendingAdmin(address)\\\", abi.encode(newPendingAdmin), eta);\\r\\n    }\\r\\n\\r\\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\\r\\n        uint c = a + b;\\r\\n        require(c >= a, \\\"addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\\r\\n        require(b <= a, \\\"subtraction underflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint) {\\r\\n        uint chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface TimelockInterface {\\r\\n    function delay() external view returns (uint);\\r\\n    function GRACE_PERIOD() external view returns (uint);\\r\\n    function acceptAdmin() external;\\r\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\r\\n    function queueTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external returns (bytes32);\\r\\n    function cancelTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external;\\r\\n    function executeTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external payable returns (bytes memory);\\r\\n}\\r\\n\\r\\ninterface XVSInterface {\\r\\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\\r\\n}\\r\\n\",\"keccak256\":\"0x15e1c6b30df6244981d7eec1b51d1f46a63100d99f1a6df86a62dfaebdae264c\"},\"contracts/Governance/XVS.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\ncontract Owned {\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner, \\\"Should be owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        owner = newOwner;\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Tokenlock is Owned {\\r\\n    /// @notice Indicates if token is locked\\r\\n    uint8 isLocked = 0;\\r\\n\\r\\n    event Freezed();\\r\\n    event UnFreezed();\\r\\n\\r\\n    modifier validLock {\\r\\n        require(isLocked == 0, \\\"Token is locked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function freeze() public onlyOwner {\\r\\n        isLocked = 1;\\r\\n\\r\\n        emit Freezed();\\r\\n    }\\r\\n\\r\\n    function unfreeze() public onlyOwner {\\r\\n        isLocked = 0;\\r\\n\\r\\n        emit UnFreezed();\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract XVS is Tokenlock {\\r\\n    /// @notice BEP-20 token name for this token\\r\\n    string public constant name = \\\"Venus\\\";\\r\\n\\r\\n    /// @notice BEP-20 token symbol for this token\\r\\n    string public constant symbol = \\\"XVS\\\";\\r\\n\\r\\n    /// @notice BEP-20 token decimals for this token\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    /// @notice Total number of tokens in circulation\\r\\n    uint public constant totalSupply = 30000000e18; // 30 million XVS\\r\\n\\r\\n    /// @notice Allowance amounts on behalf of others\\r\\n    mapping (address => mapping (address => uint96)) internal allowances;\\r\\n\\r\\n    /// @notice Official record of token balances for each account\\r\\n    mapping (address => uint96) internal balances;\\r\\n\\r\\n    /// @notice A record of each accounts delegate\\r\\n    mapping (address => address) public delegates;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping (address => uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping (address => uint) public nonces;\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\r\\n\\r\\n    /// @notice The standard BEP-20 transfer event\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    /// @notice The standard BEP-20 approval event\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a new XVS token\\r\\n     * @param account The initial account to grant all the tokens\\r\\n     */\\r\\n    constructor(address account) public {\\r\\n        balances[account] = uint96(totalSupply);\\r\\n        emit Transfer(address(0), account, totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\r\\n     * @param account The address of the account holding the funds\\r\\n     * @param spender The address of the account spending the funds\\r\\n     * @return The number of tokens approved\\r\\n     */\\r\\n    function allowance(address account, address spender) external view returns (uint) {\\r\\n        return allowances[account][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint rawAmount) external validLock returns (bool) {\\r\\n        uint96 amount;\\r\\n        if (rawAmount == uint(-1)) {\\r\\n            amount = uint96(-1);\\r\\n        } else {\\r\\n            amount = safe96(rawAmount, \\\"XVS::approve: amount exceeds 96 bits\\\");\\r\\n        }\\r\\n\\r\\n        allowances[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens held by the `account`\\r\\n     * @param account The address of the account to get the balance of\\r\\n     * @return The number of tokens held\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint) {\\r\\n        return balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint rawAmount) external validLock returns (bool) {\\r\\n        uint96 amount = safe96(rawAmount, \\\"XVS::transfer: amount exceeds 96 bits\\\");\\r\\n        _transferTokens(msg.sender, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint rawAmount) external validLock returns (bool) {\\r\\n        address spender = msg.sender;\\r\\n        uint96 spenderAllowance = allowances[src][spender];\\r\\n        uint96 amount = safe96(rawAmount, \\\"XVS::approve: amount exceeds 96 bits\\\");\\r\\n\\r\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\r\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"XVS::transferFrom: transfer amount exceeds spender allowance\\\");\\r\\n            allowances[src][spender] = newAllowance;\\r\\n\\r\\n            emit Approval(src, spender, newAllowance);\\r\\n        }\\r\\n\\r\\n        _transferTokens(src, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     */\\r\\n    function delegate(address delegatee) public validLock {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public validLock {\\r\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\r\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\r\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"XVS::delegateBySig: invalid signature\\\");\\r\\n        require(nonce == nonces[signatory]++, \\\"XVS::delegateBySig: invalid nonce\\\");\\r\\n        require(now <= expiry, \\\"XVS::delegateBySig: signature expired\\\");\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account) external view returns (uint96) {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\r\\n        require(blockNumber < block.number, \\\"XVS::getPriorVotes: not yet determined\\\");\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = delegates[delegator];\\r\\n        uint96 delegatorBalance = balances[delegator];\\r\\n        delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\r\\n        require(src != address(0), \\\"XVS::_transferTokens: cannot transfer from the zero address\\\");\\r\\n        require(dst != address(0), \\\"XVS::_transferTokens: cannot transfer to the zero address\\\");\\r\\n\\r\\n        balances[src] = sub96(balances[src], amount, \\\"XVS::_transferTokens: transfer amount exceeds balance\\\");\\r\\n        balances[dst] = add96(balances[dst], amount, \\\"XVS::_transferTokens: transfer amount overflows\\\");\\r\\n        emit Transfer(src, dst, amount);\\r\\n\\r\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\r\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"XVS::_moveVotes: vote amount underflows\\\");\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\r\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"XVS::_moveVotes: vote amount overflows\\\");\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\r\\n      uint32 blockNumber = safe32(block.number, \\\"XVS::_writeCheckpoint: block number exceeds 32 bits\\\");\\r\\n\\r\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\r\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n      } else {\\r\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\r\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n      }\\r\\n\\r\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\r\\n        require(n < 2**96, errorMessage);\\r\\n        return uint96(n);\\r\\n    }\\r\\n\\r\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\r\\n        uint96 c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint) {\\r\\n        uint256 chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x76687315dd5fbbc7a62fbdd8517b94fcb9b1192cb269cbd79d999f85989b578c\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\n/**\\r\\n  * @title Venus's InterestRateModel Interface\\r\\n  * @author Venus\\r\\n  */\\r\\ncontract InterestRateModel {\\r\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n    bool public constant isInterestRateModel = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current borrow interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amnount of reserves the market has\\r\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n      * @notice Calculates the current supply interest rate per block\\r\\n      * @param cash The total amount of cash the market has\\r\\n      * @param borrows The total amount of borrows the market has outstanding\\r\\n      * @param reserves The total amnount of reserves the market has\\r\\n      * @param reserveFactorMantissa The current reserve factor the market has\\r\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n      */\\r\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x5c9db9f1b8de79d4a3780a4475f92028794e36829d82b587339db3afd415d4e3\"},\"contracts/Lens/VenusLens.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../VBep20.sol\\\";\\r\\nimport \\\"../VToken.sol\\\";\\r\\nimport \\\"../PriceOracle.sol\\\";\\r\\nimport \\\"../EIP20Interface.sol\\\";\\r\\nimport \\\"../Governance/GovernorAlpha.sol\\\";\\r\\nimport \\\"../Governance/XVS.sol\\\";\\r\\nimport \\\"../Comptroller.sol\\\";\\r\\n\\r\\ninterface LensInterface {\\r\\n    function markets(address) external view returns (bool, uint);\\r\\n    function oracle() external view returns (PriceOracle);\\r\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\r\\n    function getAssetsIn(address) external view returns (VToken[] memory);\\r\\n    function claimVenus(address) external;\\r\\n    function venusAccrued(address) external view returns (uint);\\r\\n}\\r\\n\\r\\ncontract VenusLens is ExponentialNoError {\\r\\n    \\r\\n    struct VenusMarketState {\\r\\n        uint224 index;\\r\\n        uint32 block;\\r\\n    }\\r\\n\\r\\n    struct VTokenMetadata {\\r\\n        address vToken;\\r\\n        uint exchangeRateCurrent;\\r\\n        uint supplyRatePerBlock;\\r\\n        uint borrowRatePerBlock;\\r\\n        uint reserveFactorMantissa;\\r\\n        uint totalBorrows;\\r\\n        uint totalReserves;\\r\\n        uint totalSupply;\\r\\n        uint totalCash;\\r\\n        bool isListed;\\r\\n        uint collateralFactorMantissa;\\r\\n        address underlyingAssetAddress;\\r\\n        uint vTokenDecimals;\\r\\n        uint underlyingDecimals;\\r\\n    }\\r\\n\\r\\n    function vTokenMetadata(VToken vToken) public returns (VTokenMetadata memory) {\\r\\n        uint exchangeRateCurrent = vToken.exchangeRateCurrent();\\r\\n        LensInterface comptroller = LensInterface(address(vToken.comptroller()));\\r\\n        (bool isListed, uint collateralFactorMantissa) = comptroller.markets(address(vToken));\\r\\n        address underlyingAssetAddress;\\r\\n        uint underlyingDecimals;\\r\\n\\r\\n        if (compareStrings(vToken.symbol(), \\\"vBNB\\\")) {\\r\\n            underlyingAssetAddress = address(0);\\r\\n            underlyingDecimals = 18;\\r\\n        } else {\\r\\n            VBep20 vBep20 = VBep20(address(vToken));\\r\\n            underlyingAssetAddress = vBep20.underlying();\\r\\n            underlyingDecimals = EIP20Interface(vBep20.underlying()).decimals();\\r\\n        }\\r\\n\\r\\n        return VTokenMetadata({\\r\\n            vToken: address(vToken),\\r\\n            exchangeRateCurrent: exchangeRateCurrent,\\r\\n            supplyRatePerBlock: vToken.supplyRatePerBlock(),\\r\\n            borrowRatePerBlock: vToken.borrowRatePerBlock(),\\r\\n            reserveFactorMantissa: vToken.reserveFactorMantissa(),\\r\\n            totalBorrows: vToken.totalBorrows(),\\r\\n            totalReserves: vToken.totalReserves(),\\r\\n            totalSupply: vToken.totalSupply(),\\r\\n            totalCash: vToken.getCash(),\\r\\n            isListed: isListed,\\r\\n            collateralFactorMantissa: collateralFactorMantissa,\\r\\n            underlyingAssetAddress: underlyingAssetAddress,\\r\\n            vTokenDecimals: vToken.decimals(),\\r\\n            underlyingDecimals: underlyingDecimals\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function vTokenMetadataAll(VToken[] calldata vTokens) external returns (VTokenMetadata[] memory) {\\r\\n        uint vTokenCount = vTokens.length;\\r\\n        VTokenMetadata[] memory res = new VTokenMetadata[](vTokenCount);\\r\\n        for (uint i = 0; i < vTokenCount; i++) {\\r\\n            res[i] = vTokenMetadata(vTokens[i]);\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    struct VTokenBalances {\\r\\n        address vToken;\\r\\n        uint balanceOf;\\r\\n        uint borrowBalanceCurrent;\\r\\n        uint balanceOfUnderlying;\\r\\n        uint tokenBalance;\\r\\n        uint tokenAllowance;\\r\\n    }\\r\\n\\r\\n    function vTokenBalances(VToken vToken, address payable account) public returns (VTokenBalances memory) {\\r\\n        uint balanceOf = vToken.balanceOf(account);\\r\\n        uint borrowBalanceCurrent = vToken.borrowBalanceCurrent(account);\\r\\n        uint balanceOfUnderlying = vToken.balanceOfUnderlying(account);\\r\\n        uint tokenBalance;\\r\\n        uint tokenAllowance;\\r\\n\\r\\n        if (compareStrings(vToken.symbol(), \\\"vBNB\\\")) {\\r\\n            tokenBalance = account.balance;\\r\\n            tokenAllowance = account.balance;\\r\\n        } else {\\r\\n            VBep20 vBep20 = VBep20(address(vToken));\\r\\n            EIP20Interface underlying = EIP20Interface(vBep20.underlying());\\r\\n            tokenBalance = underlying.balanceOf(account);\\r\\n            tokenAllowance = underlying.allowance(account, address(vToken));\\r\\n        }\\r\\n\\r\\n        return VTokenBalances({\\r\\n            vToken: address(vToken),\\r\\n            balanceOf: balanceOf,\\r\\n            borrowBalanceCurrent: borrowBalanceCurrent,\\r\\n            balanceOfUnderlying: balanceOfUnderlying,\\r\\n            tokenBalance: tokenBalance,\\r\\n            tokenAllowance: tokenAllowance\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function vTokenBalancesAll(VToken[] calldata vTokens, address payable account) external returns (VTokenBalances[] memory) {\\r\\n        uint vTokenCount = vTokens.length;\\r\\n        VTokenBalances[] memory res = new VTokenBalances[](vTokenCount);\\r\\n        for (uint i = 0; i < vTokenCount; i++) {\\r\\n            res[i] = vTokenBalances(vTokens[i], account);\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    struct VTokenUnderlyingPrice {\\r\\n        address vToken;\\r\\n        uint underlyingPrice;\\r\\n    }\\r\\n\\r\\n    function vTokenUnderlyingPrice(VToken vToken) public view returns (VTokenUnderlyingPrice memory) {\\r\\n        LensInterface comptroller = LensInterface(address(vToken.comptroller()));\\r\\n        PriceOracle priceOracle = comptroller.oracle();\\r\\n\\r\\n        return VTokenUnderlyingPrice({\\r\\n            vToken: address(vToken),\\r\\n            underlyingPrice: priceOracle.getUnderlyingPrice(vToken)\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function vTokenUnderlyingPriceAll(VToken[] calldata vTokens) external view returns (VTokenUnderlyingPrice[] memory) {\\r\\n        uint vTokenCount = vTokens.length;\\r\\n        VTokenUnderlyingPrice[] memory res = new VTokenUnderlyingPrice[](vTokenCount);\\r\\n        for (uint i = 0; i < vTokenCount; i++) {\\r\\n            res[i] = vTokenUnderlyingPrice(vTokens[i]);\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    struct AccountLimits {\\r\\n        VToken[] markets;\\r\\n        uint liquidity;\\r\\n        uint shortfall;\\r\\n    }\\r\\n\\r\\n    function getAccountLimits(LensInterface comptroller, address account) public view returns (AccountLimits memory) {\\r\\n        (uint errorCode, uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(account);\\r\\n        require(errorCode == 0, \\\"account liquidity error\\\");\\r\\n\\r\\n        return AccountLimits({\\r\\n            markets: comptroller.getAssetsIn(account),\\r\\n            liquidity: liquidity,\\r\\n            shortfall: shortfall\\r\\n        });\\r\\n    }\\r\\n\\r\\n    struct GovReceipt {\\r\\n        uint proposalId;\\r\\n        bool hasVoted;\\r\\n        bool support;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    function getGovReceipts(GovernorAlpha governor, address voter, uint[] memory proposalIds) public view returns (GovReceipt[] memory) {\\r\\n        uint proposalCount = proposalIds.length;\\r\\n        GovReceipt[] memory res = new GovReceipt[](proposalCount);\\r\\n        for (uint i = 0; i < proposalCount; i++) {\\r\\n            GovernorAlpha.Receipt memory receipt = governor.getReceipt(proposalIds[i], voter);\\r\\n            res[i] = GovReceipt({\\r\\n                proposalId: proposalIds[i],\\r\\n                hasVoted: receipt.hasVoted,\\r\\n                support: receipt.support,\\r\\n                votes: receipt.votes\\r\\n            });\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    struct GovProposal {\\r\\n        uint proposalId;\\r\\n        address proposer;\\r\\n        uint eta;\\r\\n        address[] targets;\\r\\n        uint[] values;\\r\\n        string[] signatures;\\r\\n        bytes[] calldatas;\\r\\n        uint startBlock;\\r\\n        uint endBlock;\\r\\n        uint forVotes;\\r\\n        uint againstVotes;\\r\\n        bool canceled;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    function setProposal(GovProposal memory res, GovernorAlpha governor, uint proposalId) internal view {\\r\\n        (\\r\\n            ,\\r\\n            address proposer,\\r\\n            uint eta,\\r\\n            uint startBlock,\\r\\n            uint endBlock,\\r\\n            uint forVotes,\\r\\n            uint againstVotes,\\r\\n            bool canceled,\\r\\n            bool executed\\r\\n        ) = governor.proposals(proposalId);\\r\\n        res.proposalId = proposalId;\\r\\n        res.proposer = proposer;\\r\\n        res.eta = eta;\\r\\n        res.startBlock = startBlock;\\r\\n        res.endBlock = endBlock;\\r\\n        res.forVotes = forVotes;\\r\\n        res.againstVotes = againstVotes;\\r\\n        res.canceled = canceled;\\r\\n        res.executed = executed;\\r\\n    }\\r\\n\\r\\n    function getGovProposals(GovernorAlpha governor, uint[] calldata proposalIds) external view returns (GovProposal[] memory) {\\r\\n        GovProposal[] memory res = new GovProposal[](proposalIds.length);\\r\\n        for (uint i = 0; i < proposalIds.length; i++) {\\r\\n            (\\r\\n                address[] memory targets,\\r\\n                uint[] memory values,\\r\\n                string[] memory signatures,\\r\\n                bytes[] memory calldatas\\r\\n            ) = governor.getActions(proposalIds[i]);\\r\\n            res[i] = GovProposal({\\r\\n                proposalId: 0,\\r\\n                proposer: address(0),\\r\\n                eta: 0,\\r\\n                targets: targets,\\r\\n                values: values,\\r\\n                signatures: signatures,\\r\\n                calldatas: calldatas,\\r\\n                startBlock: 0,\\r\\n                endBlock: 0,\\r\\n                forVotes: 0,\\r\\n                againstVotes: 0,\\r\\n                canceled: false,\\r\\n                executed: false\\r\\n            });\\r\\n            setProposal(res[i], governor, proposalIds[i]);\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    struct XVSBalanceMetadata {\\r\\n        uint balance;\\r\\n        uint votes;\\r\\n        address delegate;\\r\\n    }\\r\\n\\r\\n    function getXVSBalanceMetadata(XVS xvs, address account) external view returns (XVSBalanceMetadata memory) {\\r\\n        return XVSBalanceMetadata({\\r\\n            balance: xvs.balanceOf(account),\\r\\n            votes: uint256(xvs.getCurrentVotes(account)),\\r\\n            delegate: xvs.delegates(account)\\r\\n        });\\r\\n    }\\r\\n\\r\\n    struct XVSBalanceMetadataExt {\\r\\n        uint balance;\\r\\n        uint votes;\\r\\n        address delegate;\\r\\n        uint allocated;\\r\\n    }\\r\\n\\r\\n    function getXVSBalanceMetadataExt(XVS xvs, LensInterface comptroller, address account) external returns (XVSBalanceMetadataExt memory) {\\r\\n        uint balance = xvs.balanceOf(account);\\r\\n        comptroller.claimVenus(account);\\r\\n        uint newBalance = xvs.balanceOf(account);\\r\\n        uint accrued = comptroller.venusAccrued(account);\\r\\n        uint total = add_(accrued, newBalance, \\\"sum xvs total\\\");\\r\\n        uint allocated = sub_(total, balance, \\\"sub allocated\\\");\\r\\n\\r\\n        return XVSBalanceMetadataExt({\\r\\n            balance: balance,\\r\\n            votes: uint256(xvs.getCurrentVotes(account)),\\r\\n            delegate: xvs.delegates(account),\\r\\n            allocated: allocated\\r\\n        });\\r\\n    }\\r\\n\\r\\n    struct VenusVotes {\\r\\n        uint blockNumber;\\r\\n        uint votes;\\r\\n    }\\r\\n\\r\\n    function getVenusVotes(XVS xvs, address account, uint32[] calldata blockNumbers) external view returns (VenusVotes[] memory) {\\r\\n        VenusVotes[] memory res = new VenusVotes[](blockNumbers.length);\\r\\n        for (uint i = 0; i < blockNumbers.length; i++) {\\r\\n            res[i] = VenusVotes({\\r\\n                blockNumber: uint256(blockNumbers[i]),\\r\\n                votes: uint256(xvs.getPriorVotes(account, blockNumbers[i]))\\r\\n            });\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    // calculate the accurate pending Venus rewards without touching any storage\\r\\n    function updateVenusSupplyIndex(VenusMarketState memory supplyState, address vToken, Comptroller comptroller) internal view {\\r\\n        uint supplySpeed = comptroller.venusSpeeds(vToken);\\r\\n        uint blockNumber = block.number;\\r\\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\\r\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\r\\n            uint supplyTokens = VToken(vToken).totalSupply();\\r\\n            uint venusAccrued = mul_(deltaBlocks, supplySpeed);\\r\\n            Double memory ratio = supplyTokens > 0 ? fraction(venusAccrued, supplyTokens) : Double({mantissa: 0});\\r\\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\\r\\n            supplyState.index = safe224(index.mantissa, \\\"new index overflows\\\");\\r\\n            supplyState.block = safe32(blockNumber, \\\"block number overflows\\\");\\r\\n        } else if (deltaBlocks > 0) {\\r\\n            supplyState.block = safe32(blockNumber, \\\"block number overflows\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateVenusBorrowIndex(VenusMarketState memory borrowState, address vToken, Exp memory marketBorrowIndex, Comptroller comptroller) internal view {\\r\\n        uint borrowSpeed = comptroller.venusSpeeds(vToken);\\r\\n        uint blockNumber = block.number;\\r\\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\\r\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\r\\n            uint borrowAmount = div_(VToken(vToken).totalBorrows(), marketBorrowIndex);\\r\\n            uint venusAccrued = mul_(deltaBlocks, borrowSpeed);\\r\\n            Double memory ratio = borrowAmount > 0 ? fraction(venusAccrued, borrowAmount) : Double({mantissa: 0});\\r\\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\\r\\n            borrowState.index = safe224(index.mantissa, \\\"new index overflows\\\");\\r\\n            borrowState.block = safe32(blockNumber, \\\"block number overflows\\\");\\r\\n        } else if (deltaBlocks > 0) {\\r\\n            borrowState.block = safe32(blockNumber, \\\"block number overflows\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function distributeSupplierVenus(\\r\\n        VenusMarketState memory supplyState, \\r\\n        address vToken, \\r\\n        address supplier, \\r\\n        Comptroller comptroller\\r\\n    ) internal view returns (uint) {\\r\\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\\r\\n        Double memory supplierIndex = Double({mantissa: comptroller.venusSupplierIndex(vToken, supplier)});\\r\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\r\\n            supplierIndex.mantissa = comptroller.venusInitialIndex();\\r\\n        }\\r\\n        \\r\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\r\\n        uint supplierTokens = VToken(vToken).balanceOf(supplier);\\r\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\r\\n        return supplierDelta;\\r\\n    }\\r\\n\\r\\n    function distributeBorrowerVenus(\\r\\n        VenusMarketState memory borrowState, \\r\\n        address vToken, \\r\\n        address borrower, \\r\\n        Exp memory marketBorrowIndex, \\r\\n        Comptroller comptroller\\r\\n    ) internal view returns (uint) {\\r\\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\\r\\n        Double memory borrowerIndex = Double({mantissa: comptroller.venusBorrowerIndex(vToken, borrower)});\\r\\n        if (borrowerIndex.mantissa > 0) {\\r\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\r\\n            uint borrowerAmount = div_(VToken(vToken).borrowBalanceStored(borrower), marketBorrowIndex);\\r\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\r\\n            return borrowerDelta;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    struct ClaimVenusLocalVariables {\\r\\n        uint totalRewards;\\r\\n        uint224 borrowIndex;\\r\\n        uint32 borrowBlock;\\r\\n        uint224 supplyIndex;\\r\\n        uint32 supplyBlock;\\r\\n    }\\r\\n\\r\\n    function pendingVenus(address holder, Comptroller comptroller) external view returns (uint) {\\r\\n        VToken[] memory vTokens = comptroller.getAllMarkets();\\r\\n        ClaimVenusLocalVariables memory vars;\\r\\n        for (uint i = 0; i < vTokens.length; i++) {\\r\\n            (vars.borrowIndex, vars.borrowBlock) = comptroller.venusBorrowState(address(vTokens[i]));\\r\\n            VenusMarketState memory borrowState = VenusMarketState({\\r\\n                index: vars.borrowIndex,\\r\\n                block: vars.borrowBlock\\r\\n            });\\r\\n\\r\\n            (vars.supplyIndex, vars.supplyBlock) = comptroller.venusSupplyState(address(vTokens[i]));\\r\\n            VenusMarketState memory supplyState = VenusMarketState({\\r\\n                index: vars.supplyIndex,\\r\\n                block: vars.supplyBlock\\r\\n            });\\r\\n\\r\\n            Exp memory borrowIndex = Exp({mantissa: vTokens[i].borrowIndex()});\\r\\n            updateVenusBorrowIndex(borrowState, address(vTokens[i]), borrowIndex, comptroller);\\r\\n            uint reward = distributeBorrowerVenus(borrowState, address(vTokens[i]), holder, borrowIndex, comptroller);\\r\\n            vars.totalRewards = add_(vars.totalRewards, reward);\\r\\n\\r\\n            updateVenusSupplyIndex(supplyState, address(vTokens[i]), comptroller);\\r\\n            reward = distributeSupplierVenus(supplyState, address(vTokens[i]), holder, comptroller);\\r\\n            vars.totalRewards = add_(vars.totalRewards, reward);\\r\\n        }\\r\\n        return add_(comptroller.venusAccrued(holder), vars.totalRewards);\\r\\n    }\\r\\n\\r\\n    // utilities\\r\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\r\\n    }\\r\\n}\",\"keccak256\":\"0xe9947c1a19a4c8719cd6e6ba96e169b13aa6d9d293b19d4e044179a45818beb0\"},\"contracts/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\n\\r\\ncontract PriceOracle {\\r\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\r\\n    bool public constant isPriceOracle = true;\\r\\n\\r\\n    /**\\r\\n      * @notice Get the underlying price of a vToken asset\\r\\n      * @param vToken The vToken to get the underlying price of\\r\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\r\\n      *  Zero means the price is unavailable.\\r\\n      */\\r\\n    function getUnderlyingPrice(VToken vToken) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x1da723eb84ea9aa8431516821895f531150bb490fcc442b29f26428e3409083f\"},\"contracts/Unitroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./ComptrollerStorage.sol\\\";\\r\\n/**\\r\\n * @title ComptrollerCore\\r\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\r\\n * VTokens should reference this contract as their comptroller.\\r\\n */\\r\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is changed\\r\\n      */\\r\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\r\\n      */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is changed\\r\\n      */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\r\\n      */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    constructor() public {\\r\\n        // Set admin to caller\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\r\\n\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = newPendingImplementation;\\r\\n\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\r\\n    * @dev Admin function for new implementation to accept it's role as implementation\\r\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n    */\\r\\n    function _acceptImplementation() public returns (uint) {\\r\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\r\\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = comptrollerImplementation;\\r\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        comptrollerImplementation = pendingComptrollerImplementation;\\r\\n\\r\\n        pendingComptrollerImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() public returns (uint) {\\r\\n        // Check caller is pendingAdmin\\r\\n        if (msg.sender != pendingAdmin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    function () external payable {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n              let free_mem_ptr := mload(0x40)\\r\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\r\\n\\r\\n              switch success\\r\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\r\\n              default { return(free_mem_ptr, returndatasize) }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48ae427cb2a289e210b240506cbcce2d6fb2e2c8f13a60ff3db0376cba842a4c\"},\"contracts/VAI/VAI.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\nimport \\\"./lib.sol\\\";\\r\\n\\r\\ncontract VAI is LibNote {\\r\\n    // --- Auth ---\\r\\n    mapping (address => uint) public wards;\\r\\n    function rely(address guy) external note auth { wards[guy] = 1; }\\r\\n    function deny(address guy) external note auth { wards[guy] = 0; }\\r\\n    modifier auth {\\r\\n        require(wards[msg.sender] == 1, \\\"VAI/not-authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- BEP20 Data ---\\r\\n    string  public constant name     = \\\"VAI Stablecoin\\\";\\r\\n    string  public constant symbol   = \\\"VAI\\\";\\r\\n    string  public constant version  = \\\"1\\\";\\r\\n    uint8   public constant decimals = 18;\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    mapping (address => uint)                      public balanceOf;\\r\\n    mapping (address => mapping (address => uint)) public allowance;\\r\\n    mapping (address => uint)                      public nonces;\\r\\n\\r\\n    event Approval(address indexed src, address indexed guy, uint wad);\\r\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\r\\n\\r\\n    // --- Math ---\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, \\\"VAI math error\\\");\\r\\n    }\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, \\\"VAI math error\\\");\\r\\n    }\\r\\n\\r\\n    // --- EIP712 niceties ---\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\r\\n\\r\\n    constructor(uint256 chainId_) public {\\r\\n        wards[msg.sender] = 1;\\r\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\\r\\n            keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\r\\n            keccak256(bytes(name)),\\r\\n            keccak256(bytes(version)),\\r\\n            chainId_,\\r\\n            address(this)\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // --- Token ---\\r\\n    function transfer(address dst, uint wad) external returns (bool) {\\r\\n        return transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n    function transferFrom(address src, address dst, uint wad)\\r\\n        public returns (bool)\\r\\n    {\\r\\n        require(balanceOf[src] >= wad, \\\"VAI/insufficient-balance\\\");\\r\\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\\r\\n            require(allowance[src][msg.sender] >= wad, \\\"VAI/insufficient-allowance\\\");\\r\\n            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\\r\\n        }\\r\\n        balanceOf[src] = sub(balanceOf[src], wad);\\r\\n        balanceOf[dst] = add(balanceOf[dst], wad);\\r\\n        emit Transfer(src, dst, wad);\\r\\n        return true;\\r\\n    }\\r\\n    function mint(address usr, uint wad) external auth {\\r\\n        balanceOf[usr] = add(balanceOf[usr], wad);\\r\\n        totalSupply = add(totalSupply, wad);\\r\\n        emit Transfer(address(0), usr, wad);\\r\\n    }\\r\\n    function burn(address usr, uint wad) external {\\r\\n        require(balanceOf[usr] >= wad, \\\"VAI/insufficient-balance\\\");\\r\\n        if (usr != msg.sender && allowance[usr][msg.sender] != uint(-1)) {\\r\\n            require(allowance[usr][msg.sender] >= wad, \\\"VAI/insufficient-allowance\\\");\\r\\n            allowance[usr][msg.sender] = sub(allowance[usr][msg.sender], wad);\\r\\n        }\\r\\n        balanceOf[usr] = sub(balanceOf[usr], wad);\\r\\n        totalSupply = sub(totalSupply, wad);\\r\\n        emit Transfer(usr, address(0), wad);\\r\\n    }\\r\\n    function approve(address usr, uint wad) external returns (bool) {\\r\\n        allowance[msg.sender][usr] = wad;\\r\\n        emit Approval(msg.sender, usr, wad);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // --- Alias ---\\r\\n    function push(address usr, uint wad) external {\\r\\n        transferFrom(msg.sender, usr, wad);\\r\\n    }\\r\\n    function pull(address usr, uint wad) external {\\r\\n        transferFrom(usr, msg.sender, wad);\\r\\n    }\\r\\n    function move(address src, address dst, uint wad) external {\\r\\n        transferFrom(src, dst, wad);\\r\\n    }\\r\\n\\r\\n    // --- Approve by signature ---\\r\\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\\r\\n                    bool allowed, uint8 v, bytes32 r, bytes32 s) external\\r\\n    {\\r\\n        bytes32 digest = keccak256(abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH,\\r\\n                                     holder,\\r\\n                                     spender,\\r\\n                                     nonce,\\r\\n                                     expiry,\\r\\n                                     allowed))\\r\\n        ));\\r\\n\\r\\n        require(holder != address(0), \\\"VAI/invalid-address-0\\\");\\r\\n        require(holder == ecrecover(digest, v, r, s), \\\"VAI/invalid-permit\\\");\\r\\n        require(expiry == 0 || now <= expiry, \\\"VAI/permit-expired\\\");\\r\\n        require(nonce == nonces[holder]++, \\\"VAI/invalid-nonce\\\");\\r\\n        uint wad = allowed ? uint(-1) : 0;\\r\\n        allowance[holder][spender] = wad;\\r\\n        emit Approval(holder, spender, wad);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcca4f89c1c5f9e76dad4d62eda962c4a02c2b2a8ee06af101cbfe7bb1da6b14a\"},\"contracts/VAI/lib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\ncontract LibNote {\\r\\n    event LogNote(\\r\\n        bytes4   indexed  sig,\\r\\n        address  indexed  usr,\\r\\n        bytes32  indexed  arg1,\\r\\n        bytes32  indexed  arg2,\\r\\n        bytes             data\\r\\n    ) anonymous;\\r\\n\\r\\n    modifier note {\\r\\n        _;\\r\\n        assembly {\\r\\n            // log an 'anonymous' event with a constant 6 words of calldata\\r\\n            // and four indexed topics: selector, caller, arg1 and arg2\\r\\n            let mark := msize()                       // end of memory ensures zero\\r\\n            mstore(0x40, add(mark, 288))              // update free memory pointer\\r\\n            mstore(mark, 0x20)                        // bytes type data offset\\r\\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\\r\\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\\r\\n            log4(mark, 288,                           // calldata\\r\\n                 shl(224, shr(224, calldataload(0))), // msg.sig\\r\\n                 caller(),                            // msg.sender\\r\\n                 calldataload(4),                     // arg1\\r\\n                 calldataload(36)                     // arg2\\r\\n                )\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9664fcab8e6e944b2f5dd5424731e3a0d015df22b7c86467e5641732a1b71efd\"},\"contracts/VAIControllerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\n\\r\\ncontract VAIControllerInterface {\\r\\n    function getVAIAddress() public view returns (address);\\r\\n    function getMintableVAI(address minter) public view returns (uint, uint);\\r\\n    function mintVAI(address minter, uint mintVAIAmount) external returns (uint);\\r\\n    function repayVAI(address repayer, uint repayVAIAmount) external returns (uint);\\r\\n    function liquidateVAI(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) external returns (uint, uint);\\r\\n\\r\\n    function _initializeVenusVAIState(uint blockNumber) external returns (uint);\\r\\n    function updateVenusVAIMintIndex() external returns (uint);\\r\\n    function calcDistributeVAIMinterVenus(address vaiMinter) external returns(uint, uint, uint, uint);\\r\\n}\\r\\n\",\"keccak256\":\"0x759d3b13b70ec2c4b190fe3c0bdb78c8557be4bfe49f0460a08f49cbf85e3627\"},\"contracts/VBep20.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./VToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Venus's VBep20 Contract\\r\\n * @notice VTokens which wrap an EIP-20 underlying\\r\\n * @author Venus\\r\\n */\\r\\ncontract VBep20 is VToken, VBep20Interface {\\r\\n    /**\\r\\n     * @notice Initialize the new money market\\r\\n     * @param underlying_ The address of the underlying asset\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ BEP-20 name of this token\\r\\n     * @param symbol_ BEP-20 symbol of this token\\r\\n     * @param decimals_ BEP-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(address underlying_,\\r\\n                        ComptrollerInterface comptroller_,\\r\\n                        InterestRateModel interestRateModel_,\\r\\n                        uint initialExchangeRateMantissa_,\\r\\n                        string memory name_,\\r\\n                        string memory symbol_,\\r\\n                        uint8 decimals_) public {\\r\\n        // VToken initialize does the bulk of the work\\r\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\r\\n\\r\\n        // Set underlying and sanity check it\\r\\n        underlying = underlying_;\\r\\n        EIP20Interface(underlying).totalSupply();\\r\\n    }\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function mint(uint mintAmount) external returns (uint) {\\r\\n        (uint err,) = mintInternal(mintAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param receiver the account which is receiving the vTokens\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint) {\\r\\n        (uint err,) = mintBehalfInternal(receiver, mintAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems vTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeem(uint redeemTokens) external returns (uint) {\\r\\n        return redeemInternal(redeemTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems vTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to redeem\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\r\\n        return redeemUnderlyingInternal(redeemAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sender borrows assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrow(uint borrowAmount) external returns (uint) {\\r\\n        return borrowInternal(borrowAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function repayBorrow(uint repayAmount) external returns (uint) {\\r\\n        (uint err,) = repayBorrowInternal(repayAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\\r\\n        (uint err,) = repayBorrowBehalfInternal(borrower, repayAmount);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this vToken to be liquidated\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) external returns (uint) {\\r\\n        (uint err,) = liquidateBorrowInternal(borrower, repayAmount, vTokenCollateral);\\r\\n        return err;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender adds to reserves.\\r\\n     * @param addAmount The amount fo underlying token to add as reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _addReserves(uint addAmount) external returns (uint) {\\r\\n        return _addReservesInternal(addAmount);\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying tokens owned by this contract\\r\\n     */\\r\\n    function getCashPrior() internal view returns (uint) {\\r\\n        EIP20Interface token = EIP20Interface(underlying);\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\r\\n     *      This will revert due to insufficient balance or insufficient allowance.\\r\\n     *      This function returns the actual amount received,\\r\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\r\\n     *\\r\\n     *      Note: This wrapper safely handles non-standard BEP-20 tokens that do not return a value.\\r\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n     */\\r\\n    function doTransferIn(address from, uint amount) internal returns (uint) {\\r\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\r\\n        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\r\\n        token.transferFrom(from, address(this), amount);\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            switch returndatasize()\\r\\n                case 0 {                       // This is a non-standard BEP-20\\r\\n                    success := not(0)          // set success to true\\r\\n                }\\r\\n                case 32 {                      // This is a compliant BEP-20\\r\\n                    returndatacopy(0, 0, 32)\\r\\n                    success := mload(0)        // Set `success = returndata` of external call\\r\\n                }\\r\\n                default {                      // This is an excessively non-compliant BEP-20, revert.\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n        }\\r\\n        require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\r\\n\\r\\n        // Calculate the amount that was *actually* transferred\\r\\n        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\r\\n        require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\r\\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\r\\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\r\\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\r\\n     *      it is >= amount, this should not revert in normal conditions.\\r\\n     *\\r\\n     *      Note: This wrapper safely handles non-standard BEP-20 tokens that do not return a value.\\r\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint amount) internal {\\r\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\r\\n        token.transfer(to, amount);\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            switch returndatasize()\\r\\n                case 0 {                      // This is a non-standard BEP-20\\r\\n                    success := not(0)          // set success to true\\r\\n                }\\r\\n                case 32 {                     // This is a complaint BEP-20\\r\\n                    returndatacopy(0, 0, 32)\\r\\n                    success := mload(0)        // Set `success = returndata` of external call\\r\\n                }\\r\\n                default {                     // This is an excessively non-compliant BEP-20, revert.\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n        }\\r\\n        require(success, \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x885d7cbf9d82a2cb9fd4fb4bb61891096f377ad15744dc99f4846a21d80ee19f\"},\"contracts/VToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./VTokenInterfaces.sol\\\";\\r\\nimport \\\"./ErrorReporter.sol\\\";\\r\\nimport \\\"./Exponential.sol\\\";\\r\\nimport \\\"./EIP20Interface.sol\\\";\\r\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Venus's VToken Contract\\r\\n * @notice Abstract base for VTokens\\r\\n * @author Venus\\r\\n */\\r\\ncontract VToken is VTokenInterface, Exponential, TokenErrorReporter {\\r\\n    /**\\r\\n     * @notice Initialize the money market\\r\\n     * @param comptroller_ The address of the Comptroller\\r\\n     * @param interestRateModel_ The address of the interest rate model\\r\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\r\\n     * @param name_ EIP-20 name of this token\\r\\n     * @param symbol_ EIP-20 symbol of this token\\r\\n     * @param decimals_ EIP-20 decimal precision of this token\\r\\n     */\\r\\n    function initialize(ComptrollerInterface comptroller_,\\r\\n                        InterestRateModel interestRateModel_,\\r\\n                        uint initialExchangeRateMantissa_,\\r\\n                        string memory name_,\\r\\n                        string memory symbol_,\\r\\n                        uint8 decimals_) public {\\r\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\r\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\r\\n\\r\\n        // Set initial exchange rate\\r\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\r\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\r\\n\\r\\n        // Set the comptroller\\r\\n        uint err = _setComptroller(comptroller_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\r\\n\\r\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\r\\n        accrualBlockNumber = getBlockNumber();\\r\\n        borrowIndex = mantissaOne;\\r\\n\\r\\n        // Set the interest rate model (depends on block number / borrow index)\\r\\n        err = _setInterestRateModelFresh(interestRateModel_);\\r\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\r\\n\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n        decimals = decimals_;\\r\\n\\r\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\r\\n     * @dev Called by both `transfer` and `transferFrom` internally\\r\\n     * @param spender The address of the account performing the transfer\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param tokens The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\r\\n        /* Fail if transfer not allowed */\\r\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Do not allow self-transfers */\\r\\n        if (src == dst) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\r\\n        }\\r\\n\\r\\n        /* Get the allowance, infinite for the account owner */\\r\\n        uint startingAllowance = 0;\\r\\n        if (spender == src) {\\r\\n            startingAllowance = uint(-1);\\r\\n        } else {\\r\\n            startingAllowance = transferAllowances[src][spender];\\r\\n        }\\r\\n\\r\\n        /* Do the calculations, checking for {under,over}flow */\\r\\n        MathError mathErr;\\r\\n        uint allowanceNew;\\r\\n        uint srvTokensNew;\\r\\n        uint dstTokensNew;\\r\\n\\r\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\r\\n        }\\r\\n\\r\\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\r\\n        }\\r\\n\\r\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        accountTokens[src] = srvTokensNew;\\r\\n        accountTokens[dst] = dstTokensNew;\\r\\n\\r\\n        /* Eat some of the allowance (if necessary) */\\r\\n        if (startingAllowance != uint(-1)) {\\r\\n            transferAllowances[src][spender] = allowanceNew;\\r\\n        }\\r\\n\\r\\n        /* We emit a Transfer event */\\r\\n        emit Transfer(src, dst, tokens);\\r\\n\\r\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\r\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\r\\n     * @param src The address of the source account\\r\\n     * @param dst The address of the destination account\\r\\n     * @param amount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\r\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool) {\\r\\n        address src = msg.sender;\\r\\n        transferAllowances[src][spender] = amount;\\r\\n        emit Approval(src, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the current allowance from `owner` for `spender`\\r\\n     * @param owner The address of the account which owns the tokens to be spent\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256) {\\r\\n        return transferAllowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the token balance of the `owner`\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The number of tokens owned by `owner`\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256) {\\r\\n        return accountTokens[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying balance of the `owner`\\r\\n     * @dev This also accrues interest in a transaction\\r\\n     * @param owner The address of the account to query\\r\\n     * @return The amount of underlying owned by `owner`\\r\\n     */\\r\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\r\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\r\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\r\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\r\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\r\\n     * @param account Address of the account to snapshot\\r\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\r\\n     */\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\r\\n        uint vTokenBalance = accountTokens[account];\\r\\n        uint borrowBalance;\\r\\n        uint exchangeRateMantissa;\\r\\n\\r\\n        MathError mErr;\\r\\n\\r\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\r\\n        if (mErr != MathError.NO_ERROR) {\\r\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (mErr != MathError.NO_ERROR) {\\r\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vTokenBalance, borrowBalance, exchangeRateMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to simply retrieve block number\\r\\n     *  This exists mainly for inheriting test contracts to stub this result.\\r\\n     */\\r\\n    function getBlockNumber() internal view returns (uint) {\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block borrow interest rate for this vToken\\r\\n     * @return The borrow interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function borrowRatePerBlock() external view returns (uint) {\\r\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current per-block supply interest rate for this vToken\\r\\n     * @return The supply interest rate per block, scaled by 1e18\\r\\n     */\\r\\n    function supplyRatePerBlock() external view returns (uint) {\\r\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current total borrows plus accrued interest\\r\\n     * @return The total borrows with interest\\r\\n     */\\r\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return totalBorrows;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\r\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return borrowBalanceStored(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return The calculated balance\\r\\n     */\\r\\n    function borrowBalanceStored(address account) public view returns (uint) {\\r\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\r\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the borrow balance of account based on stored data\\r\\n     * @param account The address whose balance should be calculated\\r\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\r\\n     */\\r\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\r\\n        /* Note: we do not assert that the market is up to date */\\r\\n        MathError mathErr;\\r\\n        uint principalTimesIndex;\\r\\n        uint result;\\r\\n\\r\\n        /* Get borrowBalance and borrowIndex */\\r\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\r\\n\\r\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\r\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\r\\n         */\\r\\n        if (borrowSnapshot.principal == 0) {\\r\\n            return (MathError.NO_ERROR, 0);\\r\\n        }\\r\\n\\r\\n        /* Calculate new borrow balance using the interest index:\\r\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\r\\n         */\\r\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return (mathErr, 0);\\r\\n        }\\r\\n\\r\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return (mathErr, 0);\\r\\n        }\\r\\n\\r\\n        return (MathError.NO_ERROR, result);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrue interest then return the up-to-date exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\r\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\r\\n        return exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return Calculated exchange rate scaled by 1e18\\r\\n     */\\r\\n    function exchangeRateStored() public view returns (uint) {\\r\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\r\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\r\\n     * @dev This function does not accrue interest before calculating the exchange rate\\r\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\r\\n     */\\r\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\r\\n        uint _totalSupply = totalSupply;\\r\\n        if (_totalSupply == 0) {\\r\\n            /*\\r\\n             * If there are no tokens minted:\\r\\n             *  exchangeRate = initialExchangeRate\\r\\n             */\\r\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\r\\n        } else {\\r\\n            /*\\r\\n             * Otherwise:\\r\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\r\\n             */\\r\\n            uint totalCash = getCashPrior();\\r\\n            uint cashPlusBorrowsMinusReserves;\\r\\n            Exp memory exchangeRate;\\r\\n            MathError mathErr;\\r\\n\\r\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\r\\n            if (mathErr != MathError.NO_ERROR) {\\r\\n                return (mathErr, 0);\\r\\n            }\\r\\n\\r\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\r\\n            if (mathErr != MathError.NO_ERROR) {\\r\\n                return (mathErr, 0);\\r\\n            }\\r\\n\\r\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get cash balance of this vToken in the underlying asset\\r\\n     * @return The quantity of underlying asset owned by this contract\\r\\n     */\\r\\n    function getCash() external view returns (uint) {\\r\\n        return getCashPrior();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Applies accrued interest to total borrows and reserves\\r\\n     * @dev This calculates interest accrued from the last checkpointed block\\r\\n     *   up to the current block and writes new checkpoint to storage.\\r\\n     */\\r\\n    function accrueInterest() public returns (uint) {\\r\\n        /* Remember the initial block number */\\r\\n        uint currentBlockNumber = getBlockNumber();\\r\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\r\\n\\r\\n        /* Short-circuit accumulating 0 interest */\\r\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\r\\n            return uint(Error.NO_ERROR);\\r\\n        }\\r\\n\\r\\n        /* Read the previous values out of storage */\\r\\n        uint cashPrior = getCashPrior();\\r\\n        uint borrowsPrior = totalBorrows;\\r\\n        uint reservesPrior = totalReserves;\\r\\n        uint borrowIndexPrior = borrowIndex;\\r\\n\\r\\n        /* Calculate the current borrow interest rate */\\r\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\r\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\r\\n\\r\\n        /* Calculate the number of blocks elapsed since the last accrual */\\r\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\r\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\r\\n\\r\\n        /*\\r\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\r\\n         *  simpleInterestFactor = borrowRate * blockDelta\\r\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\r\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\r\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\r\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\r\\n         */\\r\\n\\r\\n        Exp memory simpleInterestFactor;\\r\\n        uint interestAccumulated;\\r\\n        uint totalBorrowsNew;\\r\\n        uint totalReservesNew;\\r\\n        uint borrowIndexNew;\\r\\n\\r\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accrualBlockNumber = currentBlockNumber;\\r\\n        borrowIndex = borrowIndexNew;\\r\\n        totalBorrows = totalBorrowsNew;\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* We emit an AccrueInterest event */\\r\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mint failed\\r\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\r\\n        return mintFresh(msg.sender, mintAmount);\\r\\n    }\\r\\n\\r\\n    struct MintLocalVars {\\r\\n        MathError mathErr;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint mintTokens;\\r\\n        uint totalSupplyNew;\\r\\n        uint accountTokensNew;\\r\\n        uint actualMintAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User supplies assets into the market and receives vTokens in exchange\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param minter The address of the account which is supplying the assets\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\r\\n        /* Fail if mint not allowed */\\r\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        MintLocalVars memory vars;\\r\\n\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\r\\n         *  side-effects occurred. The function returns the amount actually transferred,\\r\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\r\\n         *  of cash.\\r\\n         */\\r\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\r\\n\\r\\n        /*\\r\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\r\\n         *  mintTokens = actualMintAmount / exchangeRate\\r\\n         */\\r\\n\\r\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\\r\\n         *  totalSupplyNew = totalSupply + mintTokens\\r\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\r\\n\\r\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[minter] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a Mint event, and a Transfer event */\\r\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\r\\n        emit Transfer(address(this), minter, vars.mintTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param receiver The address of the account which is receiving the vTokens\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintBehalfInternal(address receiver, uint mintAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mintBehalf failed\\r\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // mintBelahfFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\r\\n        return mintBehalfFresh(msg.sender, receiver, mintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Payer supplies assets into the market and receiver receives vTokens in exchange\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param payer The address of the account which is paying the underlying token\\r\\n     * @param receiver The address of the account which is receiving vToken\\r\\n     * @param mintAmount The amount of the underlying asset to supply\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\r\\n     */\\r\\n    function mintBehalfFresh(address payer, address receiver, uint mintAmount) internal returns (uint, uint) {\\r\\n        require(receiver != address(0), \\\"receiver is invalid\\\");\\r\\n        /* Fail if mint not allowed */\\r\\n        uint allowed = comptroller.mintAllowed(address(this), receiver, mintAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        MintLocalVars memory vars;\\r\\n\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         *  We call `doTransferIn` for the payer and the mintAmount.\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\r\\n         *  side-effects occurred. The function returns the amount actually transferred,\\r\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\r\\n         *  of cash.\\r\\n         */\\r\\n        vars.actualMintAmount = doTransferIn(payer, mintAmount);\\r\\n\\r\\n        /*\\r\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\r\\n         *  mintTokens = actualMintAmount / exchangeRate\\r\\n         */\\r\\n\\r\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply of vTokens and receiver token balance, checking for overflow:\\r\\n         *  totalSupplyNew = totalSupply + mintTokens\\r\\n         *  accountTokensNew = accountTokens[receiver] + mintTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\r\\n\\r\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[receiver], vars.mintTokens);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[receiver] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a MintBehalf event, and a Transfer event */\\r\\n        emit MintBehalf(payer, receiver, vars.actualMintAmount, vars.mintTokens);\\r\\n        emit Transfer(address(this), receiver, vars.mintTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.mintVerify(address(this), receiver, vars.actualMintAmount, vars.mintTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems vTokens in exchange for the underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\r\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender redeems vTokens in exchange for a specified amount of underlying asset\\r\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\r\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\r\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\r\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\r\\n    }\\r\\n\\r\\n    struct RedeemLocalVars {\\r\\n        MathError mathErr;\\r\\n        uint exchangeRateMantissa;\\r\\n        uint redeemTokens;\\r\\n        uint redeemAmount;\\r\\n        uint totalSupplyNew;\\r\\n        uint accountTokensNew;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice User redeems vTokens in exchange for the underlying asset\\r\\n     * @dev Assumes interest has already been accrued up to the current block\\r\\n     * @param redeemer The address of the account which is redeeming the tokens\\r\\n     * @param redeemTokensIn The number of vTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming vTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\r\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\r\\n\\r\\n        RedeemLocalVars memory vars;\\r\\n\\r\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\r\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /* If redeemTokensIn > 0: */\\r\\n        if (redeemTokensIn > 0) {\\r\\n            /*\\r\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\r\\n             *  redeemTokens = redeemTokensIn\\r\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\r\\n             */\\r\\n            vars.redeemTokens = redeemTokensIn;\\r\\n\\r\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n        } else {\\r\\n            /*\\r\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\r\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\r\\n             *  redeemAmount = redeemAmountIn\\r\\n             */\\r\\n\\r\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            vars.redeemAmount = redeemAmountIn;\\r\\n        }\\r\\n\\r\\n        /* Fail if redeem not allowed */\\r\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\r\\n         *  totalSupplyNew = totalSupply - redeemTokens\\r\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\r\\n         */\\r\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient cash */\\r\\n        if (getCashPrior() < vars.redeemAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  On success, the vToken has redeemAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n\\r\\n        uint feeAmount;\\r\\n        uint remainedAmount;\\r\\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\\r\\n            (vars.mathErr, feeAmount) = mulUInt(vars.redeemAmount, IComptroller(address(comptroller)).treasuryPercent());\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\\r\\n            if (vars.mathErr != MathError.NO_ERROR) {\\r\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n            }\\r\\n\\r\\n            doTransferOut(address(uint160(IComptroller(address(comptroller)).treasuryAddress())), feeAmount);\\r\\n\\r\\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\\r\\n        } else {\\r\\n            remainedAmount = vars.redeemAmount;\\r\\n        }\\r\\n\\r\\n        doTransferOut(redeemer, remainedAmount);\\r\\n\\r\\n        /* We write previously calculated values into storage */\\r\\n        totalSupply = vars.totalSupplyNew;\\r\\n        accountTokens[redeemer] = vars.accountTokensNew;\\r\\n\\r\\n        /* We emit a Transfer event, and a Redeem event */\\r\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\r\\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sender borrows assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        return borrowFresh(msg.sender, borrowAmount);\\r\\n    }\\r\\n\\r\\n    struct BorrowLocalVars {\\r\\n        MathError mathErr;\\r\\n        uint accountBorrows;\\r\\n        uint accountBorrowsNew;\\r\\n        uint totalBorrowsNew;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Users borrow assets from the protocol to their own address\\r\\n      * @param borrowAmount The amount of the underlying asset to borrow\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\r\\n        /* Fail if borrow not allowed */\\r\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\r\\n        }\\r\\n\\r\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\r\\n        if (getCashPrior() < borrowAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        BorrowLocalVars memory vars;\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\r\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\r\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\r\\n         */\\r\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  On success, the vToken borrowAmount less of cash.\\r\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         */\\r\\n        doTransferOut(borrower, borrowAmount);\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = vars.totalBorrowsNew;\\r\\n\\r\\n        /* We emit a Borrow event */\\r\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays their own borrow\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sender repays a borrow belonging to borrower\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount The amount to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\r\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\r\\n        }\\r\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\r\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\r\\n    }\\r\\n\\r\\n    struct RepayBorrowLocalVars {\\r\\n        Error err;\\r\\n        MathError mathErr;\\r\\n        uint repayAmount;\\r\\n        uint borrowerIndex;\\r\\n        uint accountBorrows;\\r\\n        uint accountBorrowsNew;\\r\\n        uint totalBorrowsNew;\\r\\n        uint actualRepayAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\r\\n     * @param payer the account paying off the borrow\\r\\n     * @param borrower the account with the debt being payed off\\r\\n     * @param repayAmount the amount of undelrying tokens being returned\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\r\\n        /* Fail if repayBorrow not allowed */\\r\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        RepayBorrowLocalVars memory vars;\\r\\n\\r\\n        /* We remember the original borrowerIndex for verification purposes */\\r\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\r\\n\\r\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\r\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\r\\n        if (vars.mathErr != MathError.NO_ERROR) {\\r\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\r\\n        }\\r\\n\\r\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\r\\n        if (repayAmount == uint(-1)) {\\r\\n            vars.repayAmount = vars.accountBorrows;\\r\\n        } else {\\r\\n            vars.repayAmount = repayAmount;\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the payer and the repayAmount\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  On success, the vToken holds an additional repayAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *   it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\r\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\r\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\r\\n         */\\r\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\r\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\r\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\r\\n        totalBorrows = vars.totalBorrowsNew;\\r\\n\\r\\n        /* We emit a RepayBorrow event */\\r\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The sender liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this vToken to be liquidated\\r\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) internal nonReentrant returns (uint, uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        error = vTokenCollateral.accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\r\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\r\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The liquidator liquidates the borrowers collateral.\\r\\n     *  The collateral seized is transferred to the liquidator.\\r\\n     * @param borrower The borrower of this vToken to be liquidated\\r\\n     * @param liquidator The address repaying the borrow and seizing collateral\\r\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\r\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\r\\n     */\\r\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, VTokenInterface vTokenCollateral) internal returns (uint, uint) {\\r\\n        /* Fail if liquidate not allowed */\\r\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(vTokenCollateral), liquidator, borrower, repayAmount);\\r\\n        if (allowed != 0) {\\r\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify market's block number equals current block number */\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        /* Verify vTokenCollateral market's block number equals current block number */\\r\\n        if (vTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = 0 */\\r\\n        if (repayAmount == 0) {\\r\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\r\\n        }\\r\\n\\r\\n        /* Fail if repayAmount = -1 */\\r\\n        if (repayAmount == uint(-1)) {\\r\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\r\\n        }\\r\\n\\r\\n\\r\\n        /* Fail if repayBorrow fails */\\r\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\r\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\r\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We calculate the number of collateral tokens that will be seized */\\r\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(vTokenCollateral), actualRepayAmount);\\r\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\r\\n\\r\\n        /* Revert if borrower collateral token balance < seizeTokens */\\r\\n        require(vTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\r\\n\\r\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\r\\n        uint seizeError;\\r\\n        if (address(vTokenCollateral) == address(this)) {\\r\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\r\\n        } else {\\r\\n            seizeError = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\r\\n        }\\r\\n\\r\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\r\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\r\\n\\r\\n        /* We emit a LiquidateBorrow event */\\r\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.liquidateBorrowVerify(address(this), address(vTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\r\\n\\r\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Will fail unless called by another vToken during the process of liquidation.\\r\\n     *  Its absolutely critical to use msg.sender as the borrowed vToken and not a parameter.\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of vTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\r\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\r\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another VToken.\\r\\n     *  Its absolutely critical to use msg.sender as the seizer vToken and not a parameter.\\r\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed vToken)\\r\\n     * @param liquidator The account receiving seized collateral\\r\\n     * @param borrower The account having collateral seized\\r\\n     * @param seizeTokens The number of vTokens to seize\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\r\\n        /* Fail if seize not allowed */\\r\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\r\\n        if (allowed != 0) {\\r\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\r\\n        }\\r\\n\\r\\n        /* Fail if borrower = liquidator */\\r\\n        if (borrower == liquidator) {\\r\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\r\\n        }\\r\\n\\r\\n        MathError mathErr;\\r\\n        uint borrowerTokensNew;\\r\\n        uint liquidatorTokensNew;\\r\\n\\r\\n        /*\\r\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\r\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\r\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\r\\n         */\\r\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\r\\n        if (mathErr != MathError.NO_ERROR) {\\r\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /* We write the previously calculated values into storage */\\r\\n        accountTokens[borrower] = borrowerTokensNew;\\r\\n        accountTokens[liquidator] = liquidatorTokensNew;\\r\\n\\r\\n        /* Emit a Transfer event */\\r\\n        emit Transfer(borrower, liquidator, seizeTokens);\\r\\n\\r\\n        /* We call the defense hook */\\r\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    /**\\r\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\r\\n      * @param newPendingAdmin New pending admin.\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\r\\n        // Check caller = admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store pendingAdmin with value newPendingAdmin\\r\\n        pendingAdmin = newPendingAdmin;\\r\\n\\r\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\r\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\r\\n      * @dev Admin function for pending admin to accept role and update admin\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _acceptAdmin() external returns (uint) {\\r\\n        // Check caller is pendingAdmin\\r\\n        if (msg.sender != pendingAdmin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldAdmin = admin;\\r\\n        address oldPendingAdmin = pendingAdmin;\\r\\n\\r\\n        // Store admin with value pendingAdmin\\r\\n        admin = pendingAdmin;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(oldAdmin, admin);\\r\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new comptroller for the market\\r\\n      * @dev Admin function to set a new comptroller\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        ComptrollerInterface oldComptroller = comptroller;\\r\\n        // Ensure invoke comptroller.isComptroller() returns true\\r\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set market's comptroller to newComptroller\\r\\n        comptroller = newComptroller;\\r\\n\\r\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\r\\n        emit NewComptroller(oldComptroller, newComptroller);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\r\\n      * @dev Admin function to accrue interest and set a new reserve factor\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\r\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\r\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\r\\n      * @dev Admin function to set a new reserve factor\\r\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n      */\\r\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // Verify market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\r\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\r\\n        }\\r\\n\\r\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\r\\n        reserveFactorMantissa = newReserveFactorMantissa;\\r\\n\\r\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and adds reserves by transferring from msg.sender\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\r\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n\\r\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\r\\n        (error, ) = _addReservesFresh(addAmount);\\r\\n        return error;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add reserves by transferring from caller\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param addAmount Amount of addition to reserves\\r\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\r\\n     */\\r\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\r\\n        // totalReserves + actualAddAmount\\r\\n        uint totalReservesNew;\\r\\n        uint actualAddAmount;\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        /*\\r\\n         * We call doTransferIn for the caller and the addAmount\\r\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\r\\n         *  On success, the vToken holds an additional addAmount of cash.\\r\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n         *  it returns the amount actually transferred, in case of a fee.\\r\\n         */\\r\\n\\r\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\r\\n\\r\\n        totalReservesNew = totalReserves + actualAddAmount;\\r\\n\\r\\n        /* Revert on overflow */\\r\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\r\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\r\\n\\r\\n        /* Return (NO_ERROR, actualAddAmount) */\\r\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\r\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\r\\n        return _reduceReservesFresh(reduceAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reduces reserves by transferring to admin\\r\\n     * @dev Requires fresh interest accrual\\r\\n     * @param reduceAmount Amount of reduction to reserves\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\r\\n        // totalReserves - reduceAmount\\r\\n        uint totalReservesNew;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Fail gracefully if protocol has insufficient underlying cash\\r\\n        if (getCashPrior() < reduceAmount) {\\r\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\r\\n        }\\r\\n\\r\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\r\\n        if (reduceAmount > totalReserves) {\\r\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\r\\n        }\\r\\n\\r\\n        /////////////////////////\\r\\n        // EFFECTS & INTERACTIONS\\r\\n        // (No safe failures beyond this point)\\r\\n\\r\\n        totalReservesNew = totalReserves - reduceAmount;\\r\\n\\r\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\r\\n        totalReserves = totalReservesNew;\\r\\n\\r\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\r\\n        doTransferOut(admin, reduceAmount);\\r\\n\\r\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\r\\n     * @dev Admin function to accrue interest and update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\r\\n        uint error = accrueInterest();\\r\\n        if (error != uint(Error.NO_ERROR)) {\\r\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\r\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\r\\n        }\\r\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\r\\n        return _setInterestRateModelFresh(newInterestRateModel);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\r\\n     * @dev Admin function to update the interest rate model\\r\\n     * @param newInterestRateModel the new interest rate model to use\\r\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\r\\n     */\\r\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\r\\n\\r\\n        // Used to store old model for use in the event that is emitted on success\\r\\n        InterestRateModel oldInterestRateModel;\\r\\n\\r\\n        // Check caller is admin\\r\\n        if (msg.sender != admin) {\\r\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\r\\n        }\\r\\n\\r\\n        // We fail gracefully unless market's block number equals current block number\\r\\n        if (accrualBlockNumber != getBlockNumber()) {\\r\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\r\\n        }\\r\\n\\r\\n        // Track the market's current interest rate model\\r\\n        oldInterestRateModel = interestRateModel;\\r\\n\\r\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\r\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\r\\n\\r\\n        // Set the interest rate model to newInterestRateModel\\r\\n        interestRateModel = newInterestRateModel;\\r\\n\\r\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\r\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\r\\n\\r\\n        return uint(Error.NO_ERROR);\\r\\n    }\\r\\n\\r\\n    /*** Safe Token ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets balance of this contract in terms of the underlying\\r\\n     * @dev This excludes the value of the current message, if any\\r\\n     * @return The quantity of underlying owned by this contract\\r\\n     */\\r\\n    function getCashPrior() internal view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\r\\n     *  This may revert due to insufficient balance or insufficient allowance.\\r\\n     */\\r\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\r\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\r\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\r\\n     */\\r\\n    function doTransferOut(address payable to, uint amount) internal;\\r\\n\\r\\n\\r\\n    /*** Reentrancy Guard ***/\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"re-entered\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true; // get a gas-refund post-Istanbul\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0802fab87bdb58d9f7e64ba14d9f7b574563fc5a4a0241bd5400ecec11a31c75\"},\"contracts/VTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./ComptrollerInterface.sol\\\";\\r\\nimport \\\"./InterestRateModel.sol\\\";\\r\\n\\r\\ncontract VTokenStorage {\\r\\n    /**\\r\\n     * @dev Guard variable for re-entrancy checks\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token name for this token\\r\\n     */\\r\\n    string public name;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token symbol for this token\\r\\n     */\\r\\n    string public symbol;\\r\\n\\r\\n    /**\\r\\n     * @notice EIP-20 token decimals for this token\\r\\n     */\\r\\n    uint8 public decimals;\\r\\n\\r\\n    /**\\r\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n     */\\r\\n\\r\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n    /**\\r\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\r\\n     */\\r\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\r\\n\\r\\n    /**\\r\\n     * @notice Administrator for this contract\\r\\n     */\\r\\n    address payable public admin;\\r\\n\\r\\n    /**\\r\\n     * @notice Pending administrator for this contract\\r\\n     */\\r\\n    address payable public pendingAdmin;\\r\\n\\r\\n    /**\\r\\n     * @notice Contract which oversees inter-vToken operations\\r\\n     */\\r\\n    ComptrollerInterface public comptroller;\\r\\n\\r\\n    /**\\r\\n     * @notice Model which tells what the current interest rate should be\\r\\n     */\\r\\n    InterestRateModel public interestRateModel;\\r\\n\\r\\n    /**\\r\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\r\\n     */\\r\\n    uint internal initialExchangeRateMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Fraction of interest currently set aside for reserves\\r\\n     */\\r\\n    uint public reserveFactorMantissa;\\r\\n\\r\\n    /**\\r\\n     * @notice Block number that interest was last accrued at\\r\\n     */\\r\\n    uint public accrualBlockNumber;\\r\\n\\r\\n    /**\\r\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n     */\\r\\n    uint public borrowIndex;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n     */\\r\\n    uint public totalBorrows;\\r\\n\\r\\n    /**\\r\\n     * @notice Total amount of reserves of the underlying held in this market\\r\\n     */\\r\\n    uint public totalReserves;\\r\\n\\r\\n    /**\\r\\n     * @notice Total number of tokens in circulation\\r\\n     */\\r\\n    uint public totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @notice Official record of token balances for each account\\r\\n     */\\r\\n    mapping (address => uint) internal accountTokens;\\r\\n\\r\\n    /**\\r\\n     * @notice Approved token transfer amounts on behalf of others\\r\\n     */\\r\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\r\\n\\r\\n    /**\\r\\n     * @notice Container for borrow balance information\\r\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n     */\\r\\n    struct BorrowSnapshot {\\r\\n        uint principal;\\r\\n        uint interestIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mapping of account addresses to outstanding borrow balances\\r\\n     */\\r\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n}\\r\\n\\r\\ncontract VTokenInterface is VTokenStorage {\\r\\n    /**\\r\\n     * @notice Indicator that this is a VToken contract (for inspection)\\r\\n     */\\r\\n    bool public constant isVToken = true;\\r\\n\\r\\n\\r\\n    /*** Market Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interest is accrued\\r\\n     */\\r\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted\\r\\n     */\\r\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are minted behalf by payer to receiver\\r\\n     */\\r\\n    event MintBehalf(address payer, address receiver, uint mintAmount, uint mintTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed\\r\\n     */\\r\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when tokens are redeemed and fee are transferred\\r\\n     */\\r\\n    event RedeemFee(address redeemer, uint feeAmount, uint redeemTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when underlying is borrowed\\r\\n     */\\r\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is repaid\\r\\n     */\\r\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when a borrow is liquidated\\r\\n     */\\r\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address vTokenCollateral, uint seizeTokens);\\r\\n\\r\\n\\r\\n    /*** Admin Events ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is changed\\r\\n     */\\r\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\r\\n     */\\r\\n    event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when comptroller is changed\\r\\n     */\\r\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when interestRateModel is changed\\r\\n     */\\r\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserve factor is changed\\r\\n     */\\r\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are added\\r\\n     */\\r\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when the reserves are reduced\\r\\n     */\\r\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Transfer event\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice EIP20 Approval event\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Failure event\\r\\n     */\\r\\n    event Failure(uint error, uint info, uint detail);\\r\\n\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function transfer(address dst, uint amount) external returns (bool);\\r\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function balanceOfUnderlying(address owner) external returns (uint);\\r\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\r\\n    function borrowRatePerBlock() external view returns (uint);\\r\\n    function supplyRatePerBlock() external view returns (uint);\\r\\n    function totalBorrowsCurrent() external returns (uint);\\r\\n    function borrowBalanceCurrent(address account) external returns (uint);\\r\\n    function borrowBalanceStored(address account) public view returns (uint);\\r\\n    function exchangeRateCurrent() public returns (uint);\\r\\n    function exchangeRateStored() public view returns (uint);\\r\\n    function getCash() external view returns (uint);\\r\\n    function accrueInterest() public returns (uint);\\r\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\r\\n    function _acceptAdmin() external returns (uint);\\r\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\r\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\r\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\r\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\r\\n}\\r\\n\\r\\ncontract VBep20Storage {\\r\\n    /**\\r\\n     * @notice Underlying asset for this VToken\\r\\n     */\\r\\n    address public underlying;\\r\\n}\\r\\n\\r\\ncontract VBep20Interface is VBep20Storage {\\r\\n\\r\\n    /*** User Interface ***/\\r\\n\\r\\n    function mint(uint mintAmount) external returns (uint);\\r\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\r\\n    function redeem(uint redeemTokens) external returns (uint);\\r\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\r\\n    function borrow(uint borrowAmount) external returns (uint);\\r\\n    function repayBorrow(uint repayAmount) external returns (uint);\\r\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\r\\n    function liquidateBorrow(address borrower, uint repayAmount, VTokenInterface vTokenCollateral) external returns (uint);\\r\\n\\r\\n\\r\\n    /*** Admin Functions ***/\\r\\n\\r\\n    function _addReserves(uint addAmount) external returns (uint);\\r\\n}\\r\\n\\r\\ncontract VDelegationStorage {\\r\\n    /**\\r\\n     * @notice Implementation address for this contract\\r\\n     */\\r\\n    address public implementation;\\r\\n}\\r\\n\\r\\ncontract VDelegatorInterface is VDelegationStorage {\\r\\n    /**\\r\\n     * @notice Emitted when implementation is changed\\r\\n     */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the admin to update the implementation of the delegator\\r\\n     * @param implementation_ The address of the new implementation for delegation\\r\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\r\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n     */\\r\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\r\\n}\\r\\n\\r\\ncontract VDelegateInterface is VDelegationStorage {\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n     * @param data The encoded bytes data for any initialization\\r\\n     */\\r\\n    function _becomeImplementation(bytes memory data) public;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\r\\n     */\\r\\n    function _resignImplementation() public;\\r\\n}\",\"keccak256\":\"0x2b76b5baa632845c9b8e746955ed8d08e99e6b6743bbb04dc041358a14783182\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506145a1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063995ed99f1161008c578063e09744c611610066578063e09744c6146101fd578063e0a67f111461021d578063f40c27771461023d578063fbd88b461461025d576100cf565b8063995ed99f1461019d578063aa5dbd23146101bd578063b3124239146101dd576100cf565b80631f884fdf146100d4578063603fdeee146100fd5780637c51b6421461011d5780637c84e3b31461013d5780637dd8f6d91461015d578063969948691461017d575b600080fd5b6100e76100e2366004613471565b61027d565b6040516100f49190614321565b60405180910390f35b61011061010b36600461337b565b610319565b6040516100f491906143ca565b61013061012b3660046134b2565b610742565b6040516100f491906142ff565b61015061014b366004613667565b6107e5565b6040516100f491906143a0565b61017061016b366004613637565b610977565b6040516100f49190614372565b61019061018b3660046135e2565b610acf565b6040516100f491906142dd565b6101b06101ab366004613588565b610c8b565b6040516100f491906142ee565b6101d06101cb366004613667565b610de5565b6040516100f49190614391565b6101f06101eb366004613637565b611569565b6040516100f49190614383565b61021061020b3660046136ec565b611909565b6040516100f491906143ae565b61023061022b366004613471565b611c8f565b6040516100f49190614310565b61025061024b366004613637565b611d20565b6040516100f491906143bc565b61027061026b366004613685565b611ec9565b6040516100f49190614332565b604080518281526020808402820101909152606090829082908280156102bd57816020015b6102aa612cea565b8152602001906001900390816102a25790505b50905060005b8281101561030e576102ef8686838181106102da57fe5b905060200201602061014b9190810190613667565b8282815181106102fb57fe5b60209081029190910101526001016102c3565b509150505b92915050565b60006060826001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561035657600080fd5b505afa15801561036a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103929190810190613506565b905061039c612d01565b60005b82518110156106b157846001600160a01b031663e37d4b798483815181106103c357fe5b60200260200101516040518263ffffffff1660e01b81526004016103e7919061427d565b604080518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610436919081019061379f565b63ffffffff1660408401526001600160e01b03166020830152610457612cea565b604051806040016040528084602001516001600160e01b03168152602001846040015163ffffffff168152509050856001600160a01b031663b8324c7c8584815181106104a057fe5b60200260200101516040518263ffffffff1660e01b81526004016104c4919061427d565b604080518083038186803b1580156104db57600080fd5b505afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610513919081019061379f565b63ffffffff1660808501526001600160e01b03166060840152610534612cea565b506040805180820190915260608401516001600160e01b03168152608084015163ffffffff166020820152610567612d2f565b604051806020016040528087868151811061057e57fe5b60200260200101516001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105be57600080fd5b505afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105f691908101906137cf565b815250905061061a8387868151811061060b57fe5b6020026020010151838b612021565b600061063c8488878151811061062c57fe5b60200260200101518c858d6122a1565b905061064c866000015182612421565b8652865161067090849089908890811061066257fe5b60200260200101518b612457565b61068f8388878151811061068057fe5b60200260200101518c8c6126cd565b905061069f866000015182612421565b865250506001909201915061039f9050565b50604051638a7dc16560e01b8152610739906001600160a01b03861690638a7dc165906106e290899060040161427d565b60206040518083038186803b1580156106fa57600080fd5b505afa15801561070e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061073291908101906137cf565b8251612421565b95945050505050565b6040805183815260208085028201019091526060908390829082801561078257816020015b61076f612d42565b8152602001906001900390816107675790505b50905060005b828110156107d9576107ba87878381811061079f57fe5b90506020020160206107b49190810190613667565b86611569565b8282815181106107c657fe5b6020908102919091010152600101610788565b509150505b9392505050565b6107ed612cea565b6000826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561082857600080fd5b505afa15801561083c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610860919081019061356a565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561089d57600080fd5b505afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108d5919081019061356a565b90506040518060400160405280856001600160a01b03168152602001826001600160a01b031663fc57d4df876040518263ffffffff1660e01b815260040161091d9190614343565b60206040518083038186803b15801561093557600080fd5b505afa158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061096d91908101906137cf565b9052949350505050565b61097f612d81565b6000806000856001600160a01b0316635ec88c79866040518263ffffffff1660e01b81526004016109b0919061427d565b60606040518083038186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a0091908101906138b1565b92509250925082600014610a2f5760405162461bcd60e51b8152600401610a2690614362565b60405180910390fd5b604080516060810191829052632aff3bff60e21b909152806001600160a01b03881663abfceffc610a63896064850161427d565b60006040518083038186803b158015610a7b57600080fd5b505afa158015610a8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab79190810190613506565b81526020810193909352604090920152949350505050565b60608083839050604051908082528060200260200182016040528015610b0f57816020015b610afc612da2565b815260200190600190039081610af45790505b50905060005b83811015610c8257606080606080896001600160a01b031663328dd9828a8a88818110610b3e57fe5b905060200201356040518263ffffffff1660e01b8152600401610b6191906143ca565b60006040518083038186803b158015610b7957600080fd5b505afa158015610b8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb591908101906133b5565b9350935093509350604051806101a001604052806000815260200160006001600160a01b03168152602001600081526020018581526020018481526020018381526020018281526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815250868681518110610c3757fe5b6020026020010181905250610c72868681518110610c5157fe5b60200260200101518b8b8b89818110610c6657fe5b905060200201356128c1565b505060019092019150610b159050565b50949350505050565b6060600082519050606081604051908082528060200260200182016040528015610ccf57816020015b610cbc612e17565b815260200190600190039081610cb45790505b50905060005b828110156107d957610ce5612e3e565b876001600160a01b031663e23a9a52878481518110610d0057fe5b6020026020010151896040518363ffffffff1660e01b8152600401610d269291906143d8565b60606040518083038186803b158015610d3e57600080fd5b505afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d769190810190613763565b90506040518060800160405280878481518110610d8f57fe5b6020026020010151815260200182600001511515815260200182602001511515815260200182604001516001600160601b0316815250838381518110610dd157fe5b602090810291909101015250600101610cd5565b610ded612e5e565b6000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e6291908101906137cf565b90506000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9f57600080fd5b505afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ed7919081019061356a565b9050600080826001600160a01b0316638e8f294b876040518263ffffffff1660e01b8152600401610f08919061427d565b604080518083038186803b158015610f1f57600080fd5b505afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f57919081019061353a565b91509150600080610ff8886001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610f9a57600080fd5b505afa158015610fae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fd6919081019061372f565b604051806040016040528060048152602001633b21272160e11b8152506129e7565b156110095750600090506012611169565b6000889050806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561104757600080fd5b505afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061107f9190810190613355565b9250806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156110ba57600080fd5b505afa1580156110ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110f29190810190613355565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561112a57600080fd5b505afa15801561113e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111629190810190613912565b60ff169150505b604051806101c00160405280896001600160a01b03168152602001878152602001896001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c357600080fd5b505afa1580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111fb91908101906137cf565b8152602001896001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b15801561123957600080fd5b505afa15801561124d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061127191908101906137cf565b8152602001896001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112e791908101906137cf565b8152602001896001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561132557600080fd5b505afa158015611339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061135d91908101906137cf565b8152602001896001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561139b57600080fd5b505afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113d391908101906137cf565b8152602001896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141157600080fd5b505afa158015611425573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061144991908101906137cf565b8152602001896001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561148757600080fd5b505afa15801561149b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114bf91908101906137cf565b81526020018515158152602001848152602001836001600160a01b03168152602001896001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115529190810190613912565b60ff16815260200191909152979650505050505050565b611571612d42565b6040516370a0823160e01b81526000906001600160a01b038516906370a08231906115a090869060040161428b565b60206040518083038186803b1580156115b857600080fd5b505afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115f091908101906137cf565b90506000846001600160a01b03166317bfdfbc856040518263ffffffff1660e01b8152600401611620919061428b565b602060405180830381600087803b15801561163a57600080fd5b505af115801561164e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061167291908101906137cf565b90506000856001600160a01b0316633af9e669866040518263ffffffff1660e01b81526004016116a2919061428b565b602060405180830381600087803b1580156116bc57600080fd5b505af11580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116f491908101906137cf565b9050600080611735886001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610f9a57600080fd5b1561174f5750506001600160a01b038516803190316118cc565b60008890506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561178f57600080fd5b505afa1580156117a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117c79190810190613355565b6040516370a0823160e01b81529091506001600160a01b038216906370a08231906117f6908c9060040161428b565b60206040518083038186803b15801561180e57600080fd5b505afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061184691908101906137cf565b604051636eb1769f60e11b81529094506001600160a01b0382169063dd62ed3e90611877908c908e90600401614299565b60206040518083038186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118c791908101906137cf565b925050505b6040805160c0810182526001600160a01b039990991689526020890195909552938701929092526060860152608085015260a08401525090919050565b611911612ee1565b6040516370a0823160e01b81526000906001600160a01b038616906370a082319061194090869060040161427d565b60206040518083038186803b15801561195857600080fd5b505afa15801561196c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061199091908101906137cf565b60405163adcd5fb960e01b81529091506001600160a01b0385169063adcd5fb9906119bf90869060040161427d565b600060405180830381600087803b1580156119d957600080fd5b505af11580156119ed573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03881691506370a0823190611a2090879060040161427d565b60206040518083038186803b158015611a3857600080fd5b505afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a7091908101906137cf565b90506000856001600160a01b0316638a7dc165866040518263ffffffff1660e01b8152600401611aa0919061427d565b60206040518083038186803b158015611ab857600080fd5b505afa158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611af091908101906137cf565b90506000611b2482846040518060400160405280600d81526020016c1cdd5b481e1d9cc81d1bdd185b609a1b815250612a40565b90506000611b5882866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b815250612a67565b905060405180608001604052808681526020018a6001600160a01b031663b4b5ea578a6040518263ffffffff1660e01b8152600401611b97919061427d565b60206040518083038186803b158015611baf57600080fd5b505afa158015611bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611be79190810190613930565b6001600160601b031681526020018a6001600160a01b031663587cde1e8a6040518263ffffffff1660e01b8152600401611c21919061427d565b60206040518083038186803b158015611c3957600080fd5b505afa158015611c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c719190810190613355565b6001600160a01b031681526020019190915298975050505050505050565b60408051828152602080840282010190915260609082908290828015611ccf57816020015b611cbc612e5e565b815260200190600190039081611cb45790505b50905060005b8281101561030e57611d01868683818110611cec57fe5b90506020020160206101cb9190810190613667565b828281518110611d0d57fe5b6020908102919091010152600101611cd5565b611d28612f12565b6040805160608101918290526370a0823160e01b909152806001600160a01b0385166370a08231611d5c866064850161427d565b60206040518083038186803b158015611d7457600080fd5b505afa158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dac91908101906137cf565b8152602001846001600160a01b031663b4b5ea57856040518263ffffffff1660e01b8152600401611ddd919061427d565b60206040518083038186803b158015611df557600080fd5b505afa158015611e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e2d9190810190613930565b6001600160601b03168152602001846001600160a01b031663587cde1e856040518263ffffffff1660e01b8152600401611e67919061427d565b60206040518083038186803b158015611e7f57600080fd5b505afa158015611e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611eb79190810190613355565b6001600160a01b031690529392505050565b60608083839050604051908082528060200260200182016040528015611f0957816020015b611ef6612f3c565b815260200190600190039081611eee5790505b50905060005b83811015612017576040518060400160405280868684818110611f2e57fe5b9050602002016020611f4391908101906138f4565b63ffffffff168152602001886001600160a01b031663782d6fe189898987818110611f6a57fe5b9050602002016020611f7f91908101906138f4565b6040518363ffffffff1660e01b8152600401611f9c9291906142c2565b60206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611fec9190810190613930565b6001600160601b031681525082828151811061200457fe5b6020908102919091010152600101611f0f565b5095945050505050565b604051631abcaa7760e01b81526000906001600160a01b03831690631abcaa779061205090879060040161427d565b60206040518083038186803b15801561206857600080fd5b505afa15801561207c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120a091908101906137cf565b9050600043905060006120bd82886020015163ffffffff16612a93565b90506000811180156120cf5750600083115b1561224e576000612150876001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561211257600080fd5b505afa158015612126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061214a91908101906137cf565b87612acd565b9050600061215e8386612aeb565b9050612168612d2f565b60008311612185576040518060200160405280600081525061218f565b61218f8284612b2d565b9050612199612d2f565b60408051602081019091528b516001600160e01b031681526121bb9083612b6b565b90506121f68160000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b815250612b90565b6001600160e01b03168b52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b6020820152612239908790612bbf565b63ffffffff1660208c01525061229892505050565b80156122985761228c8260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250612bbf565b63ffffffff1660208801525b50505050505050565b60006122ab612d2f565b50604080516020810190915286516001600160e01b031681526122cc612d2f565b604080516020810191829052630238089760e21b909152806001600160a01b0386166308e0225c6123018b8b602486016142b4565b60206040518083038186803b15801561231957600080fd5b505afa15801561232d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061235191908101906137cf565b905280519091501561241357612365612d2f565b61236f8383612be7565b905060006123f8896001600160a01b03166395dd91938a6040518263ffffffff1660e01b81526004016123a2919061427d565b60206040518083038186803b1580156123ba57600080fd5b505afa1580156123ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123f291908101906137cf565b88612acd565b905060006124068284612c0c565b9550610739945050505050565b506000979650505050505050565b60006107de8383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b815250612a40565b604051631abcaa7760e01b81526000906001600160a01b03831690631abcaa779061248690869060040161427d565b60206040518083038186803b15801561249e57600080fd5b505afa1580156124b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124d691908101906137cf565b9050600043905060006124f382876020015163ffffffff16612a93565b90506000811180156125055750600083115b1561267b576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561254557600080fd5b505afa158015612559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061257d91908101906137cf565b9050600061258b8386612aeb565b9050612595612d2f565b600083116125b257604051806020016040528060008152506125bc565b6125bc8284612b2d565b90506125c6612d2f565b60408051602081019091528a516001600160e01b031681526125e89083612b6b565b90506126238160000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b815250612b90565b6001600160e01b03168a52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b6020820152612666908790612bbf565b63ffffffff1660208b0152506126c592505050565b80156126c5576126b98260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b815250612bbf565b63ffffffff1660208701525b505050505050565b60006126d7612d2f565b50604080516020810190915285516001600160e01b031681526126f8612d2f565b604080516020810191829052631068634b60e21b909152806001600160a01b0386166341a18d2c61272d8a8a602486016142b4565b60206040518083038186803b15801561274557600080fd5b505afa158015612759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061277d91908101906137cf565b905280519091501580156127915750815115155b1561281357836001600160a01b031663c5b4db556040518163ffffffff1660e01b815260040160206040518083038186803b1580156127cf57600080fd5b505afa1580156127e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128079190810190613781565b6001600160e01b031681525b61281b612d2f565b6128258383612be7565b90506000876001600160a01b03166370a08231886040518263ffffffff1660e01b8152600401612855919061427d565b60206040518083038186803b15801561286d57600080fd5b505afa158015612881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128a591908101906137cf565b905060006128b38284612c0c565b9a9950505050505050505050565b600080600080600080600080896001600160a01b031663013cf08b8a6040518263ffffffff1660e01b81526004016128f991906143ca565b6101206040518083038186803b15801561291257600080fd5b505afa158015612926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061294a91908101906137ed565b9850985098509850985098509850985050888b6000018181525050878b602001906001600160a01b031690816001600160a01b031681525050868b6040018181525050858b60e0018181525050848b610100018181525050838b610120018181525050828b610140018181525050818b610160019015159081151581525050808b6101800190151590811515815250505050505050505050505050565b6000816040516020016129fa9190614271565b6040516020818303038152906040528051906020012083604051602001612a219190614271565b6040516020818303038152906040528051906020012014905092915050565b60008383018285821015610c825760405162461bcd60e51b8152600401610a269190614351565b60008184841115612a8b5760405162461bcd60e51b8152600401610a269190614351565b505050900390565b60006107de8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b815250612a67565b60006107de612ae484670de0b6b3a7640000612aeb565b8351612c3b565b60006107de83836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250612c6e565b612b35612d2f565b6040518060200160405280612b62612b5c866ec097ce7bc90715b34b9f1000000000612aeb565b85612c3b565b90529392505050565b612b73612d2f565b6040518060200160405280612b6285600001518560000151612421565b600081600160e01b8410612bb75760405162461bcd60e51b8152600401610a269190614351565b509192915050565b6000816401000000008410612bb75760405162461bcd60e51b8152600401610a269190614351565b612bef612d2f565b6040518060200160405280612b6285600001518560000151612a93565b60006ec097ce7bc90715b34b9f1000000000612c2c848460000151612aeb565b81612c3357fe5b049392505050565b60006107de83836040518060400160405280600e81526020016d646976696465206279207a65726f60901b815250612cb6565b6000831580612c7b575082155b15612c88575060006107de565b83830283858281612c9557fe5b04148390610c825760405162461bcd60e51b8152600401610a269190614351565b60008183612cd75760405162461bcd60e51b8152600401610a269190614351565b50828481612ce157fe5b04949350505050565b604080518082019091526000808252602082015290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060200160405280600081525090565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806060815260200160008152602001600081525090565b604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b604051806101c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160006001600160a01b03168152602001600081525090565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b604051806040016040528060008152602001600081525090565b803561031381614508565b805161031381614508565b600082601f830112612f7d57600080fd5b8151612f90612f8b8261440c565b6143e6565b91508181835260208401935060208101905083856020840282011115612fb557600080fd5b60005b83811015612fe15781612fcb8882612f61565b8452506020928301929190910190600101612fb8565b5050505092915050565b600082601f830112612ffc57600080fd5b815161300a612f8b8261440c565b81815260209384019390925082018360005b83811015612fe157815186016130328882613248565b845250602092830192919091019060010161301c565b60008083601f84011261305a57600080fd5b5081356001600160401b0381111561307157600080fd5b60208301915083602082028301111561308957600080fd5b9250929050565b600082601f8301126130a157600080fd5b81516130af612f8b8261440c565b915081818352602084019350602081019050838560208402820111156130d457600080fd5b60005b83811015612fe157816130ea8882613297565b84525060209283019291909101906001016130d7565b600082601f83011261311157600080fd5b815161311f612f8b8261440c565b81815260209384019390925082018360005b83811015612fe157815186016131478882613248565b8452506020928301929190910190600101613131565b600082601f83011261316e57600080fd5b813561317c612f8b8261440c565b915081818352602084019350602081019050838560208402820111156131a157600080fd5b60005b83811015612fe157816131b78882613313565b84525060209283019291909101906001016131a4565b600082601f8301126131de57600080fd5b81516131ec612f8b8261440c565b9150818183526020840193506020810190508385602084028201111561321157600080fd5b60005b83811015612fe15781613227888261331e565b8452506020928301929190910190600101613214565b80516103138161451f565b600082601f83011261325957600080fd5b8151613267612f8b8261442c565b9150808252602083016020830185838301111561328357600080fd5b61328e8382846144d2565b50505092915050565b805161031381614528565b803561031381614528565b6000606082840312156132bf57600080fd5b6132c960606143e6565b905060006132d7848461323d565b82525060206132e88484830161323d565b60208301525060406132fc8482850161334a565b60408301525092915050565b805161031381614531565b80356103138161453a565b80516103138161453a565b803561031381614543565b805161031381614543565b80516103138161454c565b805161031381614555565b60006020828403121561336757600080fd5b60006133738484612f61565b949350505050565b6000806040838503121561338e57600080fd5b600061339a8585612f56565b92505060206133ab858286016132a2565b9150509250929050565b600080600080608085870312156133cb57600080fd5b84516001600160401b038111156133e157600080fd5b6133ed87828801612f6c565b94505060208501516001600160401b0381111561340957600080fd5b613415878288016131cd565b93505060408501516001600160401b0381111561343157600080fd5b61343d87828801613100565b92505060608501516001600160401b0381111561345957600080fd5b61346587828801612feb565b91505092959194509250565b6000806020838503121561348457600080fd5b82356001600160401b0381111561349a57600080fd5b6134a685828601613048565b92509250509250929050565b6000806000604084860312156134c757600080fd5b83356001600160401b038111156134dd57600080fd5b6134e986828701613048565b935093505060206134fc86828701612f56565b9150509250925092565b60006020828403121561351857600080fd5b81516001600160401b0381111561352e57600080fd5b61337384828501613090565b6000806040838503121561354d57600080fd5b6000613559858561323d565b92505060206133ab8582860161331e565b60006020828403121561357c57600080fd5b60006133738484613297565b60008060006060848603121561359d57600080fd5b60006135a986866132a2565b93505060206135ba86828701612f56565b92505060408401356001600160401b038111156135d657600080fd5b6134fc8682870161315d565b6000806000604084860312156135f757600080fd5b600061360386866132a2565b93505060208401356001600160401b0381111561361f57600080fd5b61362b86828701613048565b92509250509250925092565b6000806040838503121561364a57600080fd5b600061365685856132a2565b92505060206133ab85828601612f56565b60006020828403121561367957600080fd5b600061337384846132a2565b6000806000806060858703121561369b57600080fd5b60006136a787876132a2565b94505060206136b887828801612f56565b93505060408501356001600160401b038111156136d457600080fd5b6136e087828801613048565b95989497509550505050565b60008060006060848603121561370157600080fd5b600061370d86866132a2565b935050602061371e868287016132a2565b92505060406134fc86828701612f56565b60006020828403121561374157600080fd5b81516001600160401b0381111561375757600080fd5b61337384828501613248565b60006060828403121561377557600080fd5b600061337384846132ad565b60006020828403121561379357600080fd5b60006133738484613308565b600080604083850312156137b257600080fd5b60006137be8585613308565b92505060206133ab85828601613334565b6000602082840312156137e157600080fd5b6000613373848461331e565b60008060008060008060008060006101208a8c03121561380c57600080fd5b60006138188c8c61331e565b99505060206138298c828d01612f61565b985050604061383a8c828d0161331e565b975050606061384b8c828d0161331e565b965050608061385c8c828d0161331e565b95505060a061386d8c828d0161331e565b94505060c061387e8c828d0161331e565b93505060e061388f8c828d0161323d565b9250506101006138a18c828d0161323d565b9150509295985092959850929598565b6000806000606084860312156138c657600080fd5b60006138d2868661331e565b93505060206138e38682870161331e565b92505060406134fc8682870161331e565b60006020828403121561390657600080fd5b60006133738484613329565b60006020828403121561392457600080fd5b6000613373848461333f565b60006020828403121561394257600080fd5b6000613373848461334a565b600061395a83836139fe565b505060200190565b60006107de8383613dbb565b600061395a8383613df3565b60006107de8383613eac565b60006139928383613fcb565b505060800190565b60006139a6838361401b565b505060c00190565b60006139ba838361408b565b50506101c00190565b60006139cf83836141a0565b505060400190565b60006139cf83836141c4565b600061395a8383614256565b6139f8816144bc565b82525050565b6139f88161446b565b6000613a1282614459565b613a1c818561445d565b9350613a2783614453565b8060005b83811015613a55578151613a3f888261394e565b9750613a4a83614453565b925050600101613a2b565b509495945050505050565b6000613a6b82614459565b613a75818561445d565b935083602082028501613a8785614453565b8060005b85811015613ac15784840389528151613aa48582613962565b9450613aaf83614453565b60209a909a0199925050600101613a8b565b5091979650505050505050565b6000613ad982614459565b613ae3818561445d565b9350613aee83614453565b8060005b83811015613a55578151613b06888261396e565b9750613b1183614453565b925050600101613af2565b6000613b2782614459565b613b31818561445d565b935083602082028501613b4385614453565b8060005b85811015613ac15784840389528151613b608582613962565b9450613b6b83614453565b60209a909a0199925050600101613b47565b6000613b8882614459565b613b92818561445d565b935083602082028501613ba485614453565b8060005b85811015613ac15784840389528151613bc1858261397a565b9450613bcc83614453565b60209a909a0199925050600101613ba8565b6000613be982614459565b613bf3818561445d565b9350613bfe83614453565b8060005b83811015613a55578151613c168882613986565b9750613c2183614453565b925050600101613c02565b6000613c3782614459565b613c41818561445d565b9350613c4c83614453565b8060005b83811015613a55578151613c64888261399a565b9750613c6f83614453565b925050600101613c50565b6000613c8582614459565b613c8f818561445d565b9350613c9a83614453565b8060005b83811015613a55578151613cb288826139ae565b9750613cbd83614453565b925050600101613c9e565b6000613cd382614459565b613cdd818561445d565b9350613ce883614453565b8060005b83811015613a55578151613d0088826139c3565b9750613d0b83614453565b925050600101613cec565b6000613d2182614459565b613d2b818561445d565b9350613d3683614453565b8060005b83811015613a55578151613d4e88826139d7565b9750613d5983614453565b925050600101613d3a565b6000613d6f82614459565b613d79818561445d565b9350613d8483614453565b8060005b83811015613a55578151613d9c88826139e3565b9750613da783614453565b925050600101613d88565b6139f881614476565b6000613dc682614459565b613dd0818561445d565b9350613de08185602086016144d2565b613de9816144fe565b9093019392505050565b6139f88161447b565b6000613e0782614459565b613e118185614466565b9350613e218185602086016144d2565b9290920192915050565b6000613e3860178361445d565b7f6163636f756e74206c6971756964697479206572726f72000000000000000000815260200192915050565b8051606080845260009190840190613e7c8282613ace565b9150506020830151613e916020860182614256565b506040830151613ea46040860182614256565b509392505050565b80516000906101a0840190613ec18582614256565b506020830151613ed460208601826139fe565b506040830151613ee76040860182614256565b5060608301518482036060860152613eff8282613a07565b91505060808301518482036080860152613f198282613d64565b91505060a083015184820360a0860152613f338282613b1c565b91505060c083015184820360c0860152613f4d8282613a60565b91505060e0830151613f6260e0860182614256565b50610100830151613f77610100860182614256565b50610120830151613f8c610120860182614256565b50610140830151613fa1610140860182614256565b50610160830151613fb6610160860182613db2565b50610180830151613ea4610180860182613db2565b80516080830190613fdc8482614256565b506020820151613fef6020850182613db2565b5060408201516140026040850182613db2565b5060608201516140156060850182614268565b50505050565b805160c083019061402c84826139fe565b50602082015161403f6020850182614256565b5060408201516140526040850182614256565b5060608201516140656060850182614256565b5060808201516140786080850182614256565b5060a082015161401560a0850182614256565b80516101c083019061409d84826139fe565b5060208201516140b06020850182614256565b5060408201516140c36040850182614256565b5060608201516140d66060850182614256565b5060808201516140e96080850182614256565b5060a08201516140fc60a0850182614256565b5060c082015161410f60c0850182614256565b5060e082015161412260e0850182614256565b50610100820151614137610100850182614256565b5061012082015161414c610120850182613db2565b50610140820151614161610140850182614256565b506101608201516141766101608501826139fe565b5061018082015161418b610180850182614256565b506101a08201516140156101a0850182614256565b805160408301906141b184826139fe565b5060208201516140156020850182614256565b805160408301906141b18482614256565b805160808301906141e68482614256565b5060208201516141f96020850182614256565b50604082015161420c60408501826139fe565b5060608201516140156060850182614256565b805160608301906142308482614256565b5060208201516142436020850182614256565b50604082015161401560408501826139fe565b6139f88161449e565b6139f8816144c7565b6139f8816144b0565b60006107de8284613dfc565b6020810161031382846139fe565b6020810161031382846139ef565b604081016142a782856139ef565b6107de60208301846139fe565b604081016142a782856139fe565b604081016142d082856139fe565b6107de602083018461425f565b602080825281016107de8184613b7d565b602080825281016107de8184613bde565b602080825281016107de8184613c2c565b602080825281016107de8184613c7a565b602080825281016107de8184613cc8565b602080825281016107de8184613d16565b602081016103138284613df3565b602080825281016107de8184613dbb565b6020808252810161031381613e2b565b602080825281016107de8184613e64565b60c08101610313828461401b565b6101c08101610313828461408b565b6040810161031382846141a0565b6080810161031382846141d5565b60608101610313828461421f565b602081016103138284614256565b604081016142a78285614256565b6040518181016001600160401b038111828210171561440457600080fd5b604052919050565b60006001600160401b0382111561442257600080fd5b5060209081020190565b60006001600160401b0382111561444257600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b600061031382614486565b151590565b60006103138261446b565b6001600160a01b031690565b6001600160e01b031690565b90565b63ffffffff1690565b60ff1690565b6001600160601b031690565b60006103138261447b565b6000610313826144a1565b60005b838110156144ed5781810151838201526020016144d5565b838111156140155750506000910152565b601f01601f191690565b6145118161446b565b811461451c57600080fd5b50565b61451181614476565b6145118161447b565b61451181614492565b6145118161449e565b614511816144a1565b614511816144aa565b614511816144b056fea365627a7a72315820b8be5c7c424bd7a4bbfd8aa840be9aaeba9e2c4f3e52aa8638e612725edba5696c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}