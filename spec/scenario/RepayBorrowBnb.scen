-- Tests for repaying borrows

Macro SetupBorrow borrowRate
    NewComptroller price:1.0 -- TODO: This should really be a price for a specific asset
    ListedBRToken ZRX vZRX borrowRate
    ListedCKBToken brCKB borrowRate 0.005e9
    SetCollateralFactor vZRX collateralFactor:0.5
    SetCollateralFactor brCKB collateralFactor:0.5
    Donate brCKB 0.003e18
    Prep Geoff Some ZRX vZRX
    Mint Geoff 100e18 vZRX
    EnterMarkets Geoff vZRX brCKB

Macro NewBorrowCkb borrowAmount borrowRate
    SetupBorrow borrowRate
    Borrow Geoff borrowAmount brCKB

Test "Borrow, hold a few blocks, and repay part"
    NewBorrowCkb borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.001e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    -- Now let's repay one full token
    Expect Changes (CKBBalance Geoff) -0.001e18
    Expect Changes (CKBBalance brCKB) +0.001e18
    RepayBorrowCkb Geoff 0.001e18 brCKB
    ---- Let's check the overall numbers
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0015e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.0015e18
    FastForward 200000 Blocks -- 0.0015e18 * (1 + 2000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.003e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.003e18

Test "Borrow, hold a few blocks, and repay part via maximillion"
    NewBorrowCkb borrowAmount:0.001e18 borrowRate:0.000005
    Maximillion Deploy brCKB
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.001e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    -- Now let's repay one full token
    Expect Changes (CKBBalance Geoff) -0.001e18
    Expect Changes (CKBBalance brCKB) +0.001e18
    RepayBorrowCkbMax Geoff 0.001e18 brCKB
    ---- Let's check the overall numbers
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0015e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.0015e18
    FastForward 200000 Blocks -- 0.0015e18 * (1 + 200000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.003e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.003e18

Test "Don't borrow and then do repay"
    SetupBorrow borrowRate:0.000005
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    -- Now let's repay one full token
    Expect Changes (CKBBalance Geoff) Zero
    Expect Changes (CKBBalance brCKB) Zero
    RepayBorrowCkb Geoff 0 brCKB
    ---- Let's check the overall numbers
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero

Test "Don't borrow and repay part via maximillion"
    SetupBorrow borrowRate:0.000005
    Maximillion Deploy brCKB
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    -- Now let's repay one full token
    Expect Changes (CKBBalance Geoff) Zero
    Expect Changes (CKBBalance brCKB) Zero
    RepayBorrowCkbMax Geoff 0.001e18 brCKB
    ---- Let's check the overall numbers
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero

Test "Borrow, hold a few blocks, and repay full"
    NewBorrowCkb borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.001e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    -- Now let's repay fully
    Expect Changes (CKBBalance Geoff) -0.0025e18
    Expect Changes (CKBBalance brCKB) +0.0025e18
    RepayBorrowCkb Geoff 0.0025e18 brCKB
    -- Let's check the overall numbers
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero
    FastForward 200000 Blocks -- 0e18 * (1 + 200000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero

Test "Borrow, hold a few blocks, and repay full via maximillion"
    NewBorrowCkb borrowAmount:0.001e18 borrowRate:0.000005
    Maximillion Deploy brCKB
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.001e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    -- Now let's repay fully
    Expect Changes (CKBBalance Geoff) -0.0025e18
    Expect Changes (CKBBalance brCKB) +0.0025e18
    RepayBorrowCkbMax Geoff 0.0025e18 brCKB
    -- Let's check the overall numbers
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero
    FastForward 200000 Blocks -- 0e18 * (1 + 200000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero

Test "Borrow, hold a few blocks, and repay too much"
    NewBorrowCkb borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.001e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    -- Now let's repay fully
    Expect Changes (CKBBalance Geoff) Zero
    Expect Changes (CKBBalance brCKB) Zero
    -- TODO: This currently drains the sent-ckb
    AllowFailures
    RepayBorrowCkb Geoff 1.0e18 brCKB
    Assert Revert "revert REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED"
    -- Let's check the overall numbers
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.0025e18

Test "Borrow, hold a few blocks, and repay too much via maximillion"
    NewBorrowCkb borrowAmount:0.001e18 borrowRate:0.000005
    Maximillion Deploy brCKB
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.001e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    -- Now let's repay fully
    Expect Changes (CKBBalance Geoff) -0.0025e18
    Expect Changes (CKBBalance brCKB) +0.0025e18
    RepayBorrowCkbMax Geoff 1.0e18 brCKB
    -- Let's check the overall numbers
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero
    FastForward 200000 Blocks -- 0e18 * (1 + 200000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) Zero
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) Zero

Test "Borrow, and get a negative total cash situation"
    NewBorrowCkb borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.001e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.001e18
    -- Let's zoom way forward into the future
    FastForward 9800000 Blocks -- 0.001e18 * (1 + 9800000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.05e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.05e18
    -- Now let's repay one bit
    RepayBorrowCkb Geoff 0.001e18 brCKB
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.049e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.049e18

Test "Borrow, hold a few blocks, and repay behalf part"
    NewBorrowCkb borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.001e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    -- Now let's repay one full token from another user
    RepayBorrowCkbBehalf Torrey Geoff 0.001e18 brCKB
    Assert Equal (BRToken brCKB BorrowBalance Torrey) Zero
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0015e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.0015e18
    FastForward 200000 Blocks -- 0.0015e18 * (1 + 200000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Torrey) Zero
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.003e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.003e18

Test "Prohibit repay by comptroller hook"
    NewBorrowCkb borrowAmount:0.001e18 borrowRate:0.000005
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.001e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.001e18
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e18 * (1 + 300000 * 0.000005)
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    -- Now let's repay one full token
    Expect Changes (CKBBalance Geoff) Zero
    Expect Changes (CKBBalance brCKB) Zero
    Comptroller UnList brCKB -- Mock unlist brCKB
    AllowFailures
    RepayBorrowCkb Geoff 0.001e18 brCKB
    Assert RevertFailure COMPTROLLER_REJECTION "revert repayBorrow failed"
    ---- Let's check the overall numbers
    Assert Equal (BRToken brCKB BorrowBalance Geoff) 0.0025e18
    Assert Equal (BRToken brCKB TotalBorrowsCurrent) 0.0025e18
