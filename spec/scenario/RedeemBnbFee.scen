-- Redeem Tests

Test "Mint then Redeem All"
    NewFeeComptroller
    ListedCKBToken brCKB initialExchangeRate:0.005e9
    CallMintCkb Geoff 0.005e18 brCKB
    -- Check current affairs
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 10e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 0.005e18
    Invariant Static (BRToken brCKB ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (CKBBalance Geoff) +4.9995e15
    RedeemCkb Geoff 10e8 brCKB
    Assert Equal (Erc20 brCKB TokenBalance Geoff) Zero
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) Zero
    Expect Changes (CKBBalance Geoff) 5e14

Test "Mint then Redeem Part"
    NewFeeComptroller
    ListedCKBToken brCKB initialExchangeRate:0.005e9
    CallMintCkb Geoff 0.005e18 brCKB
    -- Check current affairs
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 10e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 0.005e18
    Invariant Static (BRToken brCKB ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (CKBBalance Geoff) +9.999e14
    RedeemCkb Geoff 2e8 brCKB
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 8e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 0.004e18

Test "Mint then Redeem Too Much"
    NewFeeComptroller
    ListedCKBToken brCKB initialExchangeRate:0.005e9
    CallMintCkb Geoff 0.005e18 brCKB
    AllowFailures
    -- Check and hold static
    Invariant Static (BRToken brCKB ExchangeRateStored)
    Invariant Remains (Erc20 brCKB TokenBalance Geoff) 10e8
    Invariant Static (CKBBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemCkb Geoff 11e8 brCKB
    -- TODO: This should really be REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, but based on
    -- the order of subtractions, total supply comes before account supply.
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3" -- TODO: This error is wrong

Test "Mint then Redeem Zero"
    NewFeeComptroller
    ListedCKBToken brCKB initialExchangeRate:0.005e9
    CallMintCkb Geoff 0.005e18 brCKB
    -- Check and hold static
    Invariant Static (BRToken brCKB ExchangeRateStored)
    Invariant Remains (Erc20 brCKB TokenBalance Geoff) 10e8
    Invariant Static (CKBBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemCkb Geoff 0e9 brCKB

Pending "Mint then redeem with interest - no reserves"
    Invariant Success
    NewFeeComptroller
    ListedBRToken ZRX brCKB initialExchangeRate:1e9
    Invariant Remains (BRToken brCKB Reserves) Zero
    Prep Geoff 50e18 ZRX brCKB
    Mint Geoff 50e18 brCKB
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 500e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 50e18
    Assert Equal (BRToken brCKB ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX brCKB 10e18 5e18 interestRate:0.0001 blocks:5000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 500e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 55e18
    Assert Equal (BRToken brCKB ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 brCKB
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 55e18
    Assert Equal (Erc20 ZRX TokenBalance brCKB) 0e18
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 0e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 0e18
    Assert Equal (BRToken brCKB ExchangeRate) 1e9

Pending "Mint then redeem part with interest - no reserves"
    Invariant Success
    NewFeeComptroller
    ListedBRToken ZRX brCKB initialExchangeRate:1e9
    Invariant Remains (BRToken brCKB Reserves) Zero
    Prep Geoff 50e18 ZRX brCKB
    Mint Geoff 50e18 brCKB
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 500e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 50e18
    Assert Equal (BRToken brCKB ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX brCKB 10e18 5e18 interestRate:0.0001 blocks:5000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 500e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 55e18
    Assert Equal (BRToken brCKB ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 499e8 brCKB
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 1e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 0.11e18
    Assert Equal (BRToken brCKB ExchangeRate) 1.1e9

Pending "Mint then redeem with reserves and interest"
    Invariant Success
    NewFeeComptroller
    ListedBRToken ZRX brCKB initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX brCKB
    Mint Geoff 50e18 brCKB
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 500e8
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 50e18
    Assert Equal (BRToken brCKB ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX brCKB 10e18 5e18 interestRate:0.0001 blocks:5000 reserveRate:0.2
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 500e8
    Assert Equal (BRToken brCKB Reserves) 1e18
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 54e18
    -- 55e18 + 0e18 - 1e18 / 500
    Assert Equal (BRToken brCKB ExchangeRate) 1.08e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 brCKB
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 54e18
    Assert Equal (Erc20 ZRX TokenBalance brCKB) 1e18
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 0e8
    Assert Equal (BRToken brCKB Reserves) 1e18
    Assert Equal (BRToken brCKB UnderlyingBalance Geoff) 0e18
    Assert Equal (BRToken brCKB ExchangeRate) 1e9

Test "Two users Mint, one redeems"
    NewFeeComptroller
    ListedCKBToken brCKB initialExchangeRate:0.005e9
    CallMintCkb Geoff 0.002e18 brCKB
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 4e8
    Assert Equal (Erc20 brCKB TotalSupply) 4e8
    CallMintCkb Torrey 0.004e18 brCKB
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 4e8
    Assert Equal (Erc20 brCKB TokenBalance Torrey) 8e8
    Assert Equal (Erc20 brCKB TotalSupply) 12e8
    RedeemCkb Torrey 3e8 brCKB
    Assert Equal (Erc20 brCKB TokenBalance Geoff) 4e8
    Assert Equal (Erc20 brCKB TokenBalance Torrey) 5e8
    Assert Equal (Erc20 brCKB TotalSupply) 9e8
