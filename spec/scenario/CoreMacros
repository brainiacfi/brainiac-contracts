-- These are included in each scenario

Macro Successfully
    Invariant Success

Macro AllowFailures
    ClearInvariants Success

Macro PricedComptroller closeFactor=0.1 maxAssets=20
    Unitroller Deploy
    PriceOracle Deploy Simple
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become
    ComptrollerLens Deploy
    Comptroller SetComptrollerLens (Address ComptrollerLens)
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing brCkb use ListedCKBToken to replace proxy
    Comptroller SetPriceOracle (PriceOracleProxy Address)
    Comptroller SetCloseFactor closeFactor

Macro PricedComptrollerWithLiquidator treasury closeFactor=0.1 maxAssets=20
    PricedComptroller closeFactor maxAssets
    Liquidator Deploy Admin Admin (Comptroller Address) Admin treasury 5e16  -- treasury percent = 5%
    Comptroller SetLiquidatorContract (Address Liquidator)

Macro PricedComptrollerWithBAIController closeFactor=0.1 maxAssets=20
    PricedComptroller closeFactor maxAssets
    NewBAIController
    Comptroller SetBAIController (Address BAIUnitroller)
    BAIController SetComptroller (Address Unitroller)
    Comptroller SetBAIMintRate 5e3
    NewBAI

Macro NewComptroller price=1.0 closeFactor=0.1 maxAssets=20
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become
    ComptrollerLens Deploy
    Comptroller SetComptrollerLens (Address ComptrollerLens)
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing brCkb use ListedCKBToken to replace proxy
    Comptroller SetPriceOracle (PriceOracleProxy Address)
    Comptroller SetCloseFactor closeFactor

Macro NewFeeComptroller price=1.0 closeFactor=0.1 maxAssets=20
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    ComptrollerImpl Deploy Scenario ScenComptroller
    Unitroller SetPendingImpl ScenComptroller
    ComptrollerImpl ScenComptroller Become
    ComptrollerLens Deploy
    Comptroller SetComptrollerLens (Address ComptrollerLens)
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero) -- if listing brCkb use ListedCKBToken to replace proxy
    Comptroller SetPriceOracle (PriceOracleProxy Address)
    Comptroller SetCloseFactor closeFactor
    Comptroller SetTreasuryData Guardian Jared 1e14

Macro NewComptrollerWithBAIController price=1.0 closeFactor=0.1 maxAssets=20
    NewComptroller price closeFactor maxAssets
    NewBAIController
    Comptroller SetBAIController (Address BAIUnitroller)
    BAIController SetComptroller (Address Unitroller)
    Comptroller SetBAIMintRate 5e3

Macro NewBAIController
    BAIUnitroller Deploy
    --current
    BAIControllerImpl Deploy Scenario ScenBAIController
    BAIUnitroller SetPendingImpl ScenBAIController
    BAIControllerImpl ScenBAIController Become
    BAIController Initialize

Macro NewBAI
    BAI Deploy Admin
    BAI Rely (Address BAIUnitroller)
    BAIController Send "setBAIAddress(address)" (Address BAI)

Macro NewBRToken erc20 brToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=BRErc20DelegatorScenario brTokenType=BRErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    BRTokenDelegate Deploy brTokenType brErc20Delegate
    BRToken Deploy delegatorType brToken brToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (BRTokenDelegate brErc20Delegate Address) becomeImplementationData

-- Same as NewBRToken but does not deploy an ERC20. Used for special ERC20s that are initialized differently
Macro NewBRTokenBringERC20 erc20 brToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 delegatorType=BRErc20DelegatorScenario brTokenType=BRErc20DelegateScenario admin=Admin becomeImplementationData="0x0"
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    BRTokenDelegate Deploy brTokenType brErc20Delegate
    BRToken Deploy delegatorType brToken brToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin (BRTokenDelegate brErc20Delegate Address) becomeImplementationData

Macro NewBRTokenImmutable erc20 brToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard brTokenType=Scenario admin=Admin
    Erc20 Deploy tokenType erc20 erc20
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    BRToken Deploy brTokenType brToken brToken (Erc20 erc20 Address) (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro NewCKBToken brToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    InterestRateModel Deploy Fixed StdInterest borrowRate -- Note: interest rate model probably shouldn't be global
    BRToken Deploy BRCKBScenario brToken brToken (Comptroller Address) (InterestRateModel StdInterest Address) initialExchangeRate decimals admin

Macro ListedBRToken erc20 brToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard delegatorType=BRErc20DelegatorScenario brTokenType=BRErc20DelegateScenario admin=Admin
    NewBRToken erc20 brToken borrowRate initialExchangeRate decimals tokenType delegatorType brTokenType admin
    Comptroller SupportMarket brToken

Macro ListedBRTokenImmutable erc20 brToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 tokenType=Standard brTokenType=Scenario admin=Admin
    NewBRTokenImmutable erc20 brToken borrowRate initialExchangeRate decimals tokenType brTokenType admin
    Comptroller SupportMarket brToken

Macro ListedCKBToken brToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    NewCKBToken brToken borrowRate initialExchangeRate decimals admin
    Comptroller SupportMarket brToken
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address brCKB) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    Comptroller SetPriceOracle (PriceOracleProxy Address)

Macro ListedCKBTokenMinted brToken borrowRate=0.000005 initialExchangeRate=2e9 decimals=8 admin=Admin
    NewCKBToken brToken borrowRate initialExchangeRate decimals admin
    Comptroller SupportMarket brToken
    CallMintCkb Root 1e18 brToken

Macro SetPriceCF brToken price collateralFactor
    PriceOracle SetPrice brToken price
    Comptroller SetCollateralFactor brToken collateralFactor

Macro Give user amount erc20
    Erc20 erc20 Faucet user amount

Macro GiveBAI user amount
    BAI Faucet user amount

Macro PrepBAI user amount token allowanceAmount=Nothing
    GiveBAI user amount
    From user (BAI Approve token (Default allowanceAmount amount))

Macro Donate token amount
    (Trx Value amount (BRToken token Donate))

Macro Prep user amount erc20 token allowanceAmount=Nothing
    Erc20 erc20 Faucet user amount
    From user (Erc20 erc20 Approve token (Default allowanceAmount amount))

Macro Allow user token
    From user (Erc20 (BRToken token Underlying) Approve token UInt256Max)

Macro AccrueInterest token
    BRToken token AccrueInterest

Macro Mint user amount token
    From user (BRToken token Mint amount)

Macro MintBehalf payer receiver amount token
    From payer (BRToken token MintBehalf receiver amount)

Macro SendMintCkb user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Send token amount)))

Macro CallMintCkb user amount token
    From user (Trx GasPrice 0 (Trx Value amount (BRToken token Mint)))

Macro Redeem user amount token
    From user (BRToken token Redeem amount)

Macro RedeemCkb user amount token
    Trx GasPrice 0 (From user (BRToken token Redeem amount))

Macro RedeemUnderlying user amount token
    From user (BRToken token RedeemUnderlying amount)

Macro RedeemUnderlyingCkb user amount token
    Trx GasPrice 0 (From user (BRToken token RedeemUnderlying amount))

Macro BorrowCkb user amount token
    Trx GasPrice 0 (From user (BRToken token Borrow amount))

Macro Borrow user amount token
    From user (BRToken token Borrow amount)

Macro RepayBorrow user amount token
    From user (BRToken token RepayBorrow amount)

Macro MintBAI user amount
    From user (BAIController Mint amount)

Macro RepayBAI user amount
    From user (BAIController Repay amount)

Macro RepayBorrowCkb user amount token
    From user (Trx GasPrice 0 (Trx Value amount (BRToken token RepayBorrow)))

Macro RepayBorrowCkbMax user amount token
    From user (Trx GasPrice 0 (Trx Value amount (Maximillion RepayBehalf user)))

Macro RepayBorrowBehalf user behalf amount token
    From user (BRToken token RepayBorrowBehalf behalf amount)

Macro RepayBorrowCkbBehalf user behalf amount token
    From user (Trx GasPrice 0 (Trx Value amount (BRToken token RepayBorrowBehalf behalf)))

Macro ApproveLiquidation liquidator token amount
    From liquidator (Erc20 (BRToken token Underlying) Approve (Address Liquidator) amount)

Macro Liquidate liquidator _ borrower amount token _ collateral
    From liquidator (Liquidator LiquidateBorrow (Address token) borrower amount (Address collateral))

Macro LiquidateBAI liquidator _ borrower amount _ collateral
    From liquidator (Liquidator LiquidateBorrow (Address BAIController) borrower amount (Address collateral))

Macro LiquidateCkbColl liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (Liquidator LiquidateBorrow (Address token) Liquidate borrower amount (Address collateral)))

Macro LiquidateCkbBorrow liquidator _ borrower amount token _ collateral
    From liquidator (Trx GasPrice 0 (Trx Value amount (Liquidator LiquidateBorrow (Address token) Liquidate borrower amount (Address collateral))))

Macro Seize amount token caller liquidator borrower
    From caller (BRToken token Seize liquidator borrower amount)

Macro EvilSeize token amount treasure seizer seizee
    BRToken token EvilSeize treasure seizer seizee amount

Macro Support brToken collateralFactor=0.5
    Comptroller SupportMarket brToken
    Comptroller SetCollateralFactor brToken collateralFactor

Macro SetCollateralFactor brToken collateralFactor=0.5
    Comptroller SetCollateralFactor brToken collateralFactor

Macro AddReserves amount token user=Root
    From user (BRToken token AddReserves amount)

Macro ReduceReserves amount token
    BRToken token ReduceReserves amount

Macro FastForward n blocks
    Comptroller FastForward n blocks

Macro EnterMarkets user ...markets
    From user (Comptroller EnterMarkets markets)

Macro ExitMarket user market
    From user (Comptroller ExitMarket market)

Macro Transfer from to amount token
    From from (Erc20 token Transfer to amount)

Macro Cash brToken
    Read Erc20 (BRToken brToken Underlying) TokenBalance brToken

Macro QuickMint amount brToken from=Me
    Give from amount (BRToken brToken Underlying)
    Allow from brToken
    From from (BRToken brToken Mint amount)

Macro QuickBorrow amount brToken ...collateral
    From Me (Comptroller EnterMarkets collateral)
    From Me (Comptroller EnterMarkets (brToken))
    From Me (BRToken brToken Borrow amount)

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the erc20 market
Macro BorrowAndRepayWithInterest erc20 brToken amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    BRToken brToken SetInterestRateModel (InterestRateModel Std Address)
    BRToken brToken SetReserveFactor reserveRate
    ListedBRToken COLLAT cCOLLAT
    Comptroller SetCollateralFactor cCOLLAT 0.9
    Prep Torrey 1e30 COLLAT cCOLLAT
    Mint Torrey 1e30 cCOLLAT
    EnterMarkets Torrey cCOLLAT brToken
    Assert True (Comptroller CheckMembership Torrey cCOLLAT)
    Assert True (Comptroller CheckMembership Torrey brToken)
    Borrow Torrey amount brToken
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (BRToken BorrowBalance Torrey) brToken
    From Torrey (Erc20 erc20 Approve brToken amount)
    RepayBorrow Torrey amount brToken
    From Torrey (Erc20 erc20 Approve brToken interestAmount)
    Give Torrey interestAmount erc20
    RepayBorrow Torrey interestAmount brToken
    Assert Equal (BRToken brToken BorrowBalance Torrey) Zero

-- Macro for performing a borrow with the sole
-- purpose of adding interest to the ckb market
Macro BorrowAndRepayCkbWithInterest brCkb amount interestAmount interestRate blocks reserveRate=0
    -- TODO: Make invariant success for these?
    -- TODO: Named args as macros
    InterestRateModel Deploy Fixed Std interestRate
    BRToken brCkb SetInterestRateModel (InterestRateModel Std Address)
    BRToken brCkb SetReserveFactor reserveRate
    ListedBRToken COLLAT cCOLLAT
    Comptroller SetCollateralFactor cCOLLAT 0.9
    Prep Torrey 1e30 COLLAT cCOLLAT
    Mint Torrey 1e30 cCOLLAT
    EnterMarkets Torrey cCOLLAT brCkb
    Assert True (Comptroller CheckMembership Torrey cCOLLAT)
    Assert True (Comptroller CheckMembership Torrey brCkb)
    Borrow Torrey amount brCkb
    -- Cool, we've borrowed, now let's accrue interest then repay all
    FastForward blocks Blocks
    -- RepayBorrow Torrey (BRToken BorrowBalance Torrey) brCkb
    RepayBorrowCkb Torrey amount brCkb
    RepayBorrowCkb Torrey interestAmount brCkb
    Assert Equal (BRToken brCkb BorrowBalance Torrey) Zero

Macro DeployVault brn
    BRNVaultImpl Deploy VaultImpl
    BRNVaultProxy Deploy
    BRNVaultProxy SetPendingImplementation VaultImpl
    BRNVaultImpl VaultImpl Become
    BRNStore Deploy
    BRNStore SetNewOwner (Address BRNVault)
    BRNVault SetBrnStore (Address brn) (Address BRNStore)
    BRNVault Add (Address brn) 1000 (Address brn) 300 12345
